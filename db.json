{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/QQ截图20160301204728.jpg","path":"img/QQ截图20160301204728.jpg","modified":0,"renderable":0},{"_id":"source/img/QQ截图20160403180630.jpg","path":"img/QQ截图20160403180630.jpg","modified":0,"renderable":0},{"_id":"source/img/QQ截图20160613193005.jpg","path":"img/QQ截图20160613193005.jpg","modified":0,"renderable":0},{"_id":"source/img/su-logo.png","path":"img/su-logo.png","modified":0,"renderable":0},{"_id":"themes/paper/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/paper/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/paper/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/paper/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/paper/source/css/reset.styl","path":"css/reset.styl","modified":0,"renderable":1},{"_id":"themes/paper/source/css/tocbot.css","path":"css/tocbot.css","modified":0,"renderable":1},{"_id":"themes/paper/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/paper/source/img/icon-left-arrow.svg","path":"img/icon-left-arrow.svg","modified":0,"renderable":1},{"_id":"themes/paper/source/img/icon-menu-sprite.svg","path":"img/icon-menu-sprite.svg","modified":0,"renderable":1},{"_id":"themes/paper/source/js/paper.js","path":"js/paper.js","modified":0,"renderable":1},{"_id":"themes/paper/source/js/tocbot.js","path":"js/tocbot.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d5ab1cad2c9d792ed875ec195e606dd56380203a","modified":1642651929024},{"_id":"source/baidu_verify_aH9Bnk1gKE.html","hash":"fa5062cb3f86f1bd6388080a4667a3b62d827b5d","modified":1642651929030},{"_id":"source/_posts/Mac系统配置前端开发环境.md","hash":"8fe5edf0e29c105686a9667acf0903731159e2f0","modified":1642651929024},{"_id":"source/_posts/React课程学习.md","hash":"120648d94d81b6486381656e1330c8123cb0c536","modified":1642651929025},{"_id":"source/_posts/Typescript-cheatSheet.md","hash":"39035a02f983a91830f8f1cc0de30a1e55ad8a2f","modified":1642651929025},{"_id":"source/_posts/docker入门.md","hash":"b9080bbedf84e317d1f028483e4892689a571069","modified":1642651929025},{"_id":"source/_posts/hackathon-blog.md","hash":"d1ae28cc503bedba6c5c78bdda0dd844dbe68564","modified":1642651929025},{"_id":"source/_posts/hello-hexo.md","hash":"ddcaac0c84e939b1e3ed04e3f44d21f1145860d4","modified":1642651929026},{"_id":"source/_posts/hexo-theme.md","hash":"a1f0c3008c0be0eaf9e54b9a55c191c85f8942a6","modified":1642651929026},{"_id":"source/_posts/koa-begainer.md","hash":"6ccb18a01f4cda70d5903092066e9b2f246e3496","modified":1642651929026},{"_id":"source/_posts/readList-1.md","hash":"89ec6a13e38837aca13c4e7bef79b7e624237ed4","modified":1642651929027},{"_id":"source/_posts/readList-2016-06-01.md","hash":"b2419b736b351c09a2143e4dbd3b17d4bc718162","modified":1642651929027},{"_id":"source/_posts/readList-201608.md","hash":"f7119ca297f30d4074ad2f9251077dc20beb432e","modified":1642651929027},{"_id":"source/_posts/readList.md","hash":"ef16a2469160536ce036995e993c8a6ebd3488e3","modified":1642651929027},{"_id":"source/_posts/three-js-beginer.md","hash":"e94de7186361c719e56d7b1c22d9660eec31633a","modified":1642651929028},{"_id":"source/_posts/web-storage-api.md","hash":"0db76611727bb47215d499191dd4febd6ae226a8","modified":1642651929028},{"_id":"source/_posts/webuploader.md","hash":"77ca9b671abb64d2dde72c3823fac9342dea1664","modified":1642651929028},{"_id":"source/_posts/小程序.md","hash":"a34e158813f5e82f4d98a41520853677479d768b","modified":1642651929028},{"_id":"source/_posts/移动端Web上传图片.md","hash":"728e24895bf829ef2d8a67d4435d8d407ce48e85","modified":1642651929028},{"_id":"source/_posts/自定义Yeoman生成器.md","hash":"eb652555b649406803869f9b019b7d0b55deb898","modified":1642651929029},{"_id":"source/about/index.md","hash":"f038b202d04a3fb126b3e8022f85c30e7d17b969","modified":1642651929029},{"_id":"source/categories/index.md","hash":"e3733e09e58acc616029830c0dbdec806b1fe148","modified":1642651929030},{"_id":"source/img/QQ截图20160301204728.jpg","hash":"3d9b3a6c729011896e403249c940590b01aefa8a","modified":1642651929031},{"_id":"source/img/QQ截图20160403180630.jpg","hash":"b60cf7c50813901ac8305c8c5df9254f4deb1254","modified":1642651929031},{"_id":"source/img/QQ截图20160613193005.jpg","hash":"2ab6b5534edf1b6b61ec1e86e6436d4e56853f1b","modified":1642651929031},{"_id":"source/img/su-logo.png","hash":"e09f43b38d7b6bda6a3663bda5debedad3649f83","modified":1642651929032},{"_id":"source/tags/index.md","hash":"ff2e6b3b0334b04755f3d9bb88a66b8447d8a105","modified":1642651929032},{"_id":"themes/paper/.editorconfig","hash":"d9610aaea1bf1b49e7ec1d67993b228d28c80b68","modified":1642074942239},{"_id":"themes/paper/LICENCE","hash":"862d41817ef8eaac0e569bdc7573cdfb618c7117","modified":1642074942239},{"_id":"themes/paper/README.en.md","hash":"a0de39ff818be2aa1cd3411b61d5920b35d1c2d7","modified":1710333820876},{"_id":"themes/paper/README.md","hash":"888bbf6254f78b5c3579cab5919a6eb7b7cbf16f","modified":1710333820876},{"_id":"themes/paper/_config.yml","hash":"1c5243f4640d68bb0441cee79b0852e7aee33af3","modified":1710333820876},{"_id":"themes/paper/package.json","hash":"15263e7f003cb7f31e78326fe3f13f17ab7e27fa","modified":1642074942246},{"_id":"themes/paper/.vscode/settings.json","hash":"9f9ec4947b4f4f2b5d6c708869b0017783055332","modified":1642149270900},{"_id":"themes/paper/layout/archive.pug","hash":"4be62bc9d6389e62b54ccac5c7aea818bff5383e","modified":1642074942240},{"_id":"themes/paper/layout/category.pug","hash":"bf5c2dc7e03200a0a2ac5da1623aeef73610b780","modified":1642074942241},{"_id":"themes/paper/layout/index.pug","hash":"a1b2c6d178fcda65859c423db660bb651034a56f","modified":1642074942245},{"_id":"themes/paper/layout/page.pug","hash":"1db07e176614e462eaf07d99fe74d68d1ffeda47","modified":1642074942245},{"_id":"themes/paper/layout/post.pug","hash":"4a298d14becc2f1141b5562797f52866c7fd906f","modified":1710333820879},{"_id":"themes/paper/layout/tag.pug","hash":"0e5ae6d39e2a4a1af3e41ab79edc87308bd2b3aa","modified":1642074942246},{"_id":"themes/paper/source/favicon.ico","hash":"552dfc7e99c6593c62f5c39938dadc747c0fb02f","modified":1642074942252},{"_id":"themes/paper/layout/includes/darkmode-mask.pug","hash":"0c0c59533ce3fc602f4c6e6ceded0556bda18dca","modified":1642074942241},{"_id":"themes/paper/layout/includes/footer.pug","hash":"a9a68664e7ccaabf970d8ecd92c338fc08f8e70b","modified":1642074942241},{"_id":"themes/paper/layout/includes/head.pug","hash":"0787801219337e56ab2f431d83779fc3db10f89d","modified":1642074942241},{"_id":"themes/paper/layout/includes/layout.pug","hash":"f5499c8f2418a07fbc678f957fa90f985187d7f9","modified":1710334204108},{"_id":"themes/paper/layout/includes/location-bar.pug","hash":"a0b224c540819fe09b7a27b93ef84831538e624b","modified":1642074942242},{"_id":"themes/paper/layout/includes/main.pug","hash":"68ba8f5a6a9a85db9e23e392d3651493871087e2","modified":1642074942242},{"_id":"themes/paper/layout/includes/paginator.pug","hash":"08bda0330eb65546f2b57ff87aa7c6267cbdf527","modified":1642074942242},{"_id":"themes/paper/layout/includes/posts.pug","hash":"3f0ad3f19a2a4eb9a42c4026f7bcd722dee90980","modified":1642074942242},{"_id":"themes/paper/layout/includes/pre-next.pug","hash":"377781154b11ec40f888f28ee7a9d958189ef551","modified":1642074942243},{"_id":"themes/paper/layout/includes/sidebar.pug","hash":"30ca87b550bab39a25a9499e72e95b7d7dbfc08a","modified":1642074942244},{"_id":"themes/paper/layout/includes/switch-button.pug","hash":"1cf603d69a4d80a85e470b8999c3090f56978fd0","modified":1642074942244},{"_id":"themes/paper/layout/includes/toc.pug","hash":"a1f1db69d71145e51eab9985f50278594336da8d","modified":1642074942244},{"_id":"themes/paper/layout/mixins/horizontalLine.pug","hash":"29db15a39281cc4cc03afc150fbbdc6160cc2294","modified":1642074942245},{"_id":"themes/paper/layout/mixins/postItem.pug","hash":"c86f1013edfa7979bf1ed20435fb6c0381d2ffad","modified":1642074942245},{"_id":"themes/paper/source/css/font.styl","hash":"3c582310cb5f649f0e1db979590f58f87a9d7818","modified":1642074942246},{"_id":"themes/paper/source/css/index.styl","hash":"8403dbf723ffecb89f576aa69dd85c44999baff5","modified":1710333820880},{"_id":"themes/paper/source/css/post.styl","hash":"1c8b8c737fd5b530574ad42d713ab489f1c72e90","modified":1642074942251},{"_id":"themes/paper/source/css/reset.styl","hash":"3cae156009ac28a7fec505d2eab578fb543a7e46","modified":1642074942251},{"_id":"themes/paper/source/css/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1642074942252},{"_id":"themes/paper/source/css/var.styl","hash":"1e77457b2b6b7747c3135e53247971e8cecf6717","modified":1642074942252},{"_id":"themes/paper/source/img/icon-left-arrow.svg","hash":"93c0204c35016e3f3bf57f87e8e66971d81ab424","modified":1642074942253},{"_id":"themes/paper/source/img/icon-menu-sprite.svg","hash":"7dd7b0d5b0e85b7a20db33e42ff46403d575189c","modified":1642074942253},{"_id":"themes/paper/source/js/paper.js","hash":"9ae92bb48faacf4e70435efa0803e580bc7eba12","modified":1642074942253},{"_id":"themes/paper/source/js/tocbot.js","hash":"fd53a8f0f47435a17ac2398a2c519cf9ff6a033c","modified":1642074942253},{"_id":"themes/paper/layout/includes/scripts/comments-script.pug","hash":"2ce2fd825f0717f45fd2961ea9727822439dd4f3","modified":1642074942243},{"_id":"themes/paper/layout/includes/scripts/google-analytics-script.pug","hash":"ff397c30751914d048c62574e100b126f8fad6af","modified":1642074942243},{"_id":"themes/paper/layout/includes/scripts/math-script.pug","hash":"a7d3b30cca66934c38e9db1e9faa92c056e3cb41","modified":1642074942243},{"_id":"themes/paper/layout/includes/scripts/toc-script.pug","hash":"5d7281d1b6d8507f0ac1453be34593f047158e07","modified":1642074942243},{"_id":"themes/paper/source/css/includes/_darkmode-mask.styl","hash":"3041b9e1f3ecee5da4c3cc208a8852fc2df9b311","modified":1642074942247},{"_id":"themes/paper/source/css/includes/_footer.styl","hash":"8485a118bd6448624c355a1b59770028da2840e4","modified":1642074942247},{"_id":"themes/paper/source/css/includes/_head.styl","hash":"b91e26a2d79607432ed22617ad9e9c9725793ba0","modified":1710333820879},{"_id":"themes/paper/source/css/includes/_horizontal-line.styl","hash":"ee1082bcfa28a3cbaf4468a3bbc9861ec94c6f93","modified":1642074942248},{"_id":"themes/paper/source/css/includes/_location-bar.styl","hash":"45f6cf611afab3a55a1ab205d9759745cf0000b7","modified":1642074942248},{"_id":"themes/paper/source/css/includes/_main.styl","hash":"5d955e53d9ac68fdb72529b85d9319a01b153e3f","modified":1642074942249},{"_id":"themes/paper/source/css/includes/_paginator.styl","hash":"1bec44f901d11e31cd865965f7ce74b3e1132efe","modified":1710333820879},{"_id":"themes/paper/source/css/includes/_posts.styl","hash":"7248f7f6ad523870e7440382b259acd04887faf5","modified":1710333820880},{"_id":"themes/paper/source/css/includes/_pre-next.styl","hash":"4a96fd48ff00329e0f22b2dbfe50f188cd4c29cf","modified":1642074942250},{"_id":"themes/paper/source/css/includes/_sidebar.styl","hash":"b37b0a57c22c348a1fbb2c9dd1ce3a8edaf43045","modified":1642074942250},{"_id":"themes/paper/source/css/includes/_switch-button.styl","hash":"a083f86e1f6998e526cf81f830b576f2bf6adab7","modified":1642074942250},{"_id":"themes/paper/source/css/includes/_toc.styl","hash":"96349c55255edb14676e0d4034612158623a3d31","modified":1642074942250},{"_id":"public/api/site.json","hash":"0073641740af8997143de8a7241f39c8edcbbbc7","modified":1710334568165},{"_id":"public/api/categories.json","hash":"6eb80e01af159220024c204086cfca0014de7e2c","modified":1710334568165},{"_id":"public/api/categories/F2E.json","hash":"f6d98920fb9a0beaab2e4cdc8a3c090676245eaf","modified":1710334568165},{"_id":"public/api/categories/docker.json","hash":"436c815af4e03886074266617dad6da3ebd610f0","modified":1710334568165},{"_id":"public/api/categories/Mac.json","hash":"cbddc89ebbca82303c059140e99722458e17cfa9","modified":1710334568165},{"_id":"public/api/categories/node.json","hash":"e5581985afe2b76c02c1b6098637621c80fc4a71","modified":1710334568165},{"_id":"public/api/categories/React.json","hash":"8f7a948d15ba9b70f9b15841a5eb77369f290b2e","modified":1710334568165},{"_id":"public/api/categories/Nodejs.json","hash":"cbdeb3e2a68de02487048985c226b79a4ccaab1a","modified":1710334568165},{"_id":"public/api/categories/ReadList.json","hash":"5276d1b1bf0130cd95d92167e8364216ec4f25b5","modified":1710334568165},{"_id":"public/api/categories/three.js.json","hash":"47bcee4a887909a9d81fbf10d8af954d30e4406b","modified":1710334568165},{"_id":"public/api/tags.json","hash":"c6e6f3e5d95d2fe15b8c803fd1fca266f8e6fd8d","modified":1710334568165},{"_id":"public/api/tags/F2E.json","hash":"da3a2d26589b49dc547d3471258a99f6fea07546","modified":1710334568165},{"_id":"public/api/tags/Mac.json","hash":"8b5941cf83b77d6d46fac41eb91321ef9abec5e2","modified":1710334568165},{"_id":"public/api/tags/iTerm.json","hash":"c7bc15f9f07e6854bcd9cd001c946162e9d37044","modified":1710334568165},{"_id":"public/api/tags/React.json","hash":"8f7a948d15ba9b70f9b15841a5eb77369f290b2e","modified":1710334568165},{"_id":"public/api/tags/Redux.json","hash":"35692b422b79daa8fd8f3569fc77120b3c0f3f44","modified":1710334568165},{"_id":"public/api/tags/Typescript.json","hash":"c443b4b9099b729a233b68d9e330450d98e4fa72","modified":1710334568165},{"_id":"public/api/tags/CheatSheet.json","hash":"ffe90ce58759c0f56abe4c68ef212b5ee1fff0dd","modified":1710334568165},{"_id":"public/api/tags/beginer.json","hash":"96a6cc6ef006485c8b6c536a34d7e6b4ddf5ed68","modified":1710334568165},{"_id":"public/api/tags/docker.json","hash":"436c815af4e03886074266617dad6da3ebd610f0","modified":1710334568165},{"_id":"public/api/tags/heox.json","hash":"62758e27ebb417fc5626ba8d5412d14857ac59a5","modified":1710334568165},{"_id":"public/api/tags/blog.json","hash":"9dadd5f7f103e383669e7ba76faa179e20c8cab0","modified":1710334568165},{"_id":"public/api/tags/node.json","hash":"e5581985afe2b76c02c1b6098637621c80fc4a71","modified":1710334568165},{"_id":"public/api/tags/Nodejs.json","hash":"cbdeb3e2a68de02487048985c226b79a4ccaab1a","modified":1710334568165},{"_id":"public/api/tags/koa.json","hash":"6eac44d3d14d7f5eed031b65c396d52775043a0a","modified":1710334568165},{"_id":"public/api/tags/前端.json","hash":"acfe289459468daefbcb113324a85ce3597bac28","modified":1710334568165},{"_id":"public/api/tags/笔记.json","hash":"c3f773302658f41ccd4d8c955e5aab9c6418e16f","modified":1710334568165},{"_id":"public/api/tags/readlist.json","hash":"dc15e4c67f6278c9f054a2592c00dc60b7cfd58d","modified":1710334568165},{"_id":"public/api/tags/readList.json","hash":"1bbc991efdc00caf556cd0db6ddfab2d5432698a","modified":1710334568165},{"_id":"public/api/tags/canvas.json","hash":"df2577896885b0edeb5cca01aa46d9403a81572f","modified":1710334568165},{"_id":"public/api/tags/three.js.json","hash":"47bcee4a887909a9d81fbf10d8af954d30e4406b","modified":1710334568165},{"_id":"public/api/tags/webGL.json","hash":"28fa5c84f4a2f05e779766a28c616905240ac0d0","modified":1710334568165},{"_id":"public/api/tags/sessionStorage.json","hash":"0d47272a2e66c6d59f4377a35b81239cbdc81d8a","modified":1710334568165},{"_id":"public/api/tags/localStorage.json","hash":"4bc8c21a0d9e1388cf65f6111aa297a2c2555f8d","modified":1710334568165},{"_id":"public/api/tags/web storage api.json","hash":"c0a144655e12cce19088a389bed7043d8d5c2ea1","modified":1710334568165},{"_id":"public/api/tags/webuploader.json","hash":"077633e04760acc88b1796e1888b3f95cc9c44b6","modified":1710334568165},{"_id":"public/api/tags/upload.json","hash":"eb4589db2be5abf58d9fc3db82f7b29d04d32824","modified":1710334568165},{"_id":"public/api/tags/f2e.json","hash":"71ede938141bbe9d9e9236d2b5f6a6c0cbe1c8b9","modified":1710334568165},{"_id":"public/api/tags/小程序.json","hash":"264b16e6c35d106cf6cb7a851972f44fd5eea0c2","modified":1710334568165},{"_id":"public/api/tags/yeoman.json","hash":"4f12d102b2b94c28bc24cd8b16ceb075eda43d75","modified":1710334568165},{"_id":"public/api/tags/kmapp.json","hash":"9c2d477a0ed9f5dfe6b70f488cb68c43a2ebe43a","modified":1710334568165},{"_id":"public/api/tags/generator.json","hash":"76e6f863aad8f2d222ed95a9df0089a4c644090b","modified":1710334568165},{"_id":"public/api/posts.json","hash":"8b6575b360b4cfc52d6c3cc378e6c591fdfe30f2","modified":1710334568165},{"_id":"public/api/articles/Mac系统配置前端开发环境.json","hash":"fc060755bb68046d664147411be97a81c001d009","modified":1710334568165},{"_id":"public/api/articles/Typescript-cheatSheet.json","hash":"3dad7be35675714c13229137dc179df21cc41e58","modified":1710334568165},{"_id":"public/api/articles/小程序.json","hash":"2ebdd9bd9175a131fa5c6bc71314635132417f21","modified":1710334568165},{"_id":"public/api/articles/readList-201608.json","hash":"d9eaabdae677cc0236594c92c08e4372ff150b77","modified":1710334568165},{"_id":"public/api/articles/React课程学习.json","hash":"dbc3a796e16d974428b0cd184e5297c9dccb5264","modified":1710334568165},{"_id":"public/api/articles/hackathon-blog.json","hash":"abcd762da5405310557e6cbc5c163bcb9edfbbf1","modified":1710334568165},{"_id":"public/api/articles/readList-2016-06-01.json","hash":"3a2097f726bdd2d2c679f5457bb9aa3a0cdb7eba","modified":1710334568165},{"_id":"public/api/articles/koa-begainer.json","hash":"13816cae365d102a980e9d918b512ae15f2c8b38","modified":1710334568165},{"_id":"public/api/articles/readList.json","hash":"22519edfe9b88788a1cc2422509bea0d378426a7","modified":1710334568165},{"_id":"public/api/articles/three-js-beginer.json","hash":"ad64e7dcd7b432183140d5924f1192600ac66f14","modified":1710334568165},{"_id":"public/api/articles/docker入门.json","hash":"b4c620251ba4f7929704ae9b67d3da3aa8758f78","modified":1710334568165},{"_id":"public/api/articles/移动端Web上传图片.json","hash":"eb508c6d8a56640806dc293830ecb6a7c970920e","modified":1710334568165},{"_id":"public/api/articles/readList-1.json","hash":"b4948a40006d1ec09d7bebb61f69035cc0f5d938","modified":1710334568165},{"_id":"public/api/articles/自定义Yeoman生成器.json","hash":"c1d4d2309a12c3ec3a5ac2b7286c737e8490a1e3","modified":1710334568165},{"_id":"public/api/articles/webuploader.json","hash":"e3bb912c0939631e4248bb71d4e0430bc05a45bd","modified":1710334568165},{"_id":"public/api/articles/web-storage-api.json","hash":"924f479fa595ec28a7ce4426dc039c641405d161","modified":1710334568165},{"_id":"public/api/articles/hello-hexo.json","hash":"0f7951cff2e6c77a889e7233991a4db7382c4840","modified":1710334568165},{"_id":"public/api/articles/hexo-theme.json","hash":"9ace51db62d2f859d198f53333091aa90074f417","modified":1710334568165},{"_id":"public/baidu_verify_aH9Bnk1gKE.html","hash":"d26b2db41b139d1c940bf57b92dd0b9c5a5349e7","modified":1710334568165},{"_id":"public/about/index.html","hash":"2b1c88a11bc7c5c6ea63258027e9ab9f12ed59de","modified":1710334568165},{"_id":"public/categories/index.html","hash":"53f31a3af2ab36a1f2488ae4306c37232a0bba49","modified":1710334568165},{"_id":"public/tags/index.html","hash":"74eb8dbc4a0df7c9f8a497b854503b86e996e2ed","modified":1710334568165},{"_id":"public/2021/08/15/Mac系统配置前端开发环境/index.html","hash":"d2160b265df806495d229c813fb3a56e22de69b7","modified":1710334568165},{"_id":"public/2018/12/31/Typescript-cheatSheet/index.html","hash":"d406ed46845f31ebe11d4040a27484b50bfb4236","modified":1710334568165},{"_id":"public/2017/01/10/小程序/index.html","hash":"2c2dd2b226e71620db82e8bd33ab1ab9fb5cd9d8","modified":1710334568165},{"_id":"public/2016/08/08/readList-201608/index.html","hash":"68f1361a01dfa85802c88a05ff2026dd854198be","modified":1710334568165},{"_id":"public/2016/07/06/React课程学习/index.html","hash":"839dd159402a04dc9def371c0f33db39e7374463","modified":1710334568165},{"_id":"public/2016/06/06/hackathon-blog/index.html","hash":"92ad04cf3cebffcb98e047cf9bbc8abdda6de944","modified":1710334568165},{"_id":"public/2016/06/02/readList-2016-06-01/index.html","hash":"dbd7daaed58919aa21879e9b369302db2d6963bd","modified":1710334568165},{"_id":"public/2016/05/10/koa-begainer/index.html","hash":"798162caddc09fb25dc1d58ddda5e4eaaa96400c","modified":1710334568165},{"_id":"public/2016/05/06/readList/index.html","hash":"7a9eb10de41ecd5ab091b6a10b1e52944177e516","modified":1710334568165},{"_id":"public/2016/04/28/three-js-beginer/index.html","hash":"6f97d588c12c5f18f6eaccb3cce177bd9542aea3","modified":1710334568165},{"_id":"public/2016/04/25/docker入门/index.html","hash":"43f16b98f6fcc6c928b3c88174b84f2ea4c6e99f","modified":1710334568165},{"_id":"public/2016/04/06/移动端Web上传图片/index.html","hash":"c8a337af388696d88f74a465ad65a5d3d021306a","modified":1710334568165},{"_id":"public/2016/04/05/readList-1/index.html","hash":"91023267b2cd139e70f134ada7ff82c2a5368da6","modified":1710334568165},{"_id":"public/2016/04/03/自定义Yeoman生成器/index.html","hash":"071c13d2e9edaa8cb5b970ea8417e40d262cc1bd","modified":1710334568165},{"_id":"public/2016/03/25/webuploader/index.html","hash":"dd66cf84c0169281f4208a9cfb20642ad763245e","modified":1710334568165},{"_id":"public/2016/02/24/web-storage-api/index.html","hash":"81a952477f80a57d27af8fde82a087e9fb8efb94","modified":1710334568165},{"_id":"public/2016/02/17/hello-hexo/index.html","hash":"de7b4ca523343f783f3fb580ba001604bc87ff0f","modified":1710334568165},{"_id":"public/2016/02/17/hexo-theme/index.html","hash":"6b77bddf8865108a4b68a4cbe851c9d519e10186","modified":1710334568165},{"_id":"public/archives/index.html","hash":"819bb0e546662bdc17ff02b026ddcb5e5ba41e05","modified":1710334568165},{"_id":"public/archives/page/2/index.html","hash":"b5e044a0070bf01bd97be4874d44ffc4872cd0a5","modified":1710334568165},{"_id":"public/archives/2016/index.html","hash":"95554a3e3d1e4cafbecc90ecdf2aacc5050078b6","modified":1710334568165},{"_id":"public/archives/2016/page/2/index.html","hash":"0d3da31d79dd8b7f07d532cd66a301220084b105","modified":1710334568165},{"_id":"public/archives/2016/02/index.html","hash":"3815d2ca0937f81d614815e881f60c0127d4a79f","modified":1710334568165},{"_id":"public/archives/2016/03/index.html","hash":"04cf0e9da528e5c0018dc37df203b265b0f0ca7d","modified":1710334568165},{"_id":"public/archives/2016/04/index.html","hash":"aed2cef785794756b934bf413912a174539f971e","modified":1710334568165},{"_id":"public/archives/2016/05/index.html","hash":"c6da8adf4ed4ed45632f115a883feadc6f36c77a","modified":1710334568165},{"_id":"public/archives/2016/06/index.html","hash":"61141b2f050c97c21a63e9a0e874fee07806441a","modified":1710334568165},{"_id":"public/archives/2016/07/index.html","hash":"fec2b49988a7b693c99b174d6531e34513bc00fc","modified":1710334568165},{"_id":"public/archives/2016/08/index.html","hash":"2fa6fcf7887a8e094c196b42ce964163c3d09722","modified":1710334568165},{"_id":"public/archives/2017/index.html","hash":"3d1f36d536d78b6c27cc37acb82dbfbbf8dc9e0a","modified":1710334568165},{"_id":"public/archives/2017/01/index.html","hash":"f32b8f89967da00a9a15b342e85fb6589c87152c","modified":1710334568165},{"_id":"public/archives/2018/index.html","hash":"f72eb8a8bb22a83edda4aa7a61652feb6cd41954","modified":1710334568165},{"_id":"public/archives/2018/12/index.html","hash":"dad10b1a9d46272c8cfae373e2eab6764695df5c","modified":1710334568165},{"_id":"public/archives/2021/index.html","hash":"cdd3a4b5b6a5a2ba9203d0b2fbcd94b0bb663806","modified":1710334568165},{"_id":"public/archives/2021/08/index.html","hash":"6524d1420ea7e4faa5ff4e2cbd022fbba1483f7e","modified":1710334568165},{"_id":"public/categories/F2E/index.html","hash":"946086a6d4dc48163b74ce964bd83e646dfce404","modified":1710334568165},{"_id":"public/categories/docker/index.html","hash":"e8320bd170b7c42a48e5275243f1113f6761f9ec","modified":1710334568165},{"_id":"public/categories/F2E/Mac/index.html","hash":"8916c83addd3a867c5f45e7d3c0cbed345bdae3d","modified":1710334568165},{"_id":"public/categories/node/index.html","hash":"b45160db55b0ba8d27e7f6ad468e69f746a2933d","modified":1710334568165},{"_id":"public/categories/F2E/React/index.html","hash":"6feffd014489ae74433d6cb0e09aec39d6e5fa13","modified":1710334568165},{"_id":"public/categories/Nodejs/index.html","hash":"b246c603aefed960b9096be2dac62ecc29e4e796","modified":1710334568165},{"_id":"public/categories/ReadList/index.html","hash":"7e4a2e9ecd5107c7caec262948df20ab206fcf32","modified":1710334568165},{"_id":"public/categories/F2E/three-js/index.html","hash":"5aecee2d4c2bdfe74cd1ba56158377dad254db38","modified":1710334568165},{"_id":"public/index.html","hash":"ab2e0d3e8a887c6efa714a73d059346f008d0aa3","modified":1710334568165},{"_id":"public/page/2/index.html","hash":"a47b66680c267ced3ea2b57f34ca5121e9c23c11","modified":1710334568165},{"_id":"public/tags/F2E/index.html","hash":"171896134960246da210b488ee3c31d946dc6587","modified":1710334568165},{"_id":"public/tags/Mac/index.html","hash":"a786572e472c7928b7bb37bb2c091e43ec21231d","modified":1710334568165},{"_id":"public/tags/iTerm/index.html","hash":"d2651028b0fc88c5a52afe1e0d3b8f7fd7baee34","modified":1710334568165},{"_id":"public/tags/React/index.html","hash":"ab1b4304cbbce280bb37d307c76d54e68a02b7a7","modified":1710334568165},{"_id":"public/tags/Redux/index.html","hash":"08ec52090ffb4cfcfc8ee33e666514c19a54daf4","modified":1710334568165},{"_id":"public/tags/Typescript/index.html","hash":"740d1bcc09f912fe3f50d695ecc52912836a03d8","modified":1710334568165},{"_id":"public/tags/CheatSheet/index.html","hash":"2d1fbfea1183e6f9d57a8805078c85b7ce4d83b0","modified":1710334568165},{"_id":"public/tags/beginer/index.html","hash":"520810a9baab747ed7c7d85f53f7bae2dcf42abb","modified":1710334568165},{"_id":"public/tags/docker/index.html","hash":"706b3943be0bd58d67090db7886bd8d5c043673d","modified":1710334568165},{"_id":"public/tags/heox/index.html","hash":"f0721da63d0ace3b7cb90733dd893aa539d839ff","modified":1710334568165},{"_id":"public/tags/blog/index.html","hash":"385fccd3d25c8fd1f2dd8397d77677792e0ab5df","modified":1710334568165},{"_id":"public/tags/node/index.html","hash":"75606b4eda1714cc1e8b47b2064f0ce7ef3b7d0a","modified":1710334568165},{"_id":"public/tags/Nodejs/index.html","hash":"1c5fc7b48af5c37a06d823ee5faee115bc584001","modified":1710334568165},{"_id":"public/tags/koa/index.html","hash":"5bec491ba6868a6c92450be745327d2d61151992","modified":1710334568165},{"_id":"public/tags/前端/index.html","hash":"ae5afffa8bd8921681dff1913636dc0d026b2de0","modified":1710334568165},{"_id":"public/tags/笔记/index.html","hash":"f8c3a0b62a66b935ab85afb40bac63e5a84dadfa","modified":1710334568165},{"_id":"public/tags/readlist/index.html","hash":"70e6eb39f6796d128bbff8f4f8cdf8de757d6412","modified":1710334568165},{"_id":"public/tags/readList/index.html","hash":"8420af7ffd0ab996344000ca0a42a1f50c433f32","modified":1710334568165},{"_id":"public/tags/canvas/index.html","hash":"88fa635e296c11433291ab318596210ce31cce5e","modified":1710334568165},{"_id":"public/tags/three-js/index.html","hash":"d68a9a250a34345c4c5a018affcde67707327470","modified":1710334568165},{"_id":"public/tags/webGL/index.html","hash":"51170c4b8526dc255c309bae9ec30072e6b67f69","modified":1710334568165},{"_id":"public/tags/sessionStorage/index.html","hash":"4dab8d5cf2c952ec9baf399c2fab48270295167f","modified":1710334568165},{"_id":"public/tags/localStorage/index.html","hash":"1e043b5caeec56740d28c70bc64fb6a836cb95fc","modified":1710334568165},{"_id":"public/tags/web-storage-api/index.html","hash":"e3bc56f6768717176dd3bf6d4a91fe03447d0b7f","modified":1710334568165},{"_id":"public/tags/webuploader/index.html","hash":"8b6e827571b7e2689f9a6bf57172ca7442fe509c","modified":1710334568165},{"_id":"public/tags/upload/index.html","hash":"af01380237188a4033abdd1eefbfa8f6a7685118","modified":1710334568165},{"_id":"public/tags/f2e/index.html","hash":"4ec346d20f78505bbc7c6a62cffb408dd3372556","modified":1710334568165},{"_id":"public/tags/小程序/index.html","hash":"073fe51b7fb70760502b5ac15fef5be27e0b09e2","modified":1710334568165},{"_id":"public/tags/yeoman/index.html","hash":"a14a62bbbd7112c79cc5e3224c1e3973ed6aac0e","modified":1710334568165},{"_id":"public/tags/kmapp/index.html","hash":"f8827d94c0b73b784f3e6f68ffcda3270f6f23f5","modified":1710334568165},{"_id":"public/tags/generator/index.html","hash":"bfc33335508ca021354ed696d0958104bf077ac5","modified":1710334568165},{"_id":"public/CNAME","hash":"d5ab1cad2c9d792ed875ec195e606dd56380203a","modified":1710334568165},{"_id":"public/img/QQ截图20160403180630.jpg","hash":"b60cf7c50813901ac8305c8c5df9254f4deb1254","modified":1710334568165},{"_id":"public/img/QQ截图20160301204728.jpg","hash":"3d9b3a6c729011896e403249c940590b01aefa8a","modified":1710334568165},{"_id":"public/img/QQ截图20160613193005.jpg","hash":"2ab6b5534edf1b6b61ec1e86e6436d4e56853f1b","modified":1710334568165},{"_id":"public/img/icon-left-arrow.svg","hash":"93c0204c35016e3f3bf57f87e8e66971d81ab424","modified":1710334568165},{"_id":"public/img/su-logo.png","hash":"e09f43b38d7b6bda6a3663bda5debedad3649f83","modified":1710334568165},{"_id":"public/favicon.ico","hash":"552dfc7e99c6593c62f5c39938dadc747c0fb02f","modified":1710334568165},{"_id":"public/img/icon-menu-sprite.svg","hash":"7dd7b0d5b0e85b7a20db33e42ff46403d575189c","modified":1710334568165},{"_id":"public/css/font.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710334568165},{"_id":"public/css/post.css","hash":"af25fee823b18b29501adc84820ca31754083326","modified":1710334568165},{"_id":"public/css/reset.css","hash":"b3c24e60fa480d758d29667bb6d16de00f7ccb2f","modified":1710334568165},{"_id":"public/css/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1710334568165},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710334568165},{"_id":"public/js/paper.js","hash":"9ae92bb48faacf4e70435efa0803e580bc7eba12","modified":1710334568165},{"_id":"public/js/tocbot.js","hash":"fd53a8f0f47435a17ac2398a2c519cf9ff6a033c","modified":1710334568165},{"_id":"public/css/index.css","hash":"8add034879bf74d6d64c649234186d63c9420bf8","modified":1710334568165},{"_id":"source/.DS_Store","hash":"f2871506c87f142e946b77358f0668a2bb4d9e26","modified":1657524281436},{"_id":"source/_posts/MacBook_Pro_2015硬盘扩容升级.md","hash":"7d5f1428859a251796f85fd8f13575ae0929e612","modified":1657446109000},{"_id":"public/api/articles/MacBook_Pro_2015硬盘扩容升级.json","hash":"51854dc0e6e7149d9f639325d833c1171de75c0e","modified":1657524385537},{"_id":"public/2022/07/10/MacBook_Pro_2015硬盘扩容升级/index.html","hash":"a78b49f4ffe4d835f14606c768579430339fd795","modified":1657524385537},{"_id":"public/archives/2022/index.html","hash":"2fb4d3869761e31e75ed5a785d59022f6218cbdd","modified":1710334568165},{"_id":"public/archives/2022/07/index.html","hash":"662506e79c607e2d2ae0ebe0f88507823b8923b2","modified":1710334568165},{"_id":"source/_posts/.DS_Store","hash":"e24bd16975679f5c547957538847abbaabcda7a7","modified":1657532062832},{"_id":"source/_posts/MacBook-Pro-2015硬盘扩容升级.md","hash":"7d5f1428859a251796f85fd8f13575ae0929e612","modified":1657446109000},{"_id":"public/api/articles/MacBook-Pro-2015硬盘扩容升级.json","hash":"713520cdc08d3806c0f1d16abf48609283ab6432","modified":1710334568165},{"_id":"public/2022/07/10/MacBook-Pro-2015硬盘扩容升级/index.html","hash":"e041c3d9b9621686886f3feee623560c95100464","modified":1710334568165},{"_id":"source/_posts/极速ChatGPT-API的接入指南.md","hash":"5bf797a34746528d687954e38a5750bba73e0c65","modified":1678784150606},{"_id":"public/api/articles/极速ChatGPT-API的接入指南.json","hash":"02c1521e632e917d8ad4e3b280f194f402677c61","modified":1710334568165},{"_id":"public/2023/03/14/极速ChatGPT-API的接入指南/index.html","hash":"05f4538f783afd018c02ad598ad9b77292bc17b0","modified":1710334568165},{"_id":"public/archives/2023/index.html","hash":"540197035ff16880931c8e9f1c7554729a957d42","modified":1710334568165},{"_id":"public/archives/2023/03/index.html","hash":"d7cb070c795a5257557682524154c9fd8825e10f","modified":1710334568165},{"_id":"themes/paper/layout/includes/comments.pug","hash":"543b148b264130dde3ffc53f427494b784f23c34","modified":1710333820876},{"_id":"themes/paper/layout/includes/scripts/valine-comment.pug","hash":"6ef962959918a623d5376866a129592c5d352e7f","modified":1710333820878},{"_id":"themes/paper/layout/includes/scripts/utterances-comment.pug","hash":"ec0989703dba735353ea94639a37aef0db9be143","modified":1710333820878},{"_id":"themes/paper/layout/includes/scripts/google-adsense-script.pug","hash":"66e10e4fe7b385880398ed23ad10547362c03114","modified":1710334385715},{"_id":"public/baidusitemap.xml","hash":"f7c3e92f6b5c697b1dc8946d1239677cce709320","modified":1710334568165},{"_id":"public/atom.xml","hash":"c47c06b950a7c82c207b605b4513e55c6d2f7999","modified":1710334568165},{"_id":"public/content.json","hash":"8923382179da18baa9bd84de3fed7eb1a9c48a53","modified":1710334568165},{"_id":"public/api/posts/1.json","hash":"8b6575b360b4cfc52d6c3cc378e6c591fdfe30f2","modified":1710334568165},{"_id":"public/api/posts/2.json","hash":"9593ffda0c6c3644fc677776773ecbe12fb69e40","modified":1710334568165},{"_id":"public/sitemap.xml","hash":"e2e82c8ae73c3b53320081d75a06ca5726f4c870","modified":1710334568165}],"Category":[{"name":"F2E","_id":"ckymlwo0i00047uo00hcp4vix"},{"name":"docker","_id":"ckymlwo0y000j7uo0bfflhozt"},{"name":"Mac","parent":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo12000p7uo05eda3zbr"},{"name":"node","_id":"ckymlwo15000w7uo028gd9fzr"},{"name":"React","parent":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1800117uo0539c8nqu"},{"name":"Nodejs","_id":"ckymlwo1e001f7uo0bbhnh9ba"},{"name":"ReadList","_id":"ckymlwo1i001j7uo0amldge5h"},{"name":"three.js","parent":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1o00227uo030tl5eza"}],"Data":[],"Page":[{"_content":"aH9Bnk1gKE","source":"baidu_verify_aH9Bnk1gKE.html","raw":"aH9Bnk1gKE","date":"2022-01-20T04:12:09.030Z","updated":"2022-01-20T04:12:09.030Z","path":"baidu_verify_aH9Bnk1gKE.html","title":"","comments":1,"layout":"page","_id":"ckymlwo0700007uo0dcc8b3al","content":"aH9Bnk1gKE","site":{"data":{}},"excerpt":"","more":"aH9Bnk1gKE"},{"title":"关于Kevin.Su","date":"2022-01-20T04:12:09.029Z","top":1,"tags":null,"categories":null,"_content":"\n<!-- more -->\n","source":"about/index.md","raw":"---\ntitle: '关于Kevin.Su'\ndate: { { date } }\ntop: 1\ntags:\ncategories:\n---\n\n<!-- more -->\n","updated":"2022-01-20T04:12:09.029Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckymlwo0f00027uo01w7b9n0c","content":"<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2022-01-20T04:12:09.030Z","top":1,"tags":null,"categories":null,"layout":"categories","comments":0,"_content":"\n<!-- more -->\n","source":"categories/index.md","raw":"---\ntitle: \"文章分类\"\ndate: { { date } }\ntop: 1\ntags:\ncategories:\nlayout: categories\ncomments: false\n---\n\n<!-- more -->\n","updated":"2022-01-20T04:12:09.030Z","path":"categories/index.html","_id":"ckymlwo0k00067uo0g5847ki7","content":"<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"","more":""},{"title":"文章标签","date":"2016-02-24T02:14:47.000Z","tags":null,"categories":null,"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \"文章标签\"\ndate: 2016-02-24 10:14:47\ntags:\ncategories:\nlayout: tags\ncomments: false\n---\n","updated":"2022-01-20T04:12:09.032Z","path":"tags/index.html","_id":"ckymlwo0m00087uo0b17r9gzz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Mac系统配置前端开发环境","date":"2021-08-15T15:01:00.000Z","top":1,"_content":"\n二手的顶配 Mac Pro 垃圾桶到货了，新系统从零开始配置开发环境，包括终端软件改为 iTerm2，bash 改为 zsh, 并且安装 oh-my-zsh\n\n<!-- more -->\n\n### 必备软件\n\n1. [uTools](https://u.tools) Alfred 替代品，跨系统，Linux Mac Windows 都可以，中国人写的，插件也很实用\n\n   软件免费，插件免费，跨平台同步配置是首付的，很良心了\n\n   常用的 插件\n\n   vscode ：查找 vscode 项目历史，直接通过 vscode 打开 项目\n\n   Tinypng: 直接压缩图片并可以替换原有的文件\n\n2. [iTerm2 + Oh My Zsh](https://juejin.cn/post/6844904178075058189)\n\n   开发 50%以上的时间和终端打交道的，弄个高颜值好用的终端还是第一需求的\n\n   下载 iTerm 软件安装，配置 oh-my-zsh ，设置 iterm 软件的 sh 默认为 zsh，设置 zsh 的 theme 皮肤，和 iTerm 中 字符集\n\n   安装 Homebrew，这样安装软件时候直接 命令行 `brew install`\n\n3. Git 的配置\n\n   `ssh-keygen` 生产公钥秘钥，配置公钥到 git 线上服务上（github，gitee，gitlab)\n\n   不同 git 服务器下载自动设置不同的用户名和邮箱 : [利用 Git-hook 自动配置不同仓库的用户信息](https://segmentfault.com/a/1190000013727784)\n\n4. [vscode](https://code.visualstudio.com/)\n\n   直接下载安装了，安装插件 [Settings Sync](https://github.com/shanalikhan/code-settings-sync.git) 添加 Gist 同步不同电脑上的 vscode 配置\n\n5. [nvm](https://github.com/nvm-sh/nvm) nodejs 版本管理工具，前端开发离不开的\n\n   安装起那么开发环境 `brew install nvm`\n\n   npm 配置下载源 registry `npm config set registry https://registry.npm.taobao.org`\n\n6. [Spectacle](https://www.spectacleapp.com/) 的出现让调整窗口，分屏变得与 windows 一样简单\n\n   多窗口管理工具，常用 commond + option + 左右方向键，让当前窗口占据屏幕的左右一半屏幕\n\n7. [MAC Command 键与 Control 键调换方案](https://www.jianshu.com/p/40b71d939a05) **推荐**\n\n   试了半天，我很特殊电脑上是 command 的 option 进行了互调，笔记本电脑上用习惯了，现在调成一样的\n\n   以前从 windows 系统转过来的是很不习惯，外接键盘鼠标分别进行了设置，触摸板和鼠标又区别进行设置\n\n   > window 上使用的一套罗技的鼠标和键盘，之间把 usb 发射器插入 Mac 来切换输入设备，Mac 下的默认键盘映射有点 Mac 笔记本自带的布局不一样的。通过如下设置：\n   >\n   > 1. _键盘_ “系统偏好设置”—“键盘”—“修饰键” 将键盘上的 Windows 映射成 option 键，alt 键映射成苹果键\n   > 2. 鼠标 “系统偏好设置”—“鼠标”—“滚动方向：自然” 勾选取掉，这样就和 window 下一样自然使用鼠标了\n   >\n   > 鼠标设置优点烦恼：用 Mac 笔记本的时候触摸板的上下方向又反了，用外交设备的时候只能用外接设备，用笔记本的时候用要再改变回来，`2017.12.12` 更新： [SCROLL REVERSER](https://pilotmoon.com/scrollreverser/) 解决了这个问题\n\n### 选装软件\n\n1. [Typora](https://typora.io/) Markdown 写作工具\n\n   > 以前用过马克飞象觉得快捷键挺好用的，不过这款 App 直接所见即所得模式，一会查询下相关的快捷键，更喜欢的还有 theme 的选择，默认竟然是 GitHub 的\n\n2. [Vanilla](https://matthewpalmer.net/vanilla/)\n\n   > Hide menu bar icons on your Mac\n\n   Mac 工具栏 icons 管理工具，可以选择那些软件 icon 隐藏和展示\n\n3. [坚果云](https://www.jianguoyun.com/) 不同机器间同步文件用的，免费用户有流量限制，平时同步文档用，已经保存软件安装包用\n\n4. [Itsycal](https://www.mowglii.com/itsycal/) 好用的通知栏日历软件\n\n5. [fliqlo](https://fliqlo.com/) 屏保工具\n\n6. [RescueTime](https://www.rescuetime.com) 时间记录工具\n\n   记录每个软件上使用时间，早在 Mac 系统的屏幕使用时间功能，并且可以 web 查看统计表格\n\n7. [番茄土豆](https://pomotodo.com/intl/zh-CN/) 时间管理工具\n\n8. [wakatime](https://wakatime.com/) 有 vscode 插件，可以统计每个项目上的使用时间\n\n### 参考资料\n\n1. [如何大幅度提高 Mac 开发效率](https://github.com/bestswifter/blog/blob/master/articles/efficient-mac.md)\n\n2. [Mac 键盘快捷键](https://support.apple.com/zh-cn/HT201236)\n\n3. [macbootstrap](https://github.com/bestswifter/macbootstrap) A bootstrap script for new Mac\n\n   > 对新 mac 设置脚步，不用在搜索教程一步步的设置啦，一行命令搞定，并且详细讲解了设置的细节\n\n4. [macOS 有哪些冷门但是一但发现就无法自拔的软件？](https://www.zhihu.com/question/35050387)\n\n   [Itsycal](https://www.mowglii.com/itsycal/) 好用的通知栏日历软件\n\n   [PDF Expert](https://macwk.com/soft/pdf-expert) PDF 工具\n\n   [fliqlo](https://fliqlo.com/) 屏保工具\n\n   [ScreenToLayers](https://neededapps.com/screentolayers/) 屏幕截图保存为 PSD\n\n   [iPack](https://macwk.com/soft/ipack) 解压缩软件，不用压缩 mac 特有的文件\n\n   [Hammerspoon](http://www.hammerspoon.org/) lua 脚步定制自动化工具\n\n   可以自己看找自己需要的软件\n\n### 顶配的 Mac Pro 配置\n\n1. [Mac Pro（2013 年末) - 技术规格](https://support.apple.com/kb/SP697?locale=zh_CN)\n\n   收到自己的二手顶配 Mac Pro 了 128G 内存，1T M2 硬盘，双 D7 6G 显卡\n\n   处理器查了下 ： [英特尔 ® 至强 ® 处理器 E5-2697 v2](https://ark.intel.com/content/www/cn/zh/ark/products/75283/intel-xeon-processor-e5-2697-v2-30m-cache-2-70-ghz.html)\n\n   疑惑的是内存明明是 1866Mhz 的 32G 内存条，系统要降到 1066Mhz 区使用，网上说是为了散热设置的，回去拆下两个内存条来看下 能不能提升 到 1866Mzh，看文章：[DDR3 内存带宽计算](http://blog.chinaunix.net/uid-14214482-id-3220464.html) 这样读写速度带宽就能提升 ，不过 CPU 中限制了 `最大内存带宽59.7 GB/s`\n\n   > 测试了拆下 2 个 32G 内存条，标准的 1066mHz，没法升高到 1866 Hz，感觉还是 128 内存安装在上面吧\n\n   硬盘感觉也要高了，现在监测的 写 1400M，读 1800M，当时让卖家加的：[三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 970 EVO Plus（MZ-V7S1T0B）](https://item.jd.com/100002183461.html) ，R 3500M，W 3300M。感觉也就一半的性能用到了，后面其他机器用到了，可以换下来！\n\n   替换： [雷克沙（Lexar）NM610 1TB M.2 NVMe SSD 固态硬盘 PCle3.0 四通道(NM610-1TB)](https://item.jd.com/100005185781.html) 599 价格\n\n   多花了 1 倍的价格\n\n2. [ 这个 Mac Pro 垃圾桶值得入手吗](https://www.feng.com/post/12981301)\n\n   哈哈，讨论了一周，[还是看数据性能](https://browser.geekbench.com/macs/mac-pro-late-2013-intel-xeon-e5-2697-v2-2-7-ghz-12-cores)，感觉 还是 m1 芯片的 mac mini 性能高，比较各种硬件的标准 7 年提审了很多，5 纳米的制造工艺也是很有优势的\n","source":"_posts/Mac系统配置前端开发环境.md","raw":"---\ntitle: Mac系统配置前端开发环境\ndate: 2021-08-15 23:01:00\ntop: 1\ntags: [F2E, Mac, iTerm]\ncategories: [F2E, Mac]\n---\n\n二手的顶配 Mac Pro 垃圾桶到货了，新系统从零开始配置开发环境，包括终端软件改为 iTerm2，bash 改为 zsh, 并且安装 oh-my-zsh\n\n<!-- more -->\n\n### 必备软件\n\n1. [uTools](https://u.tools) Alfred 替代品，跨系统，Linux Mac Windows 都可以，中国人写的，插件也很实用\n\n   软件免费，插件免费，跨平台同步配置是首付的，很良心了\n\n   常用的 插件\n\n   vscode ：查找 vscode 项目历史，直接通过 vscode 打开 项目\n\n   Tinypng: 直接压缩图片并可以替换原有的文件\n\n2. [iTerm2 + Oh My Zsh](https://juejin.cn/post/6844904178075058189)\n\n   开发 50%以上的时间和终端打交道的，弄个高颜值好用的终端还是第一需求的\n\n   下载 iTerm 软件安装，配置 oh-my-zsh ，设置 iterm 软件的 sh 默认为 zsh，设置 zsh 的 theme 皮肤，和 iTerm 中 字符集\n\n   安装 Homebrew，这样安装软件时候直接 命令行 `brew install`\n\n3. Git 的配置\n\n   `ssh-keygen` 生产公钥秘钥，配置公钥到 git 线上服务上（github，gitee，gitlab)\n\n   不同 git 服务器下载自动设置不同的用户名和邮箱 : [利用 Git-hook 自动配置不同仓库的用户信息](https://segmentfault.com/a/1190000013727784)\n\n4. [vscode](https://code.visualstudio.com/)\n\n   直接下载安装了，安装插件 [Settings Sync](https://github.com/shanalikhan/code-settings-sync.git) 添加 Gist 同步不同电脑上的 vscode 配置\n\n5. [nvm](https://github.com/nvm-sh/nvm) nodejs 版本管理工具，前端开发离不开的\n\n   安装起那么开发环境 `brew install nvm`\n\n   npm 配置下载源 registry `npm config set registry https://registry.npm.taobao.org`\n\n6. [Spectacle](https://www.spectacleapp.com/) 的出现让调整窗口，分屏变得与 windows 一样简单\n\n   多窗口管理工具，常用 commond + option + 左右方向键，让当前窗口占据屏幕的左右一半屏幕\n\n7. [MAC Command 键与 Control 键调换方案](https://www.jianshu.com/p/40b71d939a05) **推荐**\n\n   试了半天，我很特殊电脑上是 command 的 option 进行了互调，笔记本电脑上用习惯了，现在调成一样的\n\n   以前从 windows 系统转过来的是很不习惯，外接键盘鼠标分别进行了设置，触摸板和鼠标又区别进行设置\n\n   > window 上使用的一套罗技的鼠标和键盘，之间把 usb 发射器插入 Mac 来切换输入设备，Mac 下的默认键盘映射有点 Mac 笔记本自带的布局不一样的。通过如下设置：\n   >\n   > 1. _键盘_ “系统偏好设置”—“键盘”—“修饰键” 将键盘上的 Windows 映射成 option 键，alt 键映射成苹果键\n   > 2. 鼠标 “系统偏好设置”—“鼠标”—“滚动方向：自然” 勾选取掉，这样就和 window 下一样自然使用鼠标了\n   >\n   > 鼠标设置优点烦恼：用 Mac 笔记本的时候触摸板的上下方向又反了，用外交设备的时候只能用外接设备，用笔记本的时候用要再改变回来，`2017.12.12` 更新： [SCROLL REVERSER](https://pilotmoon.com/scrollreverser/) 解决了这个问题\n\n### 选装软件\n\n1. [Typora](https://typora.io/) Markdown 写作工具\n\n   > 以前用过马克飞象觉得快捷键挺好用的，不过这款 App 直接所见即所得模式，一会查询下相关的快捷键，更喜欢的还有 theme 的选择，默认竟然是 GitHub 的\n\n2. [Vanilla](https://matthewpalmer.net/vanilla/)\n\n   > Hide menu bar icons on your Mac\n\n   Mac 工具栏 icons 管理工具，可以选择那些软件 icon 隐藏和展示\n\n3. [坚果云](https://www.jianguoyun.com/) 不同机器间同步文件用的，免费用户有流量限制，平时同步文档用，已经保存软件安装包用\n\n4. [Itsycal](https://www.mowglii.com/itsycal/) 好用的通知栏日历软件\n\n5. [fliqlo](https://fliqlo.com/) 屏保工具\n\n6. [RescueTime](https://www.rescuetime.com) 时间记录工具\n\n   记录每个软件上使用时间，早在 Mac 系统的屏幕使用时间功能，并且可以 web 查看统计表格\n\n7. [番茄土豆](https://pomotodo.com/intl/zh-CN/) 时间管理工具\n\n8. [wakatime](https://wakatime.com/) 有 vscode 插件，可以统计每个项目上的使用时间\n\n### 参考资料\n\n1. [如何大幅度提高 Mac 开发效率](https://github.com/bestswifter/blog/blob/master/articles/efficient-mac.md)\n\n2. [Mac 键盘快捷键](https://support.apple.com/zh-cn/HT201236)\n\n3. [macbootstrap](https://github.com/bestswifter/macbootstrap) A bootstrap script for new Mac\n\n   > 对新 mac 设置脚步，不用在搜索教程一步步的设置啦，一行命令搞定，并且详细讲解了设置的细节\n\n4. [macOS 有哪些冷门但是一但发现就无法自拔的软件？](https://www.zhihu.com/question/35050387)\n\n   [Itsycal](https://www.mowglii.com/itsycal/) 好用的通知栏日历软件\n\n   [PDF Expert](https://macwk.com/soft/pdf-expert) PDF 工具\n\n   [fliqlo](https://fliqlo.com/) 屏保工具\n\n   [ScreenToLayers](https://neededapps.com/screentolayers/) 屏幕截图保存为 PSD\n\n   [iPack](https://macwk.com/soft/ipack) 解压缩软件，不用压缩 mac 特有的文件\n\n   [Hammerspoon](http://www.hammerspoon.org/) lua 脚步定制自动化工具\n\n   可以自己看找自己需要的软件\n\n### 顶配的 Mac Pro 配置\n\n1. [Mac Pro（2013 年末) - 技术规格](https://support.apple.com/kb/SP697?locale=zh_CN)\n\n   收到自己的二手顶配 Mac Pro 了 128G 内存，1T M2 硬盘，双 D7 6G 显卡\n\n   处理器查了下 ： [英特尔 ® 至强 ® 处理器 E5-2697 v2](https://ark.intel.com/content/www/cn/zh/ark/products/75283/intel-xeon-processor-e5-2697-v2-30m-cache-2-70-ghz.html)\n\n   疑惑的是内存明明是 1866Mhz 的 32G 内存条，系统要降到 1066Mhz 区使用，网上说是为了散热设置的，回去拆下两个内存条来看下 能不能提升 到 1866Mzh，看文章：[DDR3 内存带宽计算](http://blog.chinaunix.net/uid-14214482-id-3220464.html) 这样读写速度带宽就能提升 ，不过 CPU 中限制了 `最大内存带宽59.7 GB/s`\n\n   > 测试了拆下 2 个 32G 内存条，标准的 1066mHz，没法升高到 1866 Hz，感觉还是 128 内存安装在上面吧\n\n   硬盘感觉也要高了，现在监测的 写 1400M，读 1800M，当时让卖家加的：[三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 970 EVO Plus（MZ-V7S1T0B）](https://item.jd.com/100002183461.html) ，R 3500M，W 3300M。感觉也就一半的性能用到了，后面其他机器用到了，可以换下来！\n\n   替换： [雷克沙（Lexar）NM610 1TB M.2 NVMe SSD 固态硬盘 PCle3.0 四通道(NM610-1TB)](https://item.jd.com/100005185781.html) 599 价格\n\n   多花了 1 倍的价格\n\n2. [ 这个 Mac Pro 垃圾桶值得入手吗](https://www.feng.com/post/12981301)\n\n   哈哈，讨论了一周，[还是看数据性能](https://browser.geekbench.com/macs/mac-pro-late-2013-intel-xeon-e5-2697-v2-2-7-ghz-12-cores)，感觉 还是 m1 芯片的 mac mini 性能高，比较各种硬件的标准 7 年提审了很多，5 纳米的制造工艺也是很有优势的\n","slug":"Mac系统配置前端开发环境","published":1,"updated":"2022-01-20T04:12:09.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0b00017uo040q9ayie","content":"<p>二手的顶配 Mac Pro 垃圾桶到货了，新系统从零开始配置开发环境，包括终端软件改为 iTerm2，bash 改为 zsh, 并且安装 oh-my-zsh</p>\n<span id=\"more\"></span>\n\n<h3 id=\"必备软件\"><a href=\"#必备软件\" class=\"headerlink\" title=\"必备软件\"></a>必备软件</h3><ol>\n<li><p><a href=\"https://u.tools/\">uTools</a> Alfred 替代品，跨系统，Linux Mac Windows 都可以，中国人写的，插件也很实用</p>\n<p>软件免费，插件免费，跨平台同步配置是首付的，很良心了</p>\n<p>常用的 插件</p>\n<p>vscode ：查找 vscode 项目历史，直接通过 vscode 打开 项目</p>\n<p>Tinypng: 直接压缩图片并可以替换原有的文件</p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844904178075058189\">iTerm2 + Oh My Zsh</a></p>\n<p>开发 50%以上的时间和终端打交道的，弄个高颜值好用的终端还是第一需求的</p>\n<p>下载 iTerm 软件安装，配置 oh-my-zsh ，设置 iterm 软件的 sh 默认为 zsh，设置 zsh 的 theme 皮肤，和 iTerm 中 字符集</p>\n<p>安装 Homebrew，这样安装软件时候直接 命令行 <code>brew install</code></p>\n</li>\n<li><p>Git 的配置</p>\n<p><code>ssh-keygen</code> 生产公钥秘钥，配置公钥到 git 线上服务上（github，gitee，gitlab)</p>\n<p>不同 git 服务器下载自动设置不同的用户名和邮箱 : <a href=\"https://segmentfault.com/a/1190000013727784\">利用 Git-hook 自动配置不同仓库的用户信息</a></p>\n</li>\n<li><p><a href=\"https://code.visualstudio.com/\">vscode</a></p>\n<p>直接下载安装了，安装插件 <a href=\"https://github.com/shanalikhan/code-settings-sync.git\">Settings Sync</a> 添加 Gist 同步不同电脑上的 vscode 配置</p>\n</li>\n<li><p><a href=\"https://github.com/nvm-sh/nvm\">nvm</a> nodejs 版本管理工具，前端开发离不开的</p>\n<p>安装起那么开发环境 <code>brew install nvm</code></p>\n<p>npm 配置下载源 registry <code>npm config set registry https://registry.npm.taobao.org</code></p>\n</li>\n<li><p><a href=\"https://www.spectacleapp.com/\">Spectacle</a> 的出现让调整窗口，分屏变得与 windows 一样简单</p>\n<p>多窗口管理工具，常用 commond + option + 左右方向键，让当前窗口占据屏幕的左右一半屏幕</p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/40b71d939a05\">MAC Command 键与 Control 键调换方案</a> <strong>推荐</strong></p>\n<p>试了半天，我很特殊电脑上是 command 的 option 进行了互调，笔记本电脑上用习惯了，现在调成一样的</p>\n<p>以前从 windows 系统转过来的是很不习惯，外接键盘鼠标分别进行了设置，触摸板和鼠标又区别进行设置</p>\n<blockquote>\n<p>window 上使用的一套罗技的鼠标和键盘，之间把 usb 发射器插入 Mac 来切换输入设备，Mac 下的默认键盘映射有点 Mac 笔记本自带的布局不一样的。通过如下设置：</p>\n<ol>\n<li><em>键盘</em> “系统偏好设置”—“键盘”—“修饰键” 将键盘上的 Windows 映射成 option 键，alt 键映射成苹果键</li>\n<li>鼠标 “系统偏好设置”—“鼠标”—“滚动方向：自然” 勾选取掉，这样就和 window 下一样自然使用鼠标了</li>\n</ol>\n<p>鼠标设置优点烦恼：用 Mac 笔记本的时候触摸板的上下方向又反了，用外交设备的时候只能用外接设备，用笔记本的时候用要再改变回来，<code>2017.12.12</code> 更新： <a href=\"https://pilotmoon.com/scrollreverser/\">SCROLL REVERSER</a> 解决了这个问题</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"选装软件\"><a href=\"#选装软件\" class=\"headerlink\" title=\"选装软件\"></a>选装软件</h3><ol>\n<li><p><a href=\"https://typora.io/\">Typora</a> Markdown 写作工具</p>\n<blockquote>\n<p>以前用过马克飞象觉得快捷键挺好用的，不过这款 App 直接所见即所得模式，一会查询下相关的快捷键，更喜欢的还有 theme 的选择，默认竟然是 GitHub 的</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://matthewpalmer.net/vanilla/\">Vanilla</a></p>\n<blockquote>\n<p>Hide menu bar icons on your Mac</p>\n</blockquote>\n<p>Mac 工具栏 icons 管理工具，可以选择那些软件 icon 隐藏和展示</p>\n</li>\n<li><p><a href=\"https://www.jianguoyun.com/\">坚果云</a> 不同机器间同步文件用的，免费用户有流量限制，平时同步文档用，已经保存软件安装包用</p>\n</li>\n<li><p><a href=\"https://www.mowglii.com/itsycal/\">Itsycal</a> 好用的通知栏日历软件</p>\n</li>\n<li><p><a href=\"https://fliqlo.com/\">fliqlo</a> 屏保工具</p>\n</li>\n<li><p><a href=\"https://www.rescuetime.com/\">RescueTime</a> 时间记录工具</p>\n<p>记录每个软件上使用时间，早在 Mac 系统的屏幕使用时间功能，并且可以 web 查看统计表格</p>\n</li>\n<li><p><a href=\"https://pomotodo.com/intl/zh-CN/\">番茄土豆</a> 时间管理工具</p>\n</li>\n<li><p><a href=\"https://wakatime.com/\">wakatime</a> 有 vscode 插件，可以统计每个项目上的使用时间</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><p><a href=\"https://github.com/bestswifter/blog/blob/master/articles/efficient-mac.md\">如何大幅度提高 Mac 开发效率</a></p>\n</li>\n<li><p><a href=\"https://support.apple.com/zh-cn/HT201236\">Mac 键盘快捷键</a></p>\n</li>\n<li><p><a href=\"https://github.com/bestswifter/macbootstrap\">macbootstrap</a> A bootstrap script for new Mac</p>\n<blockquote>\n<p>对新 mac 设置脚步，不用在搜索教程一步步的设置啦，一行命令搞定，并且详细讲解了设置的细节</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/35050387\">macOS 有哪些冷门但是一但发现就无法自拔的软件？</a></p>\n<p><a href=\"https://www.mowglii.com/itsycal/\">Itsycal</a> 好用的通知栏日历软件</p>\n<p><a href=\"https://macwk.com/soft/pdf-expert\">PDF Expert</a> PDF 工具</p>\n<p><a href=\"https://fliqlo.com/\">fliqlo</a> 屏保工具</p>\n<p><a href=\"https://neededapps.com/screentolayers/\">ScreenToLayers</a> 屏幕截图保存为 PSD</p>\n<p><a href=\"https://macwk.com/soft/ipack\">iPack</a> 解压缩软件，不用压缩 mac 特有的文件</p>\n<p><a href=\"http://www.hammerspoon.org/\">Hammerspoon</a> lua 脚步定制自动化工具</p>\n<p>可以自己看找自己需要的软件</p>\n</li>\n</ol>\n<h3 id=\"顶配的-Mac-Pro-配置\"><a href=\"#顶配的-Mac-Pro-配置\" class=\"headerlink\" title=\"顶配的 Mac Pro 配置\"></a>顶配的 Mac Pro 配置</h3><ol>\n<li><p><a href=\"https://support.apple.com/kb/SP697?locale=zh_CN\">Mac Pro（2013 年末) - 技术规格</a></p>\n<p>收到自己的二手顶配 Mac Pro 了 128G 内存，1T M2 硬盘，双 D7 6G 显卡</p>\n<p>处理器查了下 ： <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/75283/intel-xeon-processor-e5-2697-v2-30m-cache-2-70-ghz.html\">英特尔 ® 至强 ® 处理器 E5-2697 v2</a></p>\n<p>疑惑的是内存明明是 1866Mhz 的 32G 内存条，系统要降到 1066Mhz 区使用，网上说是为了散热设置的，回去拆下两个内存条来看下 能不能提升 到 1866Mzh，看文章：<a href=\"http://blog.chinaunix.net/uid-14214482-id-3220464.html\">DDR3 内存带宽计算</a> 这样读写速度带宽就能提升 ，不过 CPU 中限制了 <code>最大内存带宽59.7 GB/s</code></p>\n<blockquote>\n<p>测试了拆下 2 个 32G 内存条，标准的 1066mHz，没法升高到 1866 Hz，感觉还是 128 内存安装在上面吧</p>\n</blockquote>\n<p>硬盘感觉也要高了，现在监测的 写 1400M，读 1800M，当时让卖家加的：<a href=\"https://item.jd.com/100002183461.html\">三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 970 EVO Plus（MZ-V7S1T0B）</a> ，R 3500M，W 3300M。感觉也就一半的性能用到了，后面其他机器用到了，可以换下来！</p>\n<p>替换： <a href=\"https://item.jd.com/100005185781.html\">雷克沙（Lexar）NM610 1TB M.2 NVMe SSD 固态硬盘 PCle3.0 四通道(NM610-1TB)</a> 599 价格</p>\n<p>多花了 1 倍的价格</p>\n</li>\n<li><p><a href=\"https://www.feng.com/post/12981301\"> 这个 Mac Pro 垃圾桶值得入手吗</a></p>\n<p>哈哈，讨论了一周，<a href=\"https://browser.geekbench.com/macs/mac-pro-late-2013-intel-xeon-e5-2697-v2-2-7-ghz-12-cores\">还是看数据性能</a>，感觉 还是 m1 芯片的 mac mini 性能高，比较各种硬件的标准 7 年提审了很多，5 纳米的制造工艺也是很有优势的</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>二手的顶配 Mac Pro 垃圾桶到货了，新系统从零开始配置开发环境，包括终端软件改为 iTerm2，bash 改为 zsh, 并且安装 oh-my-zsh</p>","more":"<h3 id=\"必备软件\"><a href=\"#必备软件\" class=\"headerlink\" title=\"必备软件\"></a>必备软件</h3><ol>\n<li><p><a href=\"https://u.tools/\">uTools</a> Alfred 替代品，跨系统，Linux Mac Windows 都可以，中国人写的，插件也很实用</p>\n<p>软件免费，插件免费，跨平台同步配置是首付的，很良心了</p>\n<p>常用的 插件</p>\n<p>vscode ：查找 vscode 项目历史，直接通过 vscode 打开 项目</p>\n<p>Tinypng: 直接压缩图片并可以替换原有的文件</p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844904178075058189\">iTerm2 + Oh My Zsh</a></p>\n<p>开发 50%以上的时间和终端打交道的，弄个高颜值好用的终端还是第一需求的</p>\n<p>下载 iTerm 软件安装，配置 oh-my-zsh ，设置 iterm 软件的 sh 默认为 zsh，设置 zsh 的 theme 皮肤，和 iTerm 中 字符集</p>\n<p>安装 Homebrew，这样安装软件时候直接 命令行 <code>brew install</code></p>\n</li>\n<li><p>Git 的配置</p>\n<p><code>ssh-keygen</code> 生产公钥秘钥，配置公钥到 git 线上服务上（github，gitee，gitlab)</p>\n<p>不同 git 服务器下载自动设置不同的用户名和邮箱 : <a href=\"https://segmentfault.com/a/1190000013727784\">利用 Git-hook 自动配置不同仓库的用户信息</a></p>\n</li>\n<li><p><a href=\"https://code.visualstudio.com/\">vscode</a></p>\n<p>直接下载安装了，安装插件 <a href=\"https://github.com/shanalikhan/code-settings-sync.git\">Settings Sync</a> 添加 Gist 同步不同电脑上的 vscode 配置</p>\n</li>\n<li><p><a href=\"https://github.com/nvm-sh/nvm\">nvm</a> nodejs 版本管理工具，前端开发离不开的</p>\n<p>安装起那么开发环境 <code>brew install nvm</code></p>\n<p>npm 配置下载源 registry <code>npm config set registry https://registry.npm.taobao.org</code></p>\n</li>\n<li><p><a href=\"https://www.spectacleapp.com/\">Spectacle</a> 的出现让调整窗口，分屏变得与 windows 一样简单</p>\n<p>多窗口管理工具，常用 commond + option + 左右方向键，让当前窗口占据屏幕的左右一半屏幕</p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/40b71d939a05\">MAC Command 键与 Control 键调换方案</a> <strong>推荐</strong></p>\n<p>试了半天，我很特殊电脑上是 command 的 option 进行了互调，笔记本电脑上用习惯了，现在调成一样的</p>\n<p>以前从 windows 系统转过来的是很不习惯，外接键盘鼠标分别进行了设置，触摸板和鼠标又区别进行设置</p>\n<blockquote>\n<p>window 上使用的一套罗技的鼠标和键盘，之间把 usb 发射器插入 Mac 来切换输入设备，Mac 下的默认键盘映射有点 Mac 笔记本自带的布局不一样的。通过如下设置：</p>\n<ol>\n<li><em>键盘</em> “系统偏好设置”—“键盘”—“修饰键” 将键盘上的 Windows 映射成 option 键，alt 键映射成苹果键</li>\n<li>鼠标 “系统偏好设置”—“鼠标”—“滚动方向：自然” 勾选取掉，这样就和 window 下一样自然使用鼠标了</li>\n</ol>\n<p>鼠标设置优点烦恼：用 Mac 笔记本的时候触摸板的上下方向又反了，用外交设备的时候只能用外接设备，用笔记本的时候用要再改变回来，<code>2017.12.12</code> 更新： <a href=\"https://pilotmoon.com/scrollreverser/\">SCROLL REVERSER</a> 解决了这个问题</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"选装软件\"><a href=\"#选装软件\" class=\"headerlink\" title=\"选装软件\"></a>选装软件</h3><ol>\n<li><p><a href=\"https://typora.io/\">Typora</a> Markdown 写作工具</p>\n<blockquote>\n<p>以前用过马克飞象觉得快捷键挺好用的，不过这款 App 直接所见即所得模式，一会查询下相关的快捷键，更喜欢的还有 theme 的选择，默认竟然是 GitHub 的</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://matthewpalmer.net/vanilla/\">Vanilla</a></p>\n<blockquote>\n<p>Hide menu bar icons on your Mac</p>\n</blockquote>\n<p>Mac 工具栏 icons 管理工具，可以选择那些软件 icon 隐藏和展示</p>\n</li>\n<li><p><a href=\"https://www.jianguoyun.com/\">坚果云</a> 不同机器间同步文件用的，免费用户有流量限制，平时同步文档用，已经保存软件安装包用</p>\n</li>\n<li><p><a href=\"https://www.mowglii.com/itsycal/\">Itsycal</a> 好用的通知栏日历软件</p>\n</li>\n<li><p><a href=\"https://fliqlo.com/\">fliqlo</a> 屏保工具</p>\n</li>\n<li><p><a href=\"https://www.rescuetime.com/\">RescueTime</a> 时间记录工具</p>\n<p>记录每个软件上使用时间，早在 Mac 系统的屏幕使用时间功能，并且可以 web 查看统计表格</p>\n</li>\n<li><p><a href=\"https://pomotodo.com/intl/zh-CN/\">番茄土豆</a> 时间管理工具</p>\n</li>\n<li><p><a href=\"https://wakatime.com/\">wakatime</a> 有 vscode 插件，可以统计每个项目上的使用时间</p>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><p><a href=\"https://github.com/bestswifter/blog/blob/master/articles/efficient-mac.md\">如何大幅度提高 Mac 开发效率</a></p>\n</li>\n<li><p><a href=\"https://support.apple.com/zh-cn/HT201236\">Mac 键盘快捷键</a></p>\n</li>\n<li><p><a href=\"https://github.com/bestswifter/macbootstrap\">macbootstrap</a> A bootstrap script for new Mac</p>\n<blockquote>\n<p>对新 mac 设置脚步，不用在搜索教程一步步的设置啦，一行命令搞定，并且详细讲解了设置的细节</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/35050387\">macOS 有哪些冷门但是一但发现就无法自拔的软件？</a></p>\n<p><a href=\"https://www.mowglii.com/itsycal/\">Itsycal</a> 好用的通知栏日历软件</p>\n<p><a href=\"https://macwk.com/soft/pdf-expert\">PDF Expert</a> PDF 工具</p>\n<p><a href=\"https://fliqlo.com/\">fliqlo</a> 屏保工具</p>\n<p><a href=\"https://neededapps.com/screentolayers/\">ScreenToLayers</a> 屏幕截图保存为 PSD</p>\n<p><a href=\"https://macwk.com/soft/ipack\">iPack</a> 解压缩软件，不用压缩 mac 特有的文件</p>\n<p><a href=\"http://www.hammerspoon.org/\">Hammerspoon</a> lua 脚步定制自动化工具</p>\n<p>可以自己看找自己需要的软件</p>\n</li>\n</ol>\n<h3 id=\"顶配的-Mac-Pro-配置\"><a href=\"#顶配的-Mac-Pro-配置\" class=\"headerlink\" title=\"顶配的 Mac Pro 配置\"></a>顶配的 Mac Pro 配置</h3><ol>\n<li><p><a href=\"https://support.apple.com/kb/SP697?locale=zh_CN\">Mac Pro（2013 年末) - 技术规格</a></p>\n<p>收到自己的二手顶配 Mac Pro 了 128G 内存，1T M2 硬盘，双 D7 6G 显卡</p>\n<p>处理器查了下 ： <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/75283/intel-xeon-processor-e5-2697-v2-30m-cache-2-70-ghz.html\">英特尔 ® 至强 ® 处理器 E5-2697 v2</a></p>\n<p>疑惑的是内存明明是 1866Mhz 的 32G 内存条，系统要降到 1066Mhz 区使用，网上说是为了散热设置的，回去拆下两个内存条来看下 能不能提升 到 1866Mzh，看文章：<a href=\"http://blog.chinaunix.net/uid-14214482-id-3220464.html\">DDR3 内存带宽计算</a> 这样读写速度带宽就能提升 ，不过 CPU 中限制了 <code>最大内存带宽59.7 GB/s</code></p>\n<blockquote>\n<p>测试了拆下 2 个 32G 内存条，标准的 1066mHz，没法升高到 1866 Hz，感觉还是 128 内存安装在上面吧</p>\n</blockquote>\n<p>硬盘感觉也要高了，现在监测的 写 1400M，读 1800M，当时让卖家加的：<a href=\"https://item.jd.com/100002183461.html\">三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 970 EVO Plus（MZ-V7S1T0B）</a> ，R 3500M，W 3300M。感觉也就一半的性能用到了，后面其他机器用到了，可以换下来！</p>\n<p>替换： <a href=\"https://item.jd.com/100005185781.html\">雷克沙（Lexar）NM610 1TB M.2 NVMe SSD 固态硬盘 PCle3.0 四通道(NM610-1TB)</a> 599 价格</p>\n<p>多花了 1 倍的价格</p>\n</li>\n<li><p><a href=\"https://www.feng.com/post/12981301\"> 这个 Mac Pro 垃圾桶值得入手吗</a></p>\n<p>哈哈，讨论了一周，<a href=\"https://browser.geekbench.com/macs/mac-pro-late-2013-intel-xeon-e5-2697-v2-2-7-ghz-12-cores\">还是看数据性能</a>，感觉 还是 m1 芯片的 mac mini 性能高，比较各种硬件的标准 7 年提审了很多，5 纳米的制造工艺也是很有优势的</p>\n</li>\n</ol>"},{"title":"React课程学习","date":"2016-07-06T06:38:55.000Z","_content":"[上一篇](/2016/06/06/hackathon-blog/)是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: [React课程学习](http://guoyongfeng.github.io/idoc/index.html), 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章\n<!-- more -->\n\n## 2016-06-29\n\n### 1. Error: \n\n``` bash\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.13.1\nTime: 52ms\n   [0] ./src/index.js 0 bytes [built] [failed]\n\nERROR in ./src/index.js\nModule parse failed: F:\\Users\\react\\webpack-demo\\src\\index.js Unexpected token (9:6)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (9:6)\n    at Parser.pp.raise (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:923:13)\n    at Parser.pp.unexpected (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1490:8)\n    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:333:12)\n    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)\n    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)\n    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)\n    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)\n    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)\n    at Parser.pp.parseParenAndDistinguishExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:376:28)\n    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:307:19)\n    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)\n    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)\n    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)\n    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)\n    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)\n    at Parser.pp.parseExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:88:19)\n    at Parser.pp.parseReturnStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1872:26)\n    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1737:19)\n    at Parser.pp.parseBlock (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2009:21)\n    at Parser.pp.parseFunctionBody (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:610:22)\n    at Parser.pp.parseMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:579:8)\n    at Parser.pp.parseClassMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2155:23)\n    at Parser.pp.parseClass (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2140:10)\n    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1733:19)\n    at Parser.pp.parseTopLevel (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1666:21)\n    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1632:17)\n    at Object.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:885:44)\n    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (F:\\Users\\react\\webpack-demo\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)\n\n```\n\n#### 原因是， loaders 中 test 匹配正则错误, 没有引号，`/\\.js$/ `\n\n## 2016-06-30\n\n### 1. webpack 加速！\n\n看到了 webpack resolve 模块了，添加了alias， extensions 感觉编译速度并不明显， 从7s多到5s多的样子，只是基本的模块，并没有添加逻辑代码。可是在loaders 中.js 的解析中添加了 `exclude: path.resolve(__dirname, 'node_modules')` 之后编译速度进入1s 内982ms\n\n### 2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：`Uncaught ReferenceError: require is not defined`\n\n搜索相关的保存信息`Uncaught ReferenceError: require is not defined` 得到的相关 参考文章： [webpack打包react-dom后，浏览器报require is not defined错误?](https://segmentfault.com/q/1010000004429238) \n> 问题解决，是我将react-dom加入到webpack的noparse 中了，删掉即可！\n\n同样删掉后，并不能解决问题，只好一步步注释回退到原来的状态，检测出错的模块，最后还是检测到是 webpack noParse的问题，不过webpack-dev-server 命令前要先webpack 下打包文件到build目录下，前面一直掉到这个坑里了！\n\n#### 提示\n\n[Webpack基础: 7.解析样式文件](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/Webpack%E5%9F%BA%E7%A1%80.html#t77.解析样式文件)，还没有实现热更新功能，所以修改less文件需要重新webpack才能看到结果\n\n### 3. react-hot & webpack-dev-server --inline --hot 配置热更新是报错！\n\n``` bash\nERROR in ./src/index.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\n @ ./src/index.js 1:301-332\n\nERROR in ./src/container/App.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\\container\n @ ./src/container/App.js 1:301-332\n\nERROR in ./src/components/Button/Button.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\\components\\Button\n @ ./src/components/Button/Button.js 1:301-332\n```\n\n注释掉 webpack 中的resolve 的alias 模块 这样就可以解析react & react-dom 模块 通过react-hot。webpack 编译通过，可以运行`npm run dev`，浏览器打开后报错：\n``` bash\n[HMR] Waiting for update signal from WDS...\nabstract-xhr.js:132 GET http://localhost:3000/sockjs-node/info?t=1467279375252 net::ERR_CONNECTION_REFUSED\nclient:70 [WDS] Disconnected!\n```\n修改 webpack-dev-server 的port 为3000后解决，端口号要一致。 不过并没有实现热更新功能（编辑器修改，浏览器预览效果）\n\n[使用Webpack搭建开发环境工作流](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/%E4%BD%BF%E7%94%A8Webpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E6%80%81%E5%B7%A5%E4%BD%9C%E6%B5%81.html) 关于自动刷新， 和 HMR 的配置 关于 [WEBPACK DEV SERVER](http://www.jianshu.com/p/941bfaf13be1) 关于webpack-dev-server 的说明挺详细的，提到了关于热更新不起作用的 原因 [The following modules couldn't be hot updated: (They would need a full reload!)](https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#the-following-modules-couldnt-be-hot-updated-they-would-need-a-full-reload)\n> 1. webpack dev server 中提到了前后端配合的相关配置\n  2. troubleshooting.md 各种配置报错的解决办法！\n\n#### 解决办法\n\nwebpack 中devSever 配置中把，publicPath 去掉就OK，就可以了，\n> loader 中关于js 的loader配置改成了loaders 后面是数组，如果loader 通过! 链接的话也可以\n\n\n## 2016-07-04\n\n### 1. [React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html)\n> 入门挺不错的！\n\n### 2. [React Mixin 的前世今生](https://zhuanlan.zhihu.com/p/20361937)\n> 有点高深的内容，可以完全没读懂啊！\n\n\n### 3. [github-notetaker应用开发](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html)\n\n#### [7.接入真实的数据](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html#t97.接入真实的数据) \n> 用到了mixin\n\n## 2016-07-05\n\ngithub-note-taker 中使用了firebase ，直接写代码并没有运行，查看了 [firebase](https://console.firebase.google.com/)官网，已经 [ReactFire Guild](https://github.com/firebase/reactfire/blob/master/docs/guide.md)\n> 最终没有使用 firebase 通过 state 中的notes mock了相应的数据\n\n### 1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法\n\n### 2. [React-router路由实践](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-router%E8%B7%AF%E7%94%B1%E5%AE%9E%E8%B7%B5.html)\n> 明天coding 下\n\n### 3. [React-AJAX的最佳实践](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-AJAX%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html)\n> 作者并没写完，只是给提纲！\n\n## 2016-07-06\n\n### 1. coding [React-router路由实践](link)\n\n#### 1. \n``` bash\ninvariant.js:39 Uncaught Invariant Violation: findComponentRoot(..., .0): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID ``.\n```\n\n\n## 2016-07-11\n看了redux 入门，进入公司项目\n\n## 2016-07-27\n\n继续吧！期望这个星期，这个月底能完成 hackathon-blog 项目，现在先把redux熟悉\n\n## 2016-08-02\n\nredux 入门的todo demo 调试完成，next: Middleware\n\n[React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial#reactredux系列教程)\n\n## 2016-08-04\n\n1. [React实践 - Component Generator](https://zhuanlan.zhihu.com/p/21386862?refer=purerender)\n2. [redux middleware 详解](https://zhuanlan.zhihu.com/p/20597452)","source":"_posts/React课程学习.md","raw":"---\ntitle: React课程学习\ndate: 2016-07-06 14:38:55\ntags: [F2E, React, Redux]\ncategories: [F2E, React]\n---\n[上一篇](/2016/06/06/hackathon-blog/)是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: [React课程学习](http://guoyongfeng.github.io/idoc/index.html), 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章\n<!-- more -->\n\n## 2016-06-29\n\n### 1. Error: \n\n``` bash\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.13.1\nTime: 52ms\n   [0] ./src/index.js 0 bytes [built] [failed]\n\nERROR in ./src/index.js\nModule parse failed: F:\\Users\\react\\webpack-demo\\src\\index.js Unexpected token (9:6)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (9:6)\n    at Parser.pp.raise (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:923:13)\n    at Parser.pp.unexpected (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1490:8)\n    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:333:12)\n    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)\n    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)\n    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)\n    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)\n    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)\n    at Parser.pp.parseParenAndDistinguishExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:376:28)\n    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:307:19)\n    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)\n    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)\n    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)\n    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)\n    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)\n    at Parser.pp.parseExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:88:19)\n    at Parser.pp.parseReturnStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1872:26)\n    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1737:19)\n    at Parser.pp.parseBlock (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2009:21)\n    at Parser.pp.parseFunctionBody (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:610:22)\n    at Parser.pp.parseMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:579:8)\n    at Parser.pp.parseClassMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2155:23)\n    at Parser.pp.parseClass (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2140:10)\n    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1733:19)\n    at Parser.pp.parseTopLevel (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1666:21)\n    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1632:17)\n    at Object.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:885:44)\n    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\Parser.js:902:15)\n    at DependenciesBlock.<anonymous> (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\NormalModule.js:104:16)\n    at DependenciesBlock.onModuleBuild (F:\\Users\\react\\webpack-demo\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)\n\n```\n\n#### 原因是， loaders 中 test 匹配正则错误, 没有引号，`/\\.js$/ `\n\n## 2016-06-30\n\n### 1. webpack 加速！\n\n看到了 webpack resolve 模块了，添加了alias， extensions 感觉编译速度并不明显， 从7s多到5s多的样子，只是基本的模块，并没有添加逻辑代码。可是在loaders 中.js 的解析中添加了 `exclude: path.resolve(__dirname, 'node_modules')` 之后编译速度进入1s 内982ms\n\n### 2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：`Uncaught ReferenceError: require is not defined`\n\n搜索相关的保存信息`Uncaught ReferenceError: require is not defined` 得到的相关 参考文章： [webpack打包react-dom后，浏览器报require is not defined错误?](https://segmentfault.com/q/1010000004429238) \n> 问题解决，是我将react-dom加入到webpack的noparse 中了，删掉即可！\n\n同样删掉后，并不能解决问题，只好一步步注释回退到原来的状态，检测出错的模块，最后还是检测到是 webpack noParse的问题，不过webpack-dev-server 命令前要先webpack 下打包文件到build目录下，前面一直掉到这个坑里了！\n\n#### 提示\n\n[Webpack基础: 7.解析样式文件](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/Webpack%E5%9F%BA%E7%A1%80.html#t77.解析样式文件)，还没有实现热更新功能，所以修改less文件需要重新webpack才能看到结果\n\n### 3. react-hot & webpack-dev-server --inline --hot 配置热更新是报错！\n\n``` bash\nERROR in ./src/index.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\n @ ./src/index.js 1:301-332\n\nERROR in ./src/container/App.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\\container\n @ ./src/container/App.js 1:301-332\n\nERROR in ./src/components/Button/Button.js\nModule not found: Error: Cannot resolve 'file' or 'directory' F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount in F:\\Users\\react\\webpack-demo\\src\\components\\Button\n @ ./src/components/Button/Button.js 1:301-332\n```\n\n注释掉 webpack 中的resolve 的alias 模块 这样就可以解析react & react-dom 模块 通过react-hot。webpack 编译通过，可以运行`npm run dev`，浏览器打开后报错：\n``` bash\n[HMR] Waiting for update signal from WDS...\nabstract-xhr.js:132 GET http://localhost:3000/sockjs-node/info?t=1467279375252 net::ERR_CONNECTION_REFUSED\nclient:70 [WDS] Disconnected!\n```\n修改 webpack-dev-server 的port 为3000后解决，端口号要一致。 不过并没有实现热更新功能（编辑器修改，浏览器预览效果）\n\n[使用Webpack搭建开发环境工作流](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/%E4%BD%BF%E7%94%A8Webpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E6%80%81%E5%B7%A5%E4%BD%9C%E6%B5%81.html) 关于自动刷新， 和 HMR 的配置 关于 [WEBPACK DEV SERVER](http://www.jianshu.com/p/941bfaf13be1) 关于webpack-dev-server 的说明挺详细的，提到了关于热更新不起作用的 原因 [The following modules couldn't be hot updated: (They would need a full reload!)](https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#the-following-modules-couldnt-be-hot-updated-they-would-need-a-full-reload)\n> 1. webpack dev server 中提到了前后端配合的相关配置\n  2. troubleshooting.md 各种配置报错的解决办法！\n\n#### 解决办法\n\nwebpack 中devSever 配置中把，publicPath 去掉就OK，就可以了，\n> loader 中关于js 的loader配置改成了loaders 后面是数组，如果loader 通过! 链接的话也可以\n\n\n## 2016-07-04\n\n### 1. [React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html)\n> 入门挺不错的！\n\n### 2. [React Mixin 的前世今生](https://zhuanlan.zhihu.com/p/20361937)\n> 有点高深的内容，可以完全没读懂啊！\n\n\n### 3. [github-notetaker应用开发](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html)\n\n#### [7.接入真实的数据](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html#t97.接入真实的数据) \n> 用到了mixin\n\n## 2016-07-05\n\ngithub-note-taker 中使用了firebase ，直接写代码并没有运行，查看了 [firebase](https://console.firebase.google.com/)官网，已经 [ReactFire Guild](https://github.com/firebase/reactfire/blob/master/docs/guide.md)\n> 最终没有使用 firebase 通过 state 中的notes mock了相应的数据\n\n### 1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法\n\n### 2. [React-router路由实践](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-router%E8%B7%AF%E7%94%B1%E5%AE%9E%E8%B7%B5.html)\n> 明天coding 下\n\n### 3. [React-AJAX的最佳实践](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-AJAX%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html)\n> 作者并没写完，只是给提纲！\n\n## 2016-07-06\n\n### 1. coding [React-router路由实践](link)\n\n#### 1. \n``` bash\ninvariant.js:39 Uncaught Invariant Violation: findComponentRoot(..., .0): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID ``.\n```\n\n\n## 2016-07-11\n看了redux 入门，进入公司项目\n\n## 2016-07-27\n\n继续吧！期望这个星期，这个月底能完成 hackathon-blog 项目，现在先把redux熟悉\n\n## 2016-08-02\n\nredux 入门的todo demo 调试完成，next: Middleware\n\n[React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial#reactredux系列教程)\n\n## 2016-08-04\n\n1. [React实践 - Component Generator](https://zhuanlan.zhihu.com/p/21386862?refer=purerender)\n2. [redux middleware 详解](https://zhuanlan.zhihu.com/p/20597452)","slug":"React课程学习","published":1,"updated":"2022-01-20T04:12:09.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0g00037uo074ksce2v","content":"<p><a href=\"/2016/06/06/hackathon-blog/\">上一篇</a>是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: <a href=\"http://guoyongfeng.github.io/idoc/index.html\">React课程学习</a>, 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2016-06-29\"><a href=\"#2016-06-29\" class=\"headerlink\" title=\"2016-06-29\"></a>2016-06-29</h2><h3 id=\"1-Error\"><a href=\"#1-Error\" class=\"headerlink\" title=\"1. Error:\"></a>1. Error:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">Hash: 396f0bfb9d565b6f60f0<br>Version: webpack 1.13.1<br>Time: 52ms<br>   [0] ./src/index.js 0 bytes [built] [failed]<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/index.js<br>Module parse failed: F:\\Users\\react\\webpack-demo\\src\\index.js Unexpected token (9:6)<br>You may need an appropriate loader to handle this file <span class=\"hljs-built_in\">type</span>.<br>SyntaxError: Unexpected token (9:6)<br>    at Parser.pp.raise (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:923:13)<br>    at Parser.pp.unexpected (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1490:8)<br>    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:333:12)<br>    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)<br>    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)<br>    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)<br>    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)<br>    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)<br>    at Parser.pp.parseParenAndDistinguishExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:376:28)<br>    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:307:19)<br>    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)<br>    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)<br>    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)<br>    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)<br>    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)<br>    at Parser.pp.parseExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:88:19)<br>    at Parser.pp.parseReturnStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1872:26)<br>    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1737:19)<br>    at Parser.pp.parseBlock (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2009:21)<br>    at Parser.pp.parseFunctionBody (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:610:22)<br>    at Parser.pp.parseMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:579:8)<br>    at Parser.pp.parseClassMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2155:23)<br>    at Parser.pp.parseClass (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2140:10)<br>    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1733:19)<br>    at Parser.pp.parseTopLevel (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1666:21)<br>    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1632:17)<br>    at Object.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:885:44)<br>    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\Parser.js:902:15)<br>    at DependenciesBlock.&lt;anonymous&gt; (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\NormalModule.js:104:16)<br>    at DependenciesBlock.onModuleBuild (F:\\Users\\react\\webpack-demo\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"原因是，-loaders-中-test-匹配正则错误-没有引号，-js\"><a href=\"#原因是，-loaders-中-test-匹配正则错误-没有引号，-js\" class=\"headerlink\" title=\"原因是， loaders 中 test 匹配正则错误, 没有引号，/\\.js$/ \"></a>原因是， loaders 中 test 匹配正则错误, 没有引号，<code>/\\.js$/ </code></h4><h2 id=\"2016-06-30\"><a href=\"#2016-06-30\" class=\"headerlink\" title=\"2016-06-30\"></a>2016-06-30</h2><h3 id=\"1-webpack-加速！\"><a href=\"#1-webpack-加速！\" class=\"headerlink\" title=\"1. webpack 加速！\"></a>1. webpack 加速！</h3><p>看到了 webpack resolve 模块了，添加了alias， extensions 感觉编译速度并不明显， 从7s多到5s多的样子，只是基本的模块，并没有添加逻辑代码。可是在loaders 中.js 的解析中添加了 <code>exclude: path.resolve(__dirname, &#39;node_modules&#39;)</code> 之后编译速度进入1s 内982ms</p>\n<h3 id=\"2-webpack-添加resolve-和-解析样式文件的-loaders-style-loader-css-loader-less-loader-，报错信息：Uncaught-ReferenceError-require-is-not-defined\"><a href=\"#2-webpack-添加resolve-和-解析样式文件的-loaders-style-loader-css-loader-less-loader-，报错信息：Uncaught-ReferenceError-require-is-not-defined\" class=\"headerlink\" title=\"2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：Uncaught ReferenceError: require is not defined\"></a>2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：<code>Uncaught ReferenceError: require is not defined</code></h3><p>搜索相关的保存信息<code>Uncaught ReferenceError: require is not defined</code> 得到的相关 参考文章： <a href=\"https://segmentfault.com/q/1010000004429238\">webpack打包react-dom后，浏览器报require is not defined错误?</a> </p>\n<blockquote>\n<p>问题解决，是我将react-dom加入到webpack的noparse 中了，删掉即可！</p>\n</blockquote>\n<p>同样删掉后，并不能解决问题，只好一步步注释回退到原来的状态，检测出错的模块，最后还是检测到是 webpack noParse的问题，不过webpack-dev-server 命令前要先webpack 下打包文件到build目录下，前面一直掉到这个坑里了！</p>\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/Webpack%E5%9F%BA%E7%A1%80.html#t77.%E8%A7%A3%E6%9E%90%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6\">Webpack基础: 7.解析样式文件</a>，还没有实现热更新功能，所以修改less文件需要重新webpack才能看到结果</p>\n<h3 id=\"3-react-hot-amp-webpack-dev-server-–inline-–hot-配置热更新是报错！\"><a href=\"#3-react-hot-amp-webpack-dev-server-–inline-–hot-配置热更新是报错！\" class=\"headerlink\" title=\"3. react-hot &amp; webpack-dev-server –inline –hot 配置热更新是报错！\"></a>3. react-hot &amp; webpack-dev-server –inline –hot 配置热更新是报错！</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ERROR <span class=\"hljs-keyword\">in</span> ./src/index.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src<br> @ ./src/index.js 1:301-332<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/container/App.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src\\container<br> @ ./src/container/App.js 1:301-332<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/components/Button/Button.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src\\components\\Button<br> @ ./src/components/Button/Button.js 1:301-332<br></code></pre></td></tr></table></figure>\n\n<p>注释掉 webpack 中的resolve 的alias 模块 这样就可以解析react &amp; react-dom 模块 通过react-hot。webpack 编译通过，可以运行<code>npm run dev</code>，浏览器打开后报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">[HMR] Waiting <span class=\"hljs-keyword\">for</span> update signal from WDS...<br>abstract-xhr.js:132 GET http://localhost:3000/sockjs-node/info?t=1467279375252 net::ERR_CONNECTION_REFUSED<br>client:70 [WDS] Disconnected!<br></code></pre></td></tr></table></figure>\n<p>修改 webpack-dev-server 的port 为3000后解决，端口号要一致。 不过并没有实现热更新功能（编辑器修改，浏览器预览效果）</p>\n<p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/%E4%BD%BF%E7%94%A8Webpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E6%80%81%E5%B7%A5%E4%BD%9C%E6%B5%81.html\">使用Webpack搭建开发环境工作流</a> 关于自动刷新， 和 HMR 的配置 关于 <a href=\"http://www.jianshu.com/p/941bfaf13be1\">WEBPACK DEV SERVER</a> 关于webpack-dev-server 的说明挺详细的，提到了关于热更新不起作用的 原因 <a href=\"https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#the-following-modules-couldnt-be-hot-updated-they-would-need-a-full-reload\">The following modules couldn’t be hot updated: (They would need a full reload!)</a></p>\n<blockquote>\n<ol>\n<li>webpack dev server 中提到了前后端配合的相关配置</li>\n<li>troubleshooting.md 各种配置报错的解决办法！</li>\n</ol>\n</blockquote>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>webpack 中devSever 配置中把，publicPath 去掉就OK，就可以了，</p>\n<blockquote>\n<p>loader 中关于js 的loader配置改成了loaders 后面是数组，如果loader 通过! 链接的话也可以</p>\n</blockquote>\n<h2 id=\"2016-07-04\"><a href=\"#2016-07-04\" class=\"headerlink\" title=\"2016-07-04\"></a>2016-07-04</h2><h3 id=\"1-React-Router-使用教程\"><a href=\"#1-React-Router-使用教程\" class=\"headerlink\" title=\"1. React Router 使用教程\"></a>1. <a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html\">React Router 使用教程</a></h3><blockquote>\n<p>入门挺不错的！</p>\n</blockquote>\n<h3 id=\"2-React-Mixin-的前世今生\"><a href=\"#2-React-Mixin-的前世今生\" class=\"headerlink\" title=\"2. React Mixin 的前世今生\"></a>2. <a href=\"https://zhuanlan.zhihu.com/p/20361937\">React Mixin 的前世今生</a></h3><blockquote>\n<p>有点高深的内容，可以完全没读懂啊！</p>\n</blockquote>\n<h3 id=\"3-github-notetaker应用开发\"><a href=\"#3-github-notetaker应用开发\" class=\"headerlink\" title=\"3. github-notetaker应用开发\"></a>3. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html\">github-notetaker应用开发</a></h3><h4 id=\"7-接入真实的数据\"><a href=\"#7-接入真实的数据\" class=\"headerlink\" title=\"7.接入真实的数据\"></a><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html#t97.%E6%8E%A5%E5%85%A5%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%B0%E6%8D%AE\">7.接入真实的数据</a></h4><blockquote>\n<p>用到了mixin</p>\n</blockquote>\n<h2 id=\"2016-07-05\"><a href=\"#2016-07-05\" class=\"headerlink\" title=\"2016-07-05\"></a>2016-07-05</h2><p>github-note-taker 中使用了firebase ，直接写代码并没有运行，查看了 <a href=\"https://console.firebase.google.com/\">firebase</a>官网，已经 <a href=\"https://github.com/firebase/reactfire/blob/master/docs/guide.md\">ReactFire Guild</a></p>\n<blockquote>\n<p>最终没有使用 firebase 通过 state 中的notes mock了相应的数据</p>\n</blockquote>\n<h3 id=\"1-github-note-taker-调试完成，属性了组织开发react的方式和-react-router的基本用法\"><a href=\"#1-github-note-taker-调试完成，属性了组织开发react的方式和-react-router的基本用法\" class=\"headerlink\" title=\"1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法\"></a>1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法</h3><h3 id=\"2-React-router路由实践\"><a href=\"#2-React-router路由实践\" class=\"headerlink\" title=\"2. React-router路由实践\"></a>2. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-router%E8%B7%AF%E7%94%B1%E5%AE%9E%E8%B7%B5.html\">React-router路由实践</a></h3><blockquote>\n<p>明天coding 下</p>\n</blockquote>\n<h3 id=\"3-React-AJAX的最佳实践\"><a href=\"#3-React-AJAX的最佳实践\" class=\"headerlink\" title=\"3. React-AJAX的最佳实践\"></a>3. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-AJAX%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html\">React-AJAX的最佳实践</a></h3><blockquote>\n<p>作者并没写完，只是给提纲！</p>\n</blockquote>\n<h2 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h2><h3 id=\"1-coding-React-router路由实践\"><a href=\"#1-coding-React-router路由实践\" class=\"headerlink\" title=\"1. coding React-router路由实践\"></a>1. coding <a href=\"link\">React-router路由实践</a></h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">invariant.js:39 Uncaught Invariant Violation: findComponentRoot(..., .0): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a &lt;tbody&gt; when using tables, nesting tags like &lt;form&gt;, &lt;p&gt;, or &lt;a&gt;, or using non-SVG elements <span class=\"hljs-keyword\">in</span> an &lt;svg&gt; parent. Try inspecting the child nodes of the element with React ID ``.<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h2><p>看了redux 入门，进入公司项目</p>\n<h2 id=\"2016-07-27\"><a href=\"#2016-07-27\" class=\"headerlink\" title=\"2016-07-27\"></a>2016-07-27</h2><p>继续吧！期望这个星期，这个月底能完成 hackathon-blog 项目，现在先把redux熟悉</p>\n<h2 id=\"2016-08-02\"><a href=\"#2016-08-02\" class=\"headerlink\" title=\"2016-08-02\"></a>2016-08-02</h2><p>redux 入门的todo demo 调试完成，next: Middleware</p>\n<p><a href=\"https://github.com/lewis617/react-redux-tutorial#reactredux%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B\">React+Redux系列教程</a></p>\n<h2 id=\"2016-08-04\"><a href=\"#2016-08-04\" class=\"headerlink\" title=\"2016-08-04\"></a>2016-08-04</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21386862?refer=purerender\">React实践 - Component Generator</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20597452\">redux middleware 详解</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><a href=\"/2016/06/06/hackathon-blog/\">上一篇</a>是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: <a href=\"http://guoyongfeng.github.io/idoc/index.html\">React课程学习</a>, 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章</p>","more":"<h2 id=\"2016-06-29\"><a href=\"#2016-06-29\" class=\"headerlink\" title=\"2016-06-29\"></a>2016-06-29</h2><h3 id=\"1-Error\"><a href=\"#1-Error\" class=\"headerlink\" title=\"1. Error:\"></a>1. Error:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">Hash: 396f0bfb9d565b6f60f0<br>Version: webpack 1.13.1<br>Time: 52ms<br>   [0] ./src/index.js 0 bytes [built] [failed]<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/index.js<br>Module parse failed: F:\\Users\\react\\webpack-demo\\src\\index.js Unexpected token (9:6)<br>You may need an appropriate loader to handle this file <span class=\"hljs-built_in\">type</span>.<br>SyntaxError: Unexpected token (9:6)<br>    at Parser.pp.raise (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:923:13)<br>    at Parser.pp.unexpected (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1490:8)<br>    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:333:12)<br>    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)<br>    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)<br>    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)<br>    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)<br>    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)<br>    at Parser.pp.parseParenAndDistinguishExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:376:28)<br>    at Parser.pp.parseExprAtom (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:307:19)<br>    at Parser.pp.parseExprSubscripts (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:228:19)<br>    at Parser.pp.parseMaybeUnary (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:207:17)<br>    at Parser.pp.parseExprOps (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:154:19)<br>    at Parser.pp.parseMaybeConditional (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:136:19)<br>    at Parser.pp.parseMaybeAssign (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:112:19)<br>    at Parser.pp.parseExpression (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:88:19)<br>    at Parser.pp.parseReturnStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1872:26)<br>    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1737:19)<br>    at Parser.pp.parseBlock (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2009:21)<br>    at Parser.pp.parseFunctionBody (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:610:22)<br>    at Parser.pp.parseMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:579:8)<br>    at Parser.pp.parseClassMethod (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2155:23)<br>    at Parser.pp.parseClass (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:2140:10)<br>    at Parser.pp.parseStatement (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1733:19)<br>    at Parser.pp.parseTopLevel (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1666:21)<br>    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:1632:17)<br>    at Object.parse (F:\\Users\\react\\webpack-demo\\node_modules\\acorn\\dist\\acorn.js:885:44)<br>    at Parser.parse (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\Parser.js:902:15)<br>    at DependenciesBlock.&lt;anonymous&gt; (F:\\Users\\react\\webpack-demo\\node_modules\\webpack\\lib\\NormalModule.js:104:16)<br>    at DependenciesBlock.onModuleBuild (F:\\Users\\react\\webpack-demo\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:310:10)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"原因是，-loaders-中-test-匹配正则错误-没有引号，-js\"><a href=\"#原因是，-loaders-中-test-匹配正则错误-没有引号，-js\" class=\"headerlink\" title=\"原因是， loaders 中 test 匹配正则错误, 没有引号，/\\.js$/ \"></a>原因是， loaders 中 test 匹配正则错误, 没有引号，<code>/\\.js$/ </code></h4><h2 id=\"2016-06-30\"><a href=\"#2016-06-30\" class=\"headerlink\" title=\"2016-06-30\"></a>2016-06-30</h2><h3 id=\"1-webpack-加速！\"><a href=\"#1-webpack-加速！\" class=\"headerlink\" title=\"1. webpack 加速！\"></a>1. webpack 加速！</h3><p>看到了 webpack resolve 模块了，添加了alias， extensions 感觉编译速度并不明显， 从7s多到5s多的样子，只是基本的模块，并没有添加逻辑代码。可是在loaders 中.js 的解析中添加了 <code>exclude: path.resolve(__dirname, &#39;node_modules&#39;)</code> 之后编译速度进入1s 内982ms</p>\n<h3 id=\"2-webpack-添加resolve-和-解析样式文件的-loaders-style-loader-css-loader-less-loader-，报错信息：Uncaught-ReferenceError-require-is-not-defined\"><a href=\"#2-webpack-添加resolve-和-解析样式文件的-loaders-style-loader-css-loader-less-loader-，报错信息：Uncaught-ReferenceError-require-is-not-defined\" class=\"headerlink\" title=\"2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：Uncaught ReferenceError: require is not defined\"></a>2. webpack 添加resolve 和 解析样式文件的 loaders: [style-loader, css-loader, less-loader] ，报错信息：<code>Uncaught ReferenceError: require is not defined</code></h3><p>搜索相关的保存信息<code>Uncaught ReferenceError: require is not defined</code> 得到的相关 参考文章： <a href=\"https://segmentfault.com/q/1010000004429238\">webpack打包react-dom后，浏览器报require is not defined错误?</a> </p>\n<blockquote>\n<p>问题解决，是我将react-dom加入到webpack的noparse 中了，删掉即可！</p>\n</blockquote>\n<p>同样删掉后，并不能解决问题，只好一步步注释回退到原来的状态，检测出错的模块，最后还是检测到是 webpack noParse的问题，不过webpack-dev-server 命令前要先webpack 下打包文件到build目录下，前面一直掉到这个坑里了！</p>\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/Webpack%E5%9F%BA%E7%A1%80.html#t77.%E8%A7%A3%E6%9E%90%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6\">Webpack基础: 7.解析样式文件</a>，还没有实现热更新功能，所以修改less文件需要重新webpack才能看到结果</p>\n<h3 id=\"3-react-hot-amp-webpack-dev-server-–inline-–hot-配置热更新是报错！\"><a href=\"#3-react-hot-amp-webpack-dev-server-–inline-–hot-配置热更新是报错！\" class=\"headerlink\" title=\"3. react-hot &amp; webpack-dev-server –inline –hot 配置热更新是报错！\"></a>3. react-hot &amp; webpack-dev-server –inline –hot 配置热更新是报错！</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ERROR <span class=\"hljs-keyword\">in</span> ./src/index.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src<br> @ ./src/index.js 1:301-332<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/container/App.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src\\container<br> @ ./src/container/App.js 1:301-332<br><br>ERROR <span class=\"hljs-keyword\">in</span> ./src/components/Button/Button.js<br>Module not found: Error: Cannot resolve <span class=\"hljs-string\">&#x27;file&#x27;</span> or <span class=\"hljs-string\">&#x27;directory&#x27;</span> F:\\Users\\react\\webpack-demo\\node_modules\\react\\dist\\react.js/lib/ReactMount <span class=\"hljs-keyword\">in</span> F:\\Users\\react\\webpack-demo\\src\\components\\Button<br> @ ./src/components/Button/Button.js 1:301-332<br></code></pre></td></tr></table></figure>\n\n<p>注释掉 webpack 中的resolve 的alias 模块 这样就可以解析react &amp; react-dom 模块 通过react-hot。webpack 编译通过，可以运行<code>npm run dev</code>，浏览器打开后报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">[HMR] Waiting <span class=\"hljs-keyword\">for</span> update signal from WDS...<br>abstract-xhr.js:132 GET http://localhost:3000/sockjs-node/info?t=1467279375252 net::ERR_CONNECTION_REFUSED<br>client:70 [WDS] Disconnected!<br></code></pre></td></tr></table></figure>\n<p>修改 webpack-dev-server 的port 为3000后解决，端口号要一致。 不过并没有实现热更新功能（编辑器修改，浏览器预览效果）</p>\n<p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/%E4%BD%BF%E7%94%A8Webpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E6%80%81%E5%B7%A5%E4%BD%9C%E6%B5%81.html\">使用Webpack搭建开发环境工作流</a> 关于自动刷新， 和 HMR 的配置 关于 <a href=\"http://www.jianshu.com/p/941bfaf13be1\">WEBPACK DEV SERVER</a> 关于webpack-dev-server 的说明挺详细的，提到了关于热更新不起作用的 原因 <a href=\"https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#the-following-modules-couldnt-be-hot-updated-they-would-need-a-full-reload\">The following modules couldn’t be hot updated: (They would need a full reload!)</a></p>\n<blockquote>\n<ol>\n<li>webpack dev server 中提到了前后端配合的相关配置</li>\n<li>troubleshooting.md 各种配置报错的解决办法！</li>\n</ol>\n</blockquote>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>webpack 中devSever 配置中把，publicPath 去掉就OK，就可以了，</p>\n<blockquote>\n<p>loader 中关于js 的loader配置改成了loaders 后面是数组，如果loader 通过! 链接的话也可以</p>\n</blockquote>\n<h2 id=\"2016-07-04\"><a href=\"#2016-07-04\" class=\"headerlink\" title=\"2016-07-04\"></a>2016-07-04</h2><h3 id=\"1-React-Router-使用教程\"><a href=\"#1-React-Router-使用教程\" class=\"headerlink\" title=\"1. React Router 使用教程\"></a>1. <a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html\">React Router 使用教程</a></h3><blockquote>\n<p>入门挺不错的！</p>\n</blockquote>\n<h3 id=\"2-React-Mixin-的前世今生\"><a href=\"#2-React-Mixin-的前世今生\" class=\"headerlink\" title=\"2. React Mixin 的前世今生\"></a>2. <a href=\"https://zhuanlan.zhihu.com/p/20361937\">React Mixin 的前世今生</a></h3><blockquote>\n<p>有点高深的内容，可以完全没读懂啊！</p>\n</blockquote>\n<h3 id=\"3-github-notetaker应用开发\"><a href=\"#3-github-notetaker应用开发\" class=\"headerlink\" title=\"3. github-notetaker应用开发\"></a>3. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html\">github-notetaker应用开发</a></h3><h4 id=\"7-接入真实的数据\"><a href=\"#7-接入真实的数据\" class=\"headerlink\" title=\"7.接入真实的数据\"></a><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/github-notetaker%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html#t97.%E6%8E%A5%E5%85%A5%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%B0%E6%8D%AE\">7.接入真实的数据</a></h4><blockquote>\n<p>用到了mixin</p>\n</blockquote>\n<h2 id=\"2016-07-05\"><a href=\"#2016-07-05\" class=\"headerlink\" title=\"2016-07-05\"></a>2016-07-05</h2><p>github-note-taker 中使用了firebase ，直接写代码并没有运行，查看了 <a href=\"https://console.firebase.google.com/\">firebase</a>官网，已经 <a href=\"https://github.com/firebase/reactfire/blob/master/docs/guide.md\">ReactFire Guild</a></p>\n<blockquote>\n<p>最终没有使用 firebase 通过 state 中的notes mock了相应的数据</p>\n</blockquote>\n<h3 id=\"1-github-note-taker-调试完成，属性了组织开发react的方式和-react-router的基本用法\"><a href=\"#1-github-note-taker-调试完成，属性了组织开发react的方式和-react-router的基本用法\" class=\"headerlink\" title=\"1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法\"></a>1. github-note-taker 调试完成，属性了组织开发react的方式和 react-router的基本用法</h3><h3 id=\"2-React-router路由实践\"><a href=\"#2-React-router路由实践\" class=\"headerlink\" title=\"2. React-router路由实践\"></a>2. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-router%E8%B7%AF%E7%94%B1%E5%AE%9E%E8%B7%B5.html\">React-router路由实践</a></h3><blockquote>\n<p>明天coding 下</p>\n</blockquote>\n<h3 id=\"3-React-AJAX的最佳实践\"><a href=\"#3-React-AJAX的最佳实践\" class=\"headerlink\" title=\"3. React-AJAX的最佳实践\"></a>3. <a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React-AJAX%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html\">React-AJAX的最佳实践</a></h3><blockquote>\n<p>作者并没写完，只是给提纲！</p>\n</blockquote>\n<h2 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h2><h3 id=\"1-coding-React-router路由实践\"><a href=\"#1-coding-React-router路由实践\" class=\"headerlink\" title=\"1. coding React-router路由实践\"></a>1. coding <a href=\"link\">React-router路由实践</a></h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">invariant.js:39 Uncaught Invariant Violation: findComponentRoot(..., .0): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a &lt;tbody&gt; when using tables, nesting tags like &lt;form&gt;, &lt;p&gt;, or &lt;a&gt;, or using non-SVG elements <span class=\"hljs-keyword\">in</span> an &lt;svg&gt; parent. Try inspecting the child nodes of the element with React ID ``.<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h2><p>看了redux 入门，进入公司项目</p>\n<h2 id=\"2016-07-27\"><a href=\"#2016-07-27\" class=\"headerlink\" title=\"2016-07-27\"></a>2016-07-27</h2><p>继续吧！期望这个星期，这个月底能完成 hackathon-blog 项目，现在先把redux熟悉</p>\n<h2 id=\"2016-08-02\"><a href=\"#2016-08-02\" class=\"headerlink\" title=\"2016-08-02\"></a>2016-08-02</h2><p>redux 入门的todo demo 调试完成，next: Middleware</p>\n<p><a href=\"https://github.com/lewis617/react-redux-tutorial#reactredux%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B\">React+Redux系列教程</a></p>\n<h2 id=\"2016-08-04\"><a href=\"#2016-08-04\" class=\"headerlink\" title=\"2016-08-04\"></a>2016-08-04</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21386862?refer=purerender\">React实践 - Component Generator</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20597452\">redux middleware 详解</a></li>\n</ol>"},{"title":"Typescript cheatSheet","date":"2018-12-31T09:34:14.000Z","_content":"\n想学 Typescript 好久啦，一直没行动，从看过的文章写个 cheatSheet 开始吧，以后用到的时候好快速复习！\n\n<!-- more -->\n\n一直想学，就一直，一直，一直想，并没学！双十一耗的掘金小册的羊毛，买了本关于Typescript的小册： [深入浅出TypeScript：从基础知识到类型编程](https://juejin.im/book/5da08714518825520e6bb810) ，想着学起来吧，希望不是资料收集癖犯了！\n\n## Reference\n\n### 电子书\n\n1. [深入浅出TypeScript：从基础知识到类型编程](https://juejin.im/book/5da08714518825520e6bb810)\n2. [《浅谈 TypeScript》](https://welearnmore.gitbook.io/typescript-book/)\n3. [TypeScript Deep Dive 中文版](https://jkchao.github.io/typescript-book-chinese/)  翻译 《深入理解TypeScript》\n\n### 视频\n\n1. [TypeScript 精通指南](<https://nodelover.me/course/ts-basic>)\n\n### 文章\n\n1. [Awesome TypeScript](https://github.com/semlinker/awesome-typescript)  Typescipt文章的收集\n2. [黄奕老师-ts重构axios文档](https://github.com/Suremotoo/ts-axios-doc)\n3. [TypeScript 重构 Axios 全攻略](https://github.com/leer0911/myXHR/blob/master/doc/README.md)\n4. [[译]axios 是如何封装 HTTP 请求的](<https://juejin.im/post/5d906269f265da5ba7451b02>)\n5. [TypeScript 从听说到入门（上篇）](https://juejin.im/post/5ce0d562f265da1bc23f4813)\n6. [TypeScript 从听说到入门（下篇）](https://juejin.im/post/5ce751aef265da1bbc6faf30)\n7. [Typescript: How to convert a Page-Based REST API into a data stream](<https://neuroforge.de/typescript-how-to-convert-a-page-based-rest-api-to-a-data-stream/>)\n","source":"_posts/Typescript-cheatSheet.md","raw":"---\ntitle: Typescript cheatSheet\ndate: 2018-12-31 17:34:14\ntags: [Typescript, CheatSheet, beginer]\ncategories: [F2E]\n---\n\n想学 Typescript 好久啦，一直没行动，从看过的文章写个 cheatSheet 开始吧，以后用到的时候好快速复习！\n\n<!-- more -->\n\n一直想学，就一直，一直，一直想，并没学！双十一耗的掘金小册的羊毛，买了本关于Typescript的小册： [深入浅出TypeScript：从基础知识到类型编程](https://juejin.im/book/5da08714518825520e6bb810) ，想着学起来吧，希望不是资料收集癖犯了！\n\n## Reference\n\n### 电子书\n\n1. [深入浅出TypeScript：从基础知识到类型编程](https://juejin.im/book/5da08714518825520e6bb810)\n2. [《浅谈 TypeScript》](https://welearnmore.gitbook.io/typescript-book/)\n3. [TypeScript Deep Dive 中文版](https://jkchao.github.io/typescript-book-chinese/)  翻译 《深入理解TypeScript》\n\n### 视频\n\n1. [TypeScript 精通指南](<https://nodelover.me/course/ts-basic>)\n\n### 文章\n\n1. [Awesome TypeScript](https://github.com/semlinker/awesome-typescript)  Typescipt文章的收集\n2. [黄奕老师-ts重构axios文档](https://github.com/Suremotoo/ts-axios-doc)\n3. [TypeScript 重构 Axios 全攻略](https://github.com/leer0911/myXHR/blob/master/doc/README.md)\n4. [[译]axios 是如何封装 HTTP 请求的](<https://juejin.im/post/5d906269f265da5ba7451b02>)\n5. [TypeScript 从听说到入门（上篇）](https://juejin.im/post/5ce0d562f265da1bc23f4813)\n6. [TypeScript 从听说到入门（下篇）](https://juejin.im/post/5ce751aef265da1bbc6faf30)\n7. [Typescript: How to convert a Page-Based REST API into a data stream](<https://neuroforge.de/typescript-how-to-convert-a-page-based-rest-api-to-a-data-stream/>)\n","slug":"Typescript-cheatSheet","published":1,"updated":"2022-01-20T04:12:09.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0l00077uo0c32q9qyk","content":"<p>想学 Typescript 好久啦，一直没行动，从看过的文章写个 cheatSheet 开始吧，以后用到的时候好快速复习！</p>\n<span id=\"more\"></span>\n\n<p>一直想学，就一直，一直，一直想，并没学！双十一耗的掘金小册的羊毛，买了本关于Typescript的小册： <a href=\"https://juejin.im/book/5da08714518825520e6bb810\">深入浅出TypeScript：从基础知识到类型编程</a> ，想着学起来吧，希望不是资料收集癖犯了！</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h3 id=\"电子书\"><a href=\"#电子书\" class=\"headerlink\" title=\"电子书\"></a>电子书</h3><ol>\n<li><a href=\"https://juejin.im/book/5da08714518825520e6bb810\">深入浅出TypeScript：从基础知识到类型编程</a></li>\n<li><a href=\"https://welearnmore.gitbook.io/typescript-book/\">《浅谈 TypeScript》</a></li>\n<li><a href=\"https://jkchao.github.io/typescript-book-chinese/\">TypeScript Deep Dive 中文版</a>  翻译 《深入理解TypeScript》</li>\n</ol>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ol>\n<li><a href=\"https://nodelover.me/course/ts-basic\">TypeScript 精通指南</a></li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ol>\n<li><a href=\"https://github.com/semlinker/awesome-typescript\">Awesome TypeScript</a>  Typescipt文章的收集</li>\n<li><a href=\"https://github.com/Suremotoo/ts-axios-doc\">黄奕老师-ts重构axios文档</a></li>\n<li><a href=\"https://github.com/leer0911/myXHR/blob/master/doc/README.md\">TypeScript 重构 Axios 全攻略</a></li>\n<li><a href=\"https://juejin.im/post/5d906269f265da5ba7451b02\">[译]axios 是如何封装 HTTP 请求的</a></li>\n<li><a href=\"https://juejin.im/post/5ce0d562f265da1bc23f4813\">TypeScript 从听说到入门（上篇）</a></li>\n<li><a href=\"https://juejin.im/post/5ce751aef265da1bbc6faf30\">TypeScript 从听说到入门（下篇）</a></li>\n<li><a href=\"https://neuroforge.de/typescript-how-to-convert-a-page-based-rest-api-to-a-data-stream/\">Typescript: How to convert a Page-Based REST API into a data stream</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>想学 Typescript 好久啦，一直没行动，从看过的文章写个 cheatSheet 开始吧，以后用到的时候好快速复习！</p>","more":"<p>一直想学，就一直，一直，一直想，并没学！双十一耗的掘金小册的羊毛，买了本关于Typescript的小册： <a href=\"https://juejin.im/book/5da08714518825520e6bb810\">深入浅出TypeScript：从基础知识到类型编程</a> ，想着学起来吧，希望不是资料收集癖犯了！</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><h3 id=\"电子书\"><a href=\"#电子书\" class=\"headerlink\" title=\"电子书\"></a>电子书</h3><ol>\n<li><a href=\"https://juejin.im/book/5da08714518825520e6bb810\">深入浅出TypeScript：从基础知识到类型编程</a></li>\n<li><a href=\"https://welearnmore.gitbook.io/typescript-book/\">《浅谈 TypeScript》</a></li>\n<li><a href=\"https://jkchao.github.io/typescript-book-chinese/\">TypeScript Deep Dive 中文版</a>  翻译 《深入理解TypeScript》</li>\n</ol>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ol>\n<li><a href=\"https://nodelover.me/course/ts-basic\">TypeScript 精通指南</a></li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ol>\n<li><a href=\"https://github.com/semlinker/awesome-typescript\">Awesome TypeScript</a>  Typescipt文章的收集</li>\n<li><a href=\"https://github.com/Suremotoo/ts-axios-doc\">黄奕老师-ts重构axios文档</a></li>\n<li><a href=\"https://github.com/leer0911/myXHR/blob/master/doc/README.md\">TypeScript 重构 Axios 全攻略</a></li>\n<li><a href=\"https://juejin.im/post/5d906269f265da5ba7451b02\">[译]axios 是如何封装 HTTP 请求的</a></li>\n<li><a href=\"https://juejin.im/post/5ce0d562f265da1bc23f4813\">TypeScript 从听说到入门（上篇）</a></li>\n<li><a href=\"https://juejin.im/post/5ce751aef265da1bbc6faf30\">TypeScript 从听说到入门（下篇）</a></li>\n<li><a href=\"https://neuroforge.de/typescript-how-to-convert-a-page-based-rest-api-to-a-data-stream/\">Typescript: How to convert a Page-Based REST API into a data stream</a></li>\n</ol>"},{"title":"docker入门","date":"2016-04-25T13:07:46.000Z","_content":"docker 入门使用\n<!-- more -->\n# 入门资料\n\n## 遇到问题\n\n  1. `Error starting daemon: open /var/run/docker.pid: permission denie`\n\n  > 运行任何docker 相关的命令都提示： `FATA[0000] Cannot connect to the Docker daemon. Is 'docker -d' running on this host?` ，按提示输入`docker -d'后不 提示`Error starting daemon: open /var/run/docker.pid: permission denie`。\n\n  ** 解决办法 **\n\n  `boot2docker stop & boot2docker start` 重新进入后恢复正常，\n\n  2. `docker pull redis:2.8.19` 是一直报错：\n\n  > `8c37ff647cf2: Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF\nError pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF`\n\n## 2016-04-27 16:58\n\n昨天系统莫名其妙的升级到Windows10 回退到Windows 7 后又各种问题，直接重置了一天系统，今天总算能用了（白白浪费一天时间）\n\n由于重装系统的缘故，docker也升级到了 1.9 直接使用Docker Toolbox， 使用上和boot2docker 是有差别的的，通过docker terminal快捷进入，就可以直接docker images 查看了，操作了\n\n** 疑问 ** `docker-machine ssh default` 是做什么的？管理主机？\n\n1. docker 参数 -d\n\t> docker run指定的命令如果不是那些一直挂起的命令（比如运行top，不断echo），就是会自动退出的。-d命令是设置detach为true，根据官方的文档，意思是让这个命令在后台运行，但并不是一直运行（我们在一个正常的Linux Terminal中运行/bin/bash，运行完了也就完了，不会一直挂着等待响应的，所以确实没办法用daemon方式来跑/bin/bash）。\n\n2. docker quick terminal 进入的是MINGW64 所以window 盘符转换 D: -> /d\n\n3. [配置Docker加速器](https://dashboard.daocloud.io/mirror)\n\t配置docker toolbox 的`--registry-mirror`，速度瞬间上去了\n\n\n## 2016-04-28 18:21\n\n1. [Docker —— 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/index.html) 【电子书】\n2. [Docker 中文教程](http://wiki.jikexueyuan.com/project/docker/)\n3. [如何将nodeclub构建成Docker镜像](http://www.csdn.net/article/2015-07-21/2825268)","source":"_posts/docker入门.md","raw":"---\ntitle: docker入门\ndate: 2016-04-25 21:07:46\ntags: [docker]\ncategories: [docker]\n---\ndocker 入门使用\n<!-- more -->\n# 入门资料\n\n## 遇到问题\n\n  1. `Error starting daemon: open /var/run/docker.pid: permission denie`\n\n  > 运行任何docker 相关的命令都提示： `FATA[0000] Cannot connect to the Docker daemon. Is 'docker -d' running on this host?` ，按提示输入`docker -d'后不 提示`Error starting daemon: open /var/run/docker.pid: permission denie`。\n\n  ** 解决办法 **\n\n  `boot2docker stop & boot2docker start` 重新进入后恢复正常，\n\n  2. `docker pull redis:2.8.19` 是一直报错：\n\n  > `8c37ff647cf2: Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF\nError pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF`\n\n## 2016-04-27 16:58\n\n昨天系统莫名其妙的升级到Windows10 回退到Windows 7 后又各种问题，直接重置了一天系统，今天总算能用了（白白浪费一天时间）\n\n由于重装系统的缘故，docker也升级到了 1.9 直接使用Docker Toolbox， 使用上和boot2docker 是有差别的的，通过docker terminal快捷进入，就可以直接docker images 查看了，操作了\n\n** 疑问 ** `docker-machine ssh default` 是做什么的？管理主机？\n\n1. docker 参数 -d\n\t> docker run指定的命令如果不是那些一直挂起的命令（比如运行top，不断echo），就是会自动退出的。-d命令是设置detach为true，根据官方的文档，意思是让这个命令在后台运行，但并不是一直运行（我们在一个正常的Linux Terminal中运行/bin/bash，运行完了也就完了，不会一直挂着等待响应的，所以确实没办法用daemon方式来跑/bin/bash）。\n\n2. docker quick terminal 进入的是MINGW64 所以window 盘符转换 D: -> /d\n\n3. [配置Docker加速器](https://dashboard.daocloud.io/mirror)\n\t配置docker toolbox 的`--registry-mirror`，速度瞬间上去了\n\n\n## 2016-04-28 18:21\n\n1. [Docker —— 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/index.html) 【电子书】\n2. [Docker 中文教程](http://wiki.jikexueyuan.com/project/docker/)\n3. [如何将nodeclub构建成Docker镜像](http://www.csdn.net/article/2015-07-21/2825268)","slug":"docker入门","published":1,"updated":"2022-01-20T04:12:09.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0n00097uo0bd2h0mof","content":"<p>docker 入门使用</p>\n<span id=\"more\"></span>\n<h1 id=\"入门资料\"><a href=\"#入门资料\" class=\"headerlink\" title=\"入门资料\"></a>入门资料</h1><h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><ol>\n<li><code>Error starting daemon: open /var/run/docker.pid: permission denie</code></li>\n</ol>\n<blockquote>\n<p>运行任何docker 相关的命令都提示： <code>FATA[0000] Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?</code> ，按提示输入<code>docker -d&#39;后不 提示</code>Error starting daemon: open /var/run/docker.pid: permission denie`。</p>\n</blockquote>\n<p>  ** 解决办法 **</p>\n<p>  <code>boot2docker stop &amp; boot2docker start</code> 重新进入后恢复正常，</p>\n<ol start=\"2\">\n<li><code>docker pull redis:2.8.19</code> 是一直报错：</li>\n</ol>\n<blockquote>\n<p><code>8c37ff647cf2: Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF</code></p>\n</blockquote>\n<h2 id=\"2016-04-27-16-58\"><a href=\"#2016-04-27-16-58\" class=\"headerlink\" title=\"2016-04-27 16:58\"></a>2016-04-27 16:58</h2><p>昨天系统莫名其妙的升级到Windows10 回退到Windows 7 后又各种问题，直接重置了一天系统，今天总算能用了（白白浪费一天时间）</p>\n<p>由于重装系统的缘故，docker也升级到了 1.9 直接使用Docker Toolbox， 使用上和boot2docker 是有差别的的，通过docker terminal快捷进入，就可以直接docker images 查看了，操作了</p>\n<p>** 疑问 ** <code>docker-machine ssh default</code> 是做什么的？管理主机？</p>\n<ol>\n<li><p>docker 参数 -d</p>\n<blockquote>\n<p>docker run指定的命令如果不是那些一直挂起的命令（比如运行top，不断echo），就是会自动退出的。-d命令是设置detach为true，根据官方的文档，意思是让这个命令在后台运行，但并不是一直运行（我们在一个正常的Linux Terminal中运行/bin/bash，运行完了也就完了，不会一直挂着等待响应的，所以确实没办法用daemon方式来跑/bin/bash）。</p>\n</blockquote>\n</li>\n<li><p>docker quick terminal 进入的是MINGW64 所以window 盘符转换 D: -&gt; /d</p>\n</li>\n<li><p><a href=\"https://dashboard.daocloud.io/mirror\">配置Docker加速器</a><br> 配置docker toolbox 的<code>--registry-mirror</code>，速度瞬间上去了</p>\n</li>\n</ol>\n<h2 id=\"2016-04-28-18-21\"><a href=\"#2016-04-28-18-21\" class=\"headerlink\" title=\"2016-04-28 18:21\"></a>2016-04-28 18:21</h2><ol>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/content/index.html\">Docker —— 从入门到实践</a> 【电子书】</li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/docker/\">Docker 中文教程</a></li>\n<li><a href=\"http://www.csdn.net/article/2015-07-21/2825268\">如何将nodeclub构建成Docker镜像</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>docker 入门使用</p>","more":"<h1 id=\"入门资料\"><a href=\"#入门资料\" class=\"headerlink\" title=\"入门资料\"></a>入门资料</h1><h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><ol>\n<li><code>Error starting daemon: open /var/run/docker.pid: permission denie</code></li>\n</ol>\n<blockquote>\n<p>运行任何docker 相关的命令都提示： <code>FATA[0000] Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?</code> ，按提示输入<code>docker -d&#39;后不 提示</code>Error starting daemon: open /var/run/docker.pid: permission denie`。</p>\n</blockquote>\n<p>  ** 解决办法 **</p>\n<p>  <code>boot2docker stop &amp; boot2docker start</code> 重新进入后恢复正常，</p>\n<ol start=\"2\">\n<li><code>docker pull redis:2.8.19</code> 是一直报错：</li>\n</ol>\n<blockquote>\n<p><code>8c37ff647cf2: Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF Error pulling image (2.8.19) from redis, Untar re-exec error: exit status 1: output: unexpected EOF</code></p>\n</blockquote>\n<h2 id=\"2016-04-27-16-58\"><a href=\"#2016-04-27-16-58\" class=\"headerlink\" title=\"2016-04-27 16:58\"></a>2016-04-27 16:58</h2><p>昨天系统莫名其妙的升级到Windows10 回退到Windows 7 后又各种问题，直接重置了一天系统，今天总算能用了（白白浪费一天时间）</p>\n<p>由于重装系统的缘故，docker也升级到了 1.9 直接使用Docker Toolbox， 使用上和boot2docker 是有差别的的，通过docker terminal快捷进入，就可以直接docker images 查看了，操作了</p>\n<p>** 疑问 ** <code>docker-machine ssh default</code> 是做什么的？管理主机？</p>\n<ol>\n<li><p>docker 参数 -d</p>\n<blockquote>\n<p>docker run指定的命令如果不是那些一直挂起的命令（比如运行top，不断echo），就是会自动退出的。-d命令是设置detach为true，根据官方的文档，意思是让这个命令在后台运行，但并不是一直运行（我们在一个正常的Linux Terminal中运行/bin/bash，运行完了也就完了，不会一直挂着等待响应的，所以确实没办法用daemon方式来跑/bin/bash）。</p>\n</blockquote>\n</li>\n<li><p>docker quick terminal 进入的是MINGW64 所以window 盘符转换 D: -&gt; /d</p>\n</li>\n<li><p><a href=\"https://dashboard.daocloud.io/mirror\">配置Docker加速器</a><br> 配置docker toolbox 的<code>--registry-mirror</code>，速度瞬间上去了</p>\n</li>\n</ol>\n<h2 id=\"2016-04-28-18-21\"><a href=\"#2016-04-28-18-21\" class=\"headerlink\" title=\"2016-04-28 18:21\"></a>2016-04-28 18:21</h2><ol>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/content/index.html\">Docker —— 从入门到实践</a> 【电子书】</li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/docker/\">Docker 中文教程</a></li>\n<li><a href=\"http://www.csdn.net/article/2015-07-21/2825268\">如何将nodeclub构建成Docker镜像</a></li>\n</ol>"},{"title":"hackathon blog","date":"2016-06-06T08:07:29.000Z","_content":"\n报名参加了 [[北京] 6月4号，5号 项目实战之博客系统](https://cnodejs.org/topic/5750d47c491b9c4f36910fe9)，虽然没能按时完成项目，但是还是收获很多的，在这里总结下，同事作为 [hackathon-blog](https://github.com/sumaolin/hackathon-blog) 的readme ，记录下遇到的坑坑坑……\n\n<!-- more -->\n\n# hackathon-blog\n\n参加活动 ： [博客系统实践周末Hackathon](https://cnodejs.org/topic/5750d47c491b9c4f36910fe9)\n\n\n## 2016-06-04\n\n### 遇到问题\n\n#### 1. `express不是内部或外部命令`\n\n  最新express4.0版本中将命令工具分家出来了(项目地址:https://github.com/expressjs/generator)所以我们还需要安装一个命令工具,命令如下:\n  `npm install -g express-generator`\n\n#### 2. passport & passport-local 的认证问题\n\n##### 参考： \n  1. [Easy Node Authentication: Setup and Local](https://scotch.io/tutorials/easy-node-authentication-setup-and-local)\n\n  2. [express-passport-quick-getstarted](https://github.com/rockq-org/express-passport-quick-getstarted) \n\n  3. [使用passportjs进行登录验证](https://segmentfault.com/a/1190000002926232#articleHeader0)\n\n  4. [Express结合Passport实现登陆认证](http://blog.fens.me/nodejs-express-passport/)\n\n  5. [passport doc](http://passportjs.org/docs) 官方文档，先看了几个例子，看完官方文档，豁然开朗了，使用了不同的方法去通过认证\n\n#### 3. `install phantomjs error`\n\n  当时没遇到这个问题，当时的网络自带翻墙功能，回来再次安装的时候报错，无法安装，[参考](https://github.com/rockq-org/hackathon-blog/issues/13) ，就可以解决了\n\n\n## 2016-06-05\n\n### [react](https://facebook.github.io/react/index.html) & [redux](https://github.com/reactjs/redux) & [react-router](https://github.com/reactjs/react-router)\n\n\n### 相关工具\n\n  1. [redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension)\n  2. [react-devtools](https://github.com/facebook/react-devtools)\n\n### 资料\n\n  1. [React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial)\n  2. [Redux 中文文档](http://cn.redux.js.org/)\n  3. [文档收集](https://github.com/icefox0801/JSErrorMonitor#应用的框架和库)\n\n## 2016-06-06\n\n  两天的 hackathon 活动，感觉到自己的不足，要恶补下自己的基础知识了，首先完成这个blog 的认为\n\n  1. passport-local 认证     【** 2016-06-08 18:04:17 ** 完成】\n  2. react & redux 登录注册页面\n  3. blog 编辑器\n  4. blog 列表（编辑删除），tag 功能！\n\n## 2016-06-07\n\n  [The Little MongoDB Book  中文版 - v1.0](https://github.com/ilivebox/the-little-mongodb-book) 【介绍的很全面，很适合入门！】\n\n## 2016-06-08 \n\n### 疑问\n\n  1. chrome plugin Postman 中 body 类型： form-data， x-www-form-urlencoded， raw， binary 的疑问区别\n  > 在hackathon-blog 活动中 推荐使用的postman 并且@hain 演示推荐了 raw 的方式提交数据，回来自己再弄，可是怎么也体检不成功了！一直怀疑自己 body-parse 模块配置有问题，看了下面的文章才豁然开朗\n\n  [四种常见的 POST 提交数据方式](https://github.com/ilivebox/the-little-mongodb-book/blob/master/zh-cn/mongodb.markdown)\n\n  总结下： \n  * x-www-form-urlencoded 是from 表单默认提交方式， `Content-Type: application/x-www-form-urlencoded`\n  * form-data 是form 上传文件 时候用到的方式， `Content-Type: multipart/form-data`\n  * raw 是自定义 提交表单的格式 的，后面可以选择application/json 或者 application/xml 等方式，等同自定义了 `Content-type`的类型；\n  * binary 根据以前上传文件的理解，是最新的通过二进制的形式上传数据\n\n\n## 2016-06-12\n\n  端午前接口按规划的弄好了，按计划改实现react &  redux 登录注册页面了， \n\n## 2016-06-15\n\n### 已读\n\n  1. [【译】展望2016，React.js 最佳实践 (中英对照版)](https://blog.jimmylv.info/2016-01-22-React.js-Best-Practices-for-2016/)\n  > 很概况全面的介绍了下 react 中用到的相关技术\n\n  2. [如何学习React](https://github.com/petehunt/react-howto/blob/master/README-zh.md)\n  > 怎样学习 react 系列\n\n  3. [Redux是如何工作的 (一)](http://chatting8.com/?p=883)\n  > redux 通过管理state 树来管理 react 组件熟的更新\n\n  4. [React知识库内容精选：10篇文章让你迅速了解该框架](http://geek.csdn.net/news/detail/81106)\n\n### 未读\n\n  1. 【系列】[和我一起实战react](http://mulgore.github.io/2016/05/23/follow-react-lesson/)\n\n  2. 【系列】[基于CNodeAPI使用react开发一个完整的Web应用](http://mulgore.github.io/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/)\n\n## 2016-07-06 \n\n  上面是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: [React课程学习](http://guoyongfeng.github.io/idoc/index.html), 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章： [React课程学习](/2016/07/06/React课程学习/)","source":"_posts/hackathon-blog.md","raw":"---\ntitle: hackathon blog\ndate: 2016-06-06 16:07:29\ntags:\ncategories:\n---\n\n报名参加了 [[北京] 6月4号，5号 项目实战之博客系统](https://cnodejs.org/topic/5750d47c491b9c4f36910fe9)，虽然没能按时完成项目，但是还是收获很多的，在这里总结下，同事作为 [hackathon-blog](https://github.com/sumaolin/hackathon-blog) 的readme ，记录下遇到的坑坑坑……\n\n<!-- more -->\n\n# hackathon-blog\n\n参加活动 ： [博客系统实践周末Hackathon](https://cnodejs.org/topic/5750d47c491b9c4f36910fe9)\n\n\n## 2016-06-04\n\n### 遇到问题\n\n#### 1. `express不是内部或外部命令`\n\n  最新express4.0版本中将命令工具分家出来了(项目地址:https://github.com/expressjs/generator)所以我们还需要安装一个命令工具,命令如下:\n  `npm install -g express-generator`\n\n#### 2. passport & passport-local 的认证问题\n\n##### 参考： \n  1. [Easy Node Authentication: Setup and Local](https://scotch.io/tutorials/easy-node-authentication-setup-and-local)\n\n  2. [express-passport-quick-getstarted](https://github.com/rockq-org/express-passport-quick-getstarted) \n\n  3. [使用passportjs进行登录验证](https://segmentfault.com/a/1190000002926232#articleHeader0)\n\n  4. [Express结合Passport实现登陆认证](http://blog.fens.me/nodejs-express-passport/)\n\n  5. [passport doc](http://passportjs.org/docs) 官方文档，先看了几个例子，看完官方文档，豁然开朗了，使用了不同的方法去通过认证\n\n#### 3. `install phantomjs error`\n\n  当时没遇到这个问题，当时的网络自带翻墙功能，回来再次安装的时候报错，无法安装，[参考](https://github.com/rockq-org/hackathon-blog/issues/13) ，就可以解决了\n\n\n## 2016-06-05\n\n### [react](https://facebook.github.io/react/index.html) & [redux](https://github.com/reactjs/redux) & [react-router](https://github.com/reactjs/react-router)\n\n\n### 相关工具\n\n  1. [redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension)\n  2. [react-devtools](https://github.com/facebook/react-devtools)\n\n### 资料\n\n  1. [React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial)\n  2. [Redux 中文文档](http://cn.redux.js.org/)\n  3. [文档收集](https://github.com/icefox0801/JSErrorMonitor#应用的框架和库)\n\n## 2016-06-06\n\n  两天的 hackathon 活动，感觉到自己的不足，要恶补下自己的基础知识了，首先完成这个blog 的认为\n\n  1. passport-local 认证     【** 2016-06-08 18:04:17 ** 完成】\n  2. react & redux 登录注册页面\n  3. blog 编辑器\n  4. blog 列表（编辑删除），tag 功能！\n\n## 2016-06-07\n\n  [The Little MongoDB Book  中文版 - v1.0](https://github.com/ilivebox/the-little-mongodb-book) 【介绍的很全面，很适合入门！】\n\n## 2016-06-08 \n\n### 疑问\n\n  1. chrome plugin Postman 中 body 类型： form-data， x-www-form-urlencoded， raw， binary 的疑问区别\n  > 在hackathon-blog 活动中 推荐使用的postman 并且@hain 演示推荐了 raw 的方式提交数据，回来自己再弄，可是怎么也体检不成功了！一直怀疑自己 body-parse 模块配置有问题，看了下面的文章才豁然开朗\n\n  [四种常见的 POST 提交数据方式](https://github.com/ilivebox/the-little-mongodb-book/blob/master/zh-cn/mongodb.markdown)\n\n  总结下： \n  * x-www-form-urlencoded 是from 表单默认提交方式， `Content-Type: application/x-www-form-urlencoded`\n  * form-data 是form 上传文件 时候用到的方式， `Content-Type: multipart/form-data`\n  * raw 是自定义 提交表单的格式 的，后面可以选择application/json 或者 application/xml 等方式，等同自定义了 `Content-type`的类型；\n  * binary 根据以前上传文件的理解，是最新的通过二进制的形式上传数据\n\n\n## 2016-06-12\n\n  端午前接口按规划的弄好了，按计划改实现react &  redux 登录注册页面了， \n\n## 2016-06-15\n\n### 已读\n\n  1. [【译】展望2016，React.js 最佳实践 (中英对照版)](https://blog.jimmylv.info/2016-01-22-React.js-Best-Practices-for-2016/)\n  > 很概况全面的介绍了下 react 中用到的相关技术\n\n  2. [如何学习React](https://github.com/petehunt/react-howto/blob/master/README-zh.md)\n  > 怎样学习 react 系列\n\n  3. [Redux是如何工作的 (一)](http://chatting8.com/?p=883)\n  > redux 通过管理state 树来管理 react 组件熟的更新\n\n  4. [React知识库内容精选：10篇文章让你迅速了解该框架](http://geek.csdn.net/news/detail/81106)\n\n### 未读\n\n  1. 【系列】[和我一起实战react](http://mulgore.github.io/2016/05/23/follow-react-lesson/)\n\n  2. 【系列】[基于CNodeAPI使用react开发一个完整的Web应用](http://mulgore.github.io/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/)\n\n## 2016-07-06 \n\n  上面是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: [React课程学习](http://guoyongfeng.github.io/idoc/index.html), 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章： [React课程学习](/2016/07/06/React课程学习/)","slug":"hackathon-blog","published":1,"updated":"2022-01-20T04:12:09.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0o000a7uo05lihf3di","content":"<p>报名参加了 <a href=\"https://cnodejs.org/topic/5750d47c491b9c4f36910fe9\">[北京] 6月4号，5号 项目实战之博客系统</a>，虽然没能按时完成项目，但是还是收获很多的，在这里总结下，同事作为 <a href=\"https://github.com/sumaolin/hackathon-blog\">hackathon-blog</a> 的readme ，记录下遇到的坑坑坑……</p>\n<span id=\"more\"></span>\n\n<h1 id=\"hackathon-blog\"><a href=\"#hackathon-blog\" class=\"headerlink\" title=\"hackathon-blog\"></a>hackathon-blog</h1><p>参加活动 ： <a href=\"https://cnodejs.org/topic/5750d47c491b9c4f36910fe9\">博客系统实践周末Hackathon</a></p>\n<h2 id=\"2016-06-04\"><a href=\"#2016-06-04\" class=\"headerlink\" title=\"2016-06-04\"></a>2016-06-04</h2><h3 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h3><h4 id=\"1-express不是内部或外部命令\"><a href=\"#1-express不是内部或外部命令\" class=\"headerlink\" title=\"1. express不是内部或外部命令\"></a>1. <code>express不是内部或外部命令</code></h4><p>  最新express4.0版本中将命令工具分家出来了(项目地址:<a href=\"https://github.com/expressjs/generator)%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7,%E5%91%BD%E4%BB%A4%E5%A6%82%E4%B8%8B\">https://github.com/expressjs/generator)所以我们还需要安装一个命令工具,命令如下</a>:<br>  <code>npm install -g express-generator</code></p>\n<h4 id=\"2-passport-amp-passport-local-的认证问题\"><a href=\"#2-passport-amp-passport-local-的认证问题\" class=\"headerlink\" title=\"2. passport &amp; passport-local 的认证问题\"></a>2. passport &amp; passport-local 的认证问题</h4><h5 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h5><ol>\n<li><p><a href=\"https://scotch.io/tutorials/easy-node-authentication-setup-and-local\">Easy Node Authentication: Setup and Local</a></p>\n</li>\n<li><p><a href=\"https://github.com/rockq-org/express-passport-quick-getstarted\">express-passport-quick-getstarted</a> </p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002926232#articleHeader0\">使用passportjs进行登录验证</a></p>\n</li>\n<li><p><a href=\"http://blog.fens.me/nodejs-express-passport/\">Express结合Passport实现登陆认证</a></p>\n</li>\n<li><p><a href=\"http://passportjs.org/docs\">passport doc</a> 官方文档，先看了几个例子，看完官方文档，豁然开朗了，使用了不同的方法去通过认证</p>\n</li>\n</ol>\n<h4 id=\"3-install-phantomjs-error\"><a href=\"#3-install-phantomjs-error\" class=\"headerlink\" title=\"3. install phantomjs error\"></a>3. <code>install phantomjs error</code></h4><p>  当时没遇到这个问题，当时的网络自带翻墙功能，回来再次安装的时候报错，无法安装，<a href=\"https://github.com/rockq-org/hackathon-blog/issues/13\">参考</a> ，就可以解决了</p>\n<h2 id=\"2016-06-05\"><a href=\"#2016-06-05\" class=\"headerlink\" title=\"2016-06-05\"></a>2016-06-05</h2><h3 id=\"react-amp-redux-amp-react-router\"><a href=\"#react-amp-redux-amp-react-router\" class=\"headerlink\" title=\"react &amp; redux &amp; react-router\"></a><a href=\"https://facebook.github.io/react/index.html\">react</a> &amp; <a href=\"https://github.com/reactjs/redux\">redux</a> &amp; <a href=\"https://github.com/reactjs/react-router\">react-router</a></h3><h3 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h3><ol>\n<li><a href=\"https://github.com/zalmoxisus/redux-devtools-extension\">redux-devtools-extension</a></li>\n<li><a href=\"https://github.com/facebook/react-devtools\">react-devtools</a></li>\n</ol>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ol>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\">React+Redux系列教程</a></li>\n<li><a href=\"http://cn.redux.js.org/\">Redux 中文文档</a></li>\n<li><a href=\"https://github.com/icefox0801/JSErrorMonitor#%E5%BA%94%E7%94%A8%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93\">文档收集</a></li>\n</ol>\n<h2 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h2><p>  两天的 hackathon 活动，感觉到自己的不足，要恶补下自己的基础知识了，首先完成这个blog 的认为</p>\n<ol>\n<li>passport-local 认证     【** 2016-06-08 18:04:17 ** 完成】</li>\n<li>react &amp; redux 登录注册页面</li>\n<li>blog 编辑器</li>\n<li>blog 列表（编辑删除），tag 功能！</li>\n</ol>\n<h2 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h2><p>  <a href=\"https://github.com/ilivebox/the-little-mongodb-book\">The Little MongoDB Book  中文版 - v1.0</a> 【介绍的很全面，很适合入门！】</p>\n<h2 id=\"2016-06-08\"><a href=\"#2016-06-08\" class=\"headerlink\" title=\"2016-06-08\"></a>2016-06-08</h2><h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><ol>\n<li>chrome plugin Postman 中 body 类型： form-data， x-www-form-urlencoded， raw， binary 的疑问区别<blockquote>\n<p>在hackathon-blog 活动中 推荐使用的postman 并且@hain 演示推荐了 raw 的方式提交数据，回来自己再弄，可是怎么也体检不成功了！一直怀疑自己 body-parse 模块配置有问题，看了下面的文章才豁然开朗</p>\n</blockquote>\n</li>\n</ol>\n<p>  <a href=\"https://github.com/ilivebox/the-little-mongodb-book/blob/master/zh-cn/mongodb.markdown\">四种常见的 POST 提交数据方式</a></p>\n<p>  总结下： </p>\n<ul>\n<li>x-www-form-urlencoded 是from 表单默认提交方式， <code>Content-Type: application/x-www-form-urlencoded</code></li>\n<li>form-data 是form 上传文件 时候用到的方式， <code>Content-Type: multipart/form-data</code></li>\n<li>raw 是自定义 提交表单的格式 的，后面可以选择application/json 或者 application/xml 等方式，等同自定义了 <code>Content-type</code>的类型；</li>\n<li>binary 根据以前上传文件的理解，是最新的通过二进制的形式上传数据</li>\n</ul>\n<h2 id=\"2016-06-12\"><a href=\"#2016-06-12\" class=\"headerlink\" title=\"2016-06-12\"></a>2016-06-12</h2><p>  端午前接口按规划的弄好了，按计划改实现react &amp;  redux 登录注册页面了， </p>\n<h2 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h2><h3 id=\"已读\"><a href=\"#已读\" class=\"headerlink\" title=\"已读\"></a>已读</h3><ol>\n<li><p><a href=\"https://blog.jimmylv.info/2016-01-22-React.js-Best-Practices-for-2016/\">【译】展望2016，React.js 最佳实践 (中英对照版)</a></p>\n<blockquote>\n<p>很概况全面的介绍了下 react 中用到的相关技术</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/petehunt/react-howto/blob/master/README-zh.md\">如何学习React</a></p>\n<blockquote>\n<p>怎样学习 react 系列</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://chatting8.com/?p=883\">Redux是如何工作的 (一)</a></p>\n<blockquote>\n<p>redux 通过管理state 树来管理 react 组件熟的更新</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://geek.csdn.net/news/detail/81106\">React知识库内容精选：10篇文章让你迅速了解该框架</a></p>\n</li>\n</ol>\n<h3 id=\"未读\"><a href=\"#未读\" class=\"headerlink\" title=\"未读\"></a>未读</h3><ol>\n<li><p>【系列】<a href=\"http://mulgore.github.io/2016/05/23/follow-react-lesson/\">和我一起实战react</a></p>\n</li>\n<li><p>【系列】<a href=\"http://mulgore.github.io/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/\">基于CNodeAPI使用react开发一个完整的Web应用</a></p>\n</li>\n</ol>\n<h2 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h2><p>  上面是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: <a href=\"http://guoyongfeng.github.io/idoc/index.html\">React课程学习</a>, 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章： <a href=\"/2016/07/06/React%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/\">React课程学习</a></p>\n","site":{"data":{}},"excerpt":"<p>报名参加了 <a href=\"https://cnodejs.org/topic/5750d47c491b9c4f36910fe9\">[北京] 6月4号，5号 项目实战之博客系统</a>，虽然没能按时完成项目，但是还是收获很多的，在这里总结下，同事作为 <a href=\"https://github.com/sumaolin/hackathon-blog\">hackathon-blog</a> 的readme ，记录下遇到的坑坑坑……</p>","more":"<h1 id=\"hackathon-blog\"><a href=\"#hackathon-blog\" class=\"headerlink\" title=\"hackathon-blog\"></a>hackathon-blog</h1><p>参加活动 ： <a href=\"https://cnodejs.org/topic/5750d47c491b9c4f36910fe9\">博客系统实践周末Hackathon</a></p>\n<h2 id=\"2016-06-04\"><a href=\"#2016-06-04\" class=\"headerlink\" title=\"2016-06-04\"></a>2016-06-04</h2><h3 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h3><h4 id=\"1-express不是内部或外部命令\"><a href=\"#1-express不是内部或外部命令\" class=\"headerlink\" title=\"1. express不是内部或外部命令\"></a>1. <code>express不是内部或外部命令</code></h4><p>  最新express4.0版本中将命令工具分家出来了(项目地址:<a href=\"https://github.com/expressjs/generator)%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7,%E5%91%BD%E4%BB%A4%E5%A6%82%E4%B8%8B\">https://github.com/expressjs/generator)所以我们还需要安装一个命令工具,命令如下</a>:<br>  <code>npm install -g express-generator</code></p>\n<h4 id=\"2-passport-amp-passport-local-的认证问题\"><a href=\"#2-passport-amp-passport-local-的认证问题\" class=\"headerlink\" title=\"2. passport &amp; passport-local 的认证问题\"></a>2. passport &amp; passport-local 的认证问题</h4><h5 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h5><ol>\n<li><p><a href=\"https://scotch.io/tutorials/easy-node-authentication-setup-and-local\">Easy Node Authentication: Setup and Local</a></p>\n</li>\n<li><p><a href=\"https://github.com/rockq-org/express-passport-quick-getstarted\">express-passport-quick-getstarted</a> </p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000002926232#articleHeader0\">使用passportjs进行登录验证</a></p>\n</li>\n<li><p><a href=\"http://blog.fens.me/nodejs-express-passport/\">Express结合Passport实现登陆认证</a></p>\n</li>\n<li><p><a href=\"http://passportjs.org/docs\">passport doc</a> 官方文档，先看了几个例子，看完官方文档，豁然开朗了，使用了不同的方法去通过认证</p>\n</li>\n</ol>\n<h4 id=\"3-install-phantomjs-error\"><a href=\"#3-install-phantomjs-error\" class=\"headerlink\" title=\"3. install phantomjs error\"></a>3. <code>install phantomjs error</code></h4><p>  当时没遇到这个问题，当时的网络自带翻墙功能，回来再次安装的时候报错，无法安装，<a href=\"https://github.com/rockq-org/hackathon-blog/issues/13\">参考</a> ，就可以解决了</p>\n<h2 id=\"2016-06-05\"><a href=\"#2016-06-05\" class=\"headerlink\" title=\"2016-06-05\"></a>2016-06-05</h2><h3 id=\"react-amp-redux-amp-react-router\"><a href=\"#react-amp-redux-amp-react-router\" class=\"headerlink\" title=\"react &amp; redux &amp; react-router\"></a><a href=\"https://facebook.github.io/react/index.html\">react</a> &amp; <a href=\"https://github.com/reactjs/redux\">redux</a> &amp; <a href=\"https://github.com/reactjs/react-router\">react-router</a></h3><h3 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h3><ol>\n<li><a href=\"https://github.com/zalmoxisus/redux-devtools-extension\">redux-devtools-extension</a></li>\n<li><a href=\"https://github.com/facebook/react-devtools\">react-devtools</a></li>\n</ol>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><ol>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\">React+Redux系列教程</a></li>\n<li><a href=\"http://cn.redux.js.org/\">Redux 中文文档</a></li>\n<li><a href=\"https://github.com/icefox0801/JSErrorMonitor#%E5%BA%94%E7%94%A8%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93\">文档收集</a></li>\n</ol>\n<h2 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h2><p>  两天的 hackathon 活动，感觉到自己的不足，要恶补下自己的基础知识了，首先完成这个blog 的认为</p>\n<ol>\n<li>passport-local 认证     【** 2016-06-08 18:04:17 ** 完成】</li>\n<li>react &amp; redux 登录注册页面</li>\n<li>blog 编辑器</li>\n<li>blog 列表（编辑删除），tag 功能！</li>\n</ol>\n<h2 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h2><p>  <a href=\"https://github.com/ilivebox/the-little-mongodb-book\">The Little MongoDB Book  中文版 - v1.0</a> 【介绍的很全面，很适合入门！】</p>\n<h2 id=\"2016-06-08\"><a href=\"#2016-06-08\" class=\"headerlink\" title=\"2016-06-08\"></a>2016-06-08</h2><h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><ol>\n<li>chrome plugin Postman 中 body 类型： form-data， x-www-form-urlencoded， raw， binary 的疑问区别<blockquote>\n<p>在hackathon-blog 活动中 推荐使用的postman 并且@hain 演示推荐了 raw 的方式提交数据，回来自己再弄，可是怎么也体检不成功了！一直怀疑自己 body-parse 模块配置有问题，看了下面的文章才豁然开朗</p>\n</blockquote>\n</li>\n</ol>\n<p>  <a href=\"https://github.com/ilivebox/the-little-mongodb-book/blob/master/zh-cn/mongodb.markdown\">四种常见的 POST 提交数据方式</a></p>\n<p>  总结下： </p>\n<ul>\n<li>x-www-form-urlencoded 是from 表单默认提交方式， <code>Content-Type: application/x-www-form-urlencoded</code></li>\n<li>form-data 是form 上传文件 时候用到的方式， <code>Content-Type: multipart/form-data</code></li>\n<li>raw 是自定义 提交表单的格式 的，后面可以选择application/json 或者 application/xml 等方式，等同自定义了 <code>Content-type</code>的类型；</li>\n<li>binary 根据以前上传文件的理解，是最新的通过二进制的形式上传数据</li>\n</ul>\n<h2 id=\"2016-06-12\"><a href=\"#2016-06-12\" class=\"headerlink\" title=\"2016-06-12\"></a>2016-06-12</h2><p>  端午前接口按规划的弄好了，按计划改实现react &amp;  redux 登录注册页面了， </p>\n<h2 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h2><h3 id=\"已读\"><a href=\"#已读\" class=\"headerlink\" title=\"已读\"></a>已读</h3><ol>\n<li><p><a href=\"https://blog.jimmylv.info/2016-01-22-React.js-Best-Practices-for-2016/\">【译】展望2016，React.js 最佳实践 (中英对照版)</a></p>\n<blockquote>\n<p>很概况全面的介绍了下 react 中用到的相关技术</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/petehunt/react-howto/blob/master/README-zh.md\">如何学习React</a></p>\n<blockquote>\n<p>怎样学习 react 系列</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://chatting8.com/?p=883\">Redux是如何工作的 (一)</a></p>\n<blockquote>\n<p>redux 通过管理state 树来管理 react 组件熟的更新</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://geek.csdn.net/news/detail/81106\">React知识库内容精选：10篇文章让你迅速了解该框架</a></p>\n</li>\n</ol>\n<h3 id=\"未读\"><a href=\"#未读\" class=\"headerlink\" title=\"未读\"></a>未读</h3><ol>\n<li><p>【系列】<a href=\"http://mulgore.github.io/2016/05/23/follow-react-lesson/\">和我一起实战react</a></p>\n</li>\n<li><p>【系列】<a href=\"http://mulgore.github.io/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/\">基于CNodeAPI使用react开发一个完整的Web应用</a></p>\n</li>\n</ol>\n<h2 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h2><p>  上面是关于react 资料的搜集，内容太多，后面参照hackathon-blog 中给出的关于react的资料: <a href=\"http://guoyongfeng.github.io/idoc/index.html\">React课程学习</a>, 整个资料循序渐进，挺易懂的！关于学习过程中的问题单开一章： <a href=\"/2016/07/06/React%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/\">React课程学习</a></p>"},{"title":"hello-hexo","date":"2016-02-17T10:03:20.000Z","_content":"\n一直想弄个自己的博客 记录下自己的技术方面的点点滴滴\n\n新年第一天上班，正好看到 hexo 可以借助 github.com 构建自己的静态博客，正好可以折腾下！\n\n<!--more-->\n\n## 基本的安装\n\n(懒癌发作!)都是做开发的不一步步讲解了，直接上参考链接吧：\n\n1. [使用 hexo 搭建博客](http://yangjian.me/workspace/building-blog-with-hexo/) **无效了无奈**\n\n### 本地调试地址端口无效\n\n#### 解决办法\n\n搜索参考网上的说是端口占用了 把 ip 地址改为常用的 127.0.0.1:4000 就 OK 了\n修改方法：直接找到`node_modules/ hexo-serve/index.js`\n\n```Javascript\nhexo.config.server = assign({\n  log: false,\n  ip: '127.0.0.1'\n}, hexo.config.server);\n```\n\n#### 2016.02.22 更新\n\n参考了 [hexo-server](https://github.com/hexojs/hexo-server), 本地服务的 IP ，和 port 可以在启动参数中配置的\n\n还可以直接写到站点的 配置文件中\\_config.yml\n\n```Javascript\nserver:\n  port: 4000\n  log: false\n  ip: 127.0.0.1\n  compress: false\n  header: true\n```\n\n### 主题安装 themes\n\n喜欢的主题 [hexo-theme-next](https://github.com/iissnan/hexo-theme-next) ，使用文档很详细：[文档地址](http://theme-next.iissnan.com/) ，不废话了！\n\n喜欢的主题列表\n\n1. [hexo-theme-modernist](https://github.com/heroicyang/hexo-theme-modernist)\n2. [hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n\n#### 评论\n\n[多说](http://duoshuo.com/) 服务停掉了，想法使用 gittalk 或者 gitment\n\n#### 统计\n\n[百度统计](http://sitecenter.baidu.com/sc-web/) ，现在换掉了，改成了 Google analyst\n\n#### 搜索\n\n[Swiftype](https://swiftype.com/) 并没使用上\n\n#### 文章摘要\n\n```Javascript\n以上是摘要\n<!--more-->\n以下是全文\n```\n\n## 部署上线\n\n### Question\n\n上面都是配置问题，本地没有问题的，终究要部署到`github.com` 上的，那么问题来了\n\n部署上去 无法访问，我是在 git 的根目录下有新建了个 blog 目录，因为原来的 git 下有东西了\n\n怀疑是自己的 git root 下面已经有东西了，在子目录 blog 下影响的，把 git remote 改为新的地址：`git@github.com:sumaolin/hexo.git`\n\n可是 hexo deploy 还是报错\n\n[查官方文档](https://hexo.io/zh-cn/docs/deployment.html)，发现需要插件 hexo-deployer-git 安装后 hexo deploy 报错\n\n```Bash\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\n搜索相关的 `git Permission denied`的问题\n\n### 参考\n\n1. [由于 SSH 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法 ](http://blog.itpub.net/25851087/viewspace-1262468/)\n2. [Github 访问时出现 Permission denied (public key)](http://my.oschina.net/grnick/blog/201155)\n3. [Git with SSH on Windows](http://stackoverflow.com/questions/2499331/git-with-ssh-on-windows)\n4. [Git - Permission denied (publickey)](http://stackoverflow.com/questions/2643502/git-permission-denied-publickey)\n\n### 思路\n\n1. 首先想到的是重新生产公钥和密钥，重新配置 github 账号中的公钥，结果行不通\n\n2. 参考链接 1 中，修改了 IdentityFile 的值，还是没有起作用\n\n3. 通过参考链接 2 中\n\n```Bash\nssh -v git@github.com\n```\n\n> 查看使用到的秘钥，可以看到有 id_rsa，可是不起作用，为什么？\n\n```Bash\nls /.ssh/ 查看目录下的私钥\n```\n\n> 只有 knowe_hosts\n\n可是我查看的 username/.ssh/ 目录下面有 id_rsa 并且公钥已经加入到 github 中了,百思不得其解啊，突然想到 /.ssh/ 不是 username/.ssh/ 应该是 ssh 单独配置的，通过`where ssh` 命令查看，当前 ssh 使用的 git 安装的 ssh, 到 git 安装目录 ：`C:\\Program Files (x86)\\Git` 果然找到了`.ssh/` 目录，里面有新生产的公钥和密钥，添加到 github 中就可以了\n\n### 知识点\n\n```Bash\nssh-keygen -t rsa -C \"sumaolin619@gmail.com\"  // 生产ssh使用的公钥和私钥\nssh -t git@github.com // 测试ssh 是否配置成功\nssh -v git@github.com // 查看详细的请求过程，包括使用的公钥密钥\nwhere ssh // 查看当前的ssh 的路径\n```\n\n## 参考链接\n\n1. [hexo 你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/) **推荐**\n\n   > 博客的主题也挺喜欢的\n\n## 后续更新\n\n### github & coding 同时部署\n\n1. github & coding.net 一键同时部署（coding.net 通过 webhook 自动部署)，国内国外区分访问\n\n#### 参考链接\n\n1. [在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848)\n\n   关于 webhook 的自动部署 说的很明白\n\n2. [hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding](http://www.jianshu.com/p/7ad9d3cd4d6e)\n\n   关于 deplay github & coding.net 的写法 ，国内国外区分访问\n\n#### 思路\n\n迁移到 coding.net 后，对与国内的的线路一直无法访问，一直以为修改 DNS 服务商后 没有生效，所以等 48 小时后的今天访问，还是不生效，感觉是自己配置的问题了，由于先参考了[在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848), 潜意识的 以为只能通过 coding.net 的 演示功能部署呢，今天找问题时候发现，coding.net 的 pages 功能，还可以免费绑定域名（演示平台需要会员才可以绑定域名），所以新建了个个人博客的项目，改\\_config.yml 直接部署到该项目，把 cname 解析到 sumaolin.coding.me 而不是 sumaolin.coding.io （演示功能用到的域名），几秒后可以访问了！\n\n其实 [hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding](http://www.jianshu.com/p/7ad9d3cd4d6e) 提到过 coding.net 两种部署方式的：\n\n> 部署博客方式有两种，第一种就是 pages 服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages 方式也很简单就是在 source/需要创建一个空白文件，至于原因，是因为 coding.net 需要这个文件来作为以静态文件部署的标志。就是说看到这个 Staticfile 就知道按照静态文件来发布。\n\n以后看资料要仔细了，自己的坑自己踩啊！另外 pages 部署的时候不用 创建空白文件 Staticfile 也可以！\n\n### 图片的使用\n\n#### 参考链接\n\n1. [使用 Hexo 创建十七蝉的日志 # 如何加入图片](http://blog.shiqichan.com/create-blog-with-hexo/)\n\n   > 本地存储图片，将图片放在 source/images 目录下，然后\n   >\n   > ```![Alt text](/img/QQ截图20160403180630.jpg \"测试，本地图片\")\n   >\n   > ```\n\n2. [使用七牛为 Hexo 存储图片](http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/)\n\n   从上文中找到了 相关的插件 [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync), 插件已经更新完善了，所以直接使用该插件了，参考了该插件的文档\n\n   因为本域名没有备案，还要设置 dns 等\n\n3. [Sublime Text 2 中怎样查找 scope 的名称](http://blog.csdn.net/pxzy/article/details/8490058)\n\n   使用过 sublime plugin \"MarkdownEditing\" 快捷键 mdi, mdl, mdh1 挺方便的，不过不喜欢在预览模式下写，所以通过 sublime-snippet 直接 定义相应的快捷键，操作方法，参考 [使用 Sublime-snippet 来快速做前端页面](http://www.jianshu.com/p/219de00c8343), 遇到的问题是设置 scole 时候一直无法 trigger ，原谅写错了，一直以为是这个 scope 对应的 sublime Syntax 中的一样就可以了，查找了上面的链接，才发现 too yong too simple 了，mardown 对应的 scope 是 text.html.mardown\n\n#### qiniu 图库使用\n\n```bash\nλ hexo qiniu i\nERROR Plugin load failed: hexo-qiniu-sync\nSyntaxError: Unexpected token a\n    at Object.parse (native)\n    at Object.<anonymous> (E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:10:17)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12\n    at tryCatcher (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:497:31)\n    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)\n    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)\n    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)\n    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)\n    at Promise._resolveCallback (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:424:57)\n    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:510:17)\n    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)\n    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)\n    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)\n    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\n    at E:\\hexoBlog\\hexo\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\n```\n\n一直报错，全部是从 [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync) 中复制粘贴过来的，只是把七牛的秘钥文件单独出来了，没有找到原因\n\n#### 2016-08-10\n\n继续前天的工作，想到了先把秘钥配置写到 \\_config.xml 中测试了下是 OK 的，那么就是单独读取秘钥文件的时候不成功，可能的原因：\n\n1. 秘钥路径不正确 改为 `./sec/qn.json`\n2. qn.json 文件格式不正确，改为了严格的 json 格式 OK 了\n\n插件的配置 OK 了，看下插件的使用了，官网的使用方式：\n\n```\n{% qnimg qiniu.jpg title:qnimg alt:qnimg %}\n```\n\n文件保存到根目录下的 static/img 目录下，同步成功了\n\n页面上不显示：\n\n1. 我开启了白名单功能，只有白名单中的域名可以加载\n2. 设置了自定义域名功能，需要设置 `urlPrefix`属性设置为自定义的域名\n\n每次都贴一次很麻烦啊，直接定义 sublime text snippet: qnimg:\n\n```html\n<snippet>\n  <content\n    ><![CDATA[ {% qnimg ${1:imgName} title:${2:imgTitile} alt:${2:imgTitle} %}\n    ]]></content\n  >\n  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->\n  <tabTrigger>qnimg</tabTrigger>\n  <!-- Optional: Set a scope to limit where the snippet will trigger -->\n  <scope>text.html.markdown</scope>\n</snippet>\n```\n\n这样就完美了 每次 qnimg Tab 下就可以了\n\n发现个美中不足的地方： [qiniu 中开启了防盗链白名单功能，所以本地 hexo s 时无法实时预览图片？](https://github.com/gyk001/hexo-qiniu-sync/issues/39) 期望有解决方法\n\n#### 2016-08-12\n\n根据作者的介绍使用 `offline:true`配置可以开启 本地调用功能的，并且更新到 V 1.4.5 版本解决了软连的问题\n\n#### 2016-09-27\n\n更新的时候 hexo v3.2.2 更新后 没有了 hexo server 选项了，这也没法开启 offline:true 验证了，hexo 官方确认是个 windows 下的 bug\n\n#### 2016-12-21\n\n有时间了，再折腾下上次遗留的问题： `hexo-qiniu-sync插件配置好后 hexo server 无法启动了`\n\n1.  上次冲洗 hexo init 个 blog 是有 hexo server 命令的，所以肯定了这个是插件引起的问题\n\n2.  在配置\\_config.yml 中去掉了关于 hexo-qiniu-sync 的配置\n\n```bash\nλ hexo server\nERROR Plugin load failed: hexo-qiniu-sync\nTypeError: Cannot read property 'secret_file' of undefined\n    at Object.<anonymous> (F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:8:21)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at Promise._resolveCallback (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\nINFO  Start processing\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\n    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)\n    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)\n    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9\n    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)\n    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)\n    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)\n    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)\n    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\nFATAL (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\nTemplate render error: (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\n    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)\n    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)\n    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9\n    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)\n    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)\n    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)\n    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)\n    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n\n```\n\n看来是安装了 hexo-qiniu-sync 插件的问题\n\n搜索了下相关问题，找到了条有价值的信息: [Hexo 七牛云同步插件的使用](http://mp.weixin.qq.com/s?__biz=MzIzNzEzNDMxOA==&idx=1&mid=2651006828&sn=c553c202b1162f6bd37d87a41a8a961d)\n\n> 基本的安装、配置在插件主页也有过说明，按照配置即可，这里记录下遇到的坑。注意在\\_config.yml 中不要配置插件栏如下，否则会报错找不到 hexo server 的命令，可参考问题: https://github.com/gyk001/hexo-qiniu-sync/issues/41\n\n原来官方已经解决了，按照提示注释掉 插件就可以了，再来个测试 OK\n\n发现刚才测试的 考辛斯的图片并没有同步到七牛 ，并且 deploy 后连接还是原来的域名下的\n\n#### 2017-05-13\n\n终于完成了这个 hexo-qiniu-sync 插件的调试，可以痛快的使用了\n\n下面在弄个自己的[hexo-theme](/2017/05/13/hexo-theme/)\n\n1. 前几天测试过从新 `hexo init` 个新项目的话 是有 `hexo server` 命令并且能够运行的，看来是 hexo-qiniu-sync 插件出问题了。有时间修复下\n2. 自动部署的问题 看到了个更简洁的: [手把手教你使用 Travis CI 自动部署你的 Hexo 博客到 Github 上](https://www.jianshu.com/p/e22c13d85659)\n\n\n\n#### 2019-08-28\n\n 七牛的服务停掉了，算是弃坑七牛了，自动部署时候一直报错！\n\n新开了篇新文章，整理 [hexo-theme](/2017/05/13/hexo-theme/) ","source":"_posts/hello-hexo.md","raw":"---\ntitle: hello-hexo\ndate: 2016-02-17 18:03:20\ntags: [heox, blog, node]\ncategories: node\n---\n\n一直想弄个自己的博客 记录下自己的技术方面的点点滴滴\n\n新年第一天上班，正好看到 hexo 可以借助 github.com 构建自己的静态博客，正好可以折腾下！\n\n<!--more-->\n\n## 基本的安装\n\n(懒癌发作!)都是做开发的不一步步讲解了，直接上参考链接吧：\n\n1. [使用 hexo 搭建博客](http://yangjian.me/workspace/building-blog-with-hexo/) **无效了无奈**\n\n### 本地调试地址端口无效\n\n#### 解决办法\n\n搜索参考网上的说是端口占用了 把 ip 地址改为常用的 127.0.0.1:4000 就 OK 了\n修改方法：直接找到`node_modules/ hexo-serve/index.js`\n\n```Javascript\nhexo.config.server = assign({\n  log: false,\n  ip: '127.0.0.1'\n}, hexo.config.server);\n```\n\n#### 2016.02.22 更新\n\n参考了 [hexo-server](https://github.com/hexojs/hexo-server), 本地服务的 IP ，和 port 可以在启动参数中配置的\n\n还可以直接写到站点的 配置文件中\\_config.yml\n\n```Javascript\nserver:\n  port: 4000\n  log: false\n  ip: 127.0.0.1\n  compress: false\n  header: true\n```\n\n### 主题安装 themes\n\n喜欢的主题 [hexo-theme-next](https://github.com/iissnan/hexo-theme-next) ，使用文档很详细：[文档地址](http://theme-next.iissnan.com/) ，不废话了！\n\n喜欢的主题列表\n\n1. [hexo-theme-modernist](https://github.com/heroicyang/hexo-theme-modernist)\n2. [hexo-theme-next](https://github.com/iissnan/hexo-theme-next)\n\n#### 评论\n\n[多说](http://duoshuo.com/) 服务停掉了，想法使用 gittalk 或者 gitment\n\n#### 统计\n\n[百度统计](http://sitecenter.baidu.com/sc-web/) ，现在换掉了，改成了 Google analyst\n\n#### 搜索\n\n[Swiftype](https://swiftype.com/) 并没使用上\n\n#### 文章摘要\n\n```Javascript\n以上是摘要\n<!--more-->\n以下是全文\n```\n\n## 部署上线\n\n### Question\n\n上面都是配置问题，本地没有问题的，终究要部署到`github.com` 上的，那么问题来了\n\n部署上去 无法访问，我是在 git 的根目录下有新建了个 blog 目录，因为原来的 git 下有东西了\n\n怀疑是自己的 git root 下面已经有东西了，在子目录 blog 下影响的，把 git remote 改为新的地址：`git@github.com:sumaolin/hexo.git`\n\n可是 hexo deploy 还是报错\n\n[查官方文档](https://hexo.io/zh-cn/docs/deployment.html)，发现需要插件 hexo-deployer-git 安装后 hexo deploy 报错\n\n```Bash\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\n搜索相关的 `git Permission denied`的问题\n\n### 参考\n\n1. [由于 SSH 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法 ](http://blog.itpub.net/25851087/viewspace-1262468/)\n2. [Github 访问时出现 Permission denied (public key)](http://my.oschina.net/grnick/blog/201155)\n3. [Git with SSH on Windows](http://stackoverflow.com/questions/2499331/git-with-ssh-on-windows)\n4. [Git - Permission denied (publickey)](http://stackoverflow.com/questions/2643502/git-permission-denied-publickey)\n\n### 思路\n\n1. 首先想到的是重新生产公钥和密钥，重新配置 github 账号中的公钥，结果行不通\n\n2. 参考链接 1 中，修改了 IdentityFile 的值，还是没有起作用\n\n3. 通过参考链接 2 中\n\n```Bash\nssh -v git@github.com\n```\n\n> 查看使用到的秘钥，可以看到有 id_rsa，可是不起作用，为什么？\n\n```Bash\nls /.ssh/ 查看目录下的私钥\n```\n\n> 只有 knowe_hosts\n\n可是我查看的 username/.ssh/ 目录下面有 id_rsa 并且公钥已经加入到 github 中了,百思不得其解啊，突然想到 /.ssh/ 不是 username/.ssh/ 应该是 ssh 单独配置的，通过`where ssh` 命令查看，当前 ssh 使用的 git 安装的 ssh, 到 git 安装目录 ：`C:\\Program Files (x86)\\Git` 果然找到了`.ssh/` 目录，里面有新生产的公钥和密钥，添加到 github 中就可以了\n\n### 知识点\n\n```Bash\nssh-keygen -t rsa -C \"sumaolin619@gmail.com\"  // 生产ssh使用的公钥和私钥\nssh -t git@github.com // 测试ssh 是否配置成功\nssh -v git@github.com // 查看详细的请求过程，包括使用的公钥密钥\nwhere ssh // 查看当前的ssh 的路径\n```\n\n## 参考链接\n\n1. [hexo 你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/) **推荐**\n\n   > 博客的主题也挺喜欢的\n\n## 后续更新\n\n### github & coding 同时部署\n\n1. github & coding.net 一键同时部署（coding.net 通过 webhook 自动部署)，国内国外区分访问\n\n#### 参考链接\n\n1. [在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848)\n\n   关于 webhook 的自动部署 说的很明白\n\n2. [hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding](http://www.jianshu.com/p/7ad9d3cd4d6e)\n\n   关于 deplay github & coding.net 的写法 ，国内国外区分访问\n\n#### 思路\n\n迁移到 coding.net 后，对与国内的的线路一直无法访问，一直以为修改 DNS 服务商后 没有生效，所以等 48 小时后的今天访问，还是不生效，感觉是自己配置的问题了，由于先参考了[在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848), 潜意识的 以为只能通过 coding.net 的 演示功能部署呢，今天找问题时候发现，coding.net 的 pages 功能，还可以免费绑定域名（演示平台需要会员才可以绑定域名），所以新建了个个人博客的项目，改\\_config.yml 直接部署到该项目，把 cname 解析到 sumaolin.coding.me 而不是 sumaolin.coding.io （演示功能用到的域名），几秒后可以访问了！\n\n其实 [hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding](http://www.jianshu.com/p/7ad9d3cd4d6e) 提到过 coding.net 两种部署方式的：\n\n> 部署博客方式有两种，第一种就是 pages 服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages 方式也很简单就是在 source/需要创建一个空白文件，至于原因，是因为 coding.net 需要这个文件来作为以静态文件部署的标志。就是说看到这个 Staticfile 就知道按照静态文件来发布。\n\n以后看资料要仔细了，自己的坑自己踩啊！另外 pages 部署的时候不用 创建空白文件 Staticfile 也可以！\n\n### 图片的使用\n\n#### 参考链接\n\n1. [使用 Hexo 创建十七蝉的日志 # 如何加入图片](http://blog.shiqichan.com/create-blog-with-hexo/)\n\n   > 本地存储图片，将图片放在 source/images 目录下，然后\n   >\n   > ```![Alt text](/img/QQ截图20160403180630.jpg \"测试，本地图片\")\n   >\n   > ```\n\n2. [使用七牛为 Hexo 存储图片](http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/)\n\n   从上文中找到了 相关的插件 [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync), 插件已经更新完善了，所以直接使用该插件了，参考了该插件的文档\n\n   因为本域名没有备案，还要设置 dns 等\n\n3. [Sublime Text 2 中怎样查找 scope 的名称](http://blog.csdn.net/pxzy/article/details/8490058)\n\n   使用过 sublime plugin \"MarkdownEditing\" 快捷键 mdi, mdl, mdh1 挺方便的，不过不喜欢在预览模式下写，所以通过 sublime-snippet 直接 定义相应的快捷键，操作方法，参考 [使用 Sublime-snippet 来快速做前端页面](http://www.jianshu.com/p/219de00c8343), 遇到的问题是设置 scole 时候一直无法 trigger ，原谅写错了，一直以为是这个 scope 对应的 sublime Syntax 中的一样就可以了，查找了上面的链接，才发现 too yong too simple 了，mardown 对应的 scope 是 text.html.mardown\n\n#### qiniu 图库使用\n\n```bash\nλ hexo qiniu i\nERROR Plugin load failed: hexo-qiniu-sync\nSyntaxError: Unexpected token a\n    at Object.parse (native)\n    at Object.<anonymous> (E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:10:17)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12\n    at tryCatcher (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:497:31)\n    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)\n    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)\n    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)\n    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)\n    at Promise._resolveCallback (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:424:57)\n    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:510:17)\n    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)\n    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)\n    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)\n    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)\n    at E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\n    at E:\\hexoBlog\\hexo\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\n```\n\n一直报错，全部是从 [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync) 中复制粘贴过来的，只是把七牛的秘钥文件单独出来了，没有找到原因\n\n#### 2016-08-10\n\n继续前天的工作，想到了先把秘钥配置写到 \\_config.xml 中测试了下是 OK 的，那么就是单独读取秘钥文件的时候不成功，可能的原因：\n\n1. 秘钥路径不正确 改为 `./sec/qn.json`\n2. qn.json 文件格式不正确，改为了严格的 json 格式 OK 了\n\n插件的配置 OK 了，看下插件的使用了，官网的使用方式：\n\n```\n{% qnimg qiniu.jpg title:qnimg alt:qnimg %}\n```\n\n文件保存到根目录下的 static/img 目录下，同步成功了\n\n页面上不显示：\n\n1. 我开启了白名单功能，只有白名单中的域名可以加载\n2. 设置了自定义域名功能，需要设置 `urlPrefix`属性设置为自定义的域名\n\n每次都贴一次很麻烦啊，直接定义 sublime text snippet: qnimg:\n\n```html\n<snippet>\n  <content\n    ><![CDATA[ {% qnimg ${1:imgName} title:${2:imgTitile} alt:${2:imgTitle} %}\n    ]]></content\n  >\n  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->\n  <tabTrigger>qnimg</tabTrigger>\n  <!-- Optional: Set a scope to limit where the snippet will trigger -->\n  <scope>text.html.markdown</scope>\n</snippet>\n```\n\n这样就完美了 每次 qnimg Tab 下就可以了\n\n发现个美中不足的地方： [qiniu 中开启了防盗链白名单功能，所以本地 hexo s 时无法实时预览图片？](https://github.com/gyk001/hexo-qiniu-sync/issues/39) 期望有解决方法\n\n#### 2016-08-12\n\n根据作者的介绍使用 `offline:true`配置可以开启 本地调用功能的，并且更新到 V 1.4.5 版本解决了软连的问题\n\n#### 2016-09-27\n\n更新的时候 hexo v3.2.2 更新后 没有了 hexo server 选项了，这也没法开启 offline:true 验证了，hexo 官方确认是个 windows 下的 bug\n\n#### 2016-12-21\n\n有时间了，再折腾下上次遗留的问题： `hexo-qiniu-sync插件配置好后 hexo server 无法启动了`\n\n1.  上次冲洗 hexo init 个 blog 是有 hexo server 命令的，所以肯定了这个是插件引起的问题\n\n2.  在配置\\_config.yml 中去掉了关于 hexo-qiniu-sync 的配置\n\n```bash\nλ hexo server\nERROR Plugin load failed: hexo-qiniu-sync\nTypeError: Cannot read property 'secret_file' of undefined\n    at Object.<anonymous> (F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:8:21)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n    at require (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at Promise._resolveCallback (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\nINFO  Start processing\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\n    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)\n    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)\n    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9\n    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)\n    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)\n    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)\n    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)\n    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\nFATAL (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\nTemplate render error: (unknown path) [Line 91, Column 2]\n  unknown block tag: qnimg\n    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)\n    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)\n    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9\n    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)\n    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)\n    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)\n    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)\n    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19\n    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)\n    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)\n    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n\n```\n\n看来是安装了 hexo-qiniu-sync 插件的问题\n\n搜索了下相关问题，找到了条有价值的信息: [Hexo 七牛云同步插件的使用](http://mp.weixin.qq.com/s?__biz=MzIzNzEzNDMxOA==&idx=1&mid=2651006828&sn=c553c202b1162f6bd37d87a41a8a961d)\n\n> 基本的安装、配置在插件主页也有过说明，按照配置即可，这里记录下遇到的坑。注意在\\_config.yml 中不要配置插件栏如下，否则会报错找不到 hexo server 的命令，可参考问题: https://github.com/gyk001/hexo-qiniu-sync/issues/41\n\n原来官方已经解决了，按照提示注释掉 插件就可以了，再来个测试 OK\n\n发现刚才测试的 考辛斯的图片并没有同步到七牛 ，并且 deploy 后连接还是原来的域名下的\n\n#### 2017-05-13\n\n终于完成了这个 hexo-qiniu-sync 插件的调试，可以痛快的使用了\n\n下面在弄个自己的[hexo-theme](/2017/05/13/hexo-theme/)\n\n1. 前几天测试过从新 `hexo init` 个新项目的话 是有 `hexo server` 命令并且能够运行的，看来是 hexo-qiniu-sync 插件出问题了。有时间修复下\n2. 自动部署的问题 看到了个更简洁的: [手把手教你使用 Travis CI 自动部署你的 Hexo 博客到 Github 上](https://www.jianshu.com/p/e22c13d85659)\n\n\n\n#### 2019-08-28\n\n 七牛的服务停掉了，算是弃坑七牛了，自动部署时候一直报错！\n\n新开了篇新文章，整理 [hexo-theme](/2017/05/13/hexo-theme/) ","slug":"hello-hexo","published":1,"updated":"2022-01-20T04:12:09.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0s000d7uo0aqc8bovs","content":"<p>一直想弄个自己的博客 记录下自己的技术方面的点点滴滴</p>\n<p>新年第一天上班，正好看到 hexo 可以借助 github.com 构建自己的静态博客，正好可以折腾下！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本的安装\"><a href=\"#基本的安装\" class=\"headerlink\" title=\"基本的安装\"></a>基本的安装</h2><p>(懒癌发作!)都是做开发的不一步步讲解了，直接上参考链接吧：</p>\n<ol>\n<li><a href=\"http://yangjian.me/workspace/building-blog-with-hexo/\">使用 hexo 搭建博客</a> <strong>无效了无奈</strong></li>\n</ol>\n<h3 id=\"本地调试地址端口无效\"><a href=\"#本地调试地址端口无效\" class=\"headerlink\" title=\"本地调试地址端口无效\"></a>本地调试地址端口无效</h3><h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>搜索参考网上的说是端口占用了 把 ip 地址改为常用的 127.0.0.1:4000 就 OK 了<br>修改方法：直接找到<code>node_modules/ hexo-serve/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">hexo.config.server = assign(&#123;<br>  <span class=\"hljs-attr\">log</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">ip</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span><br>&#125;, hexo.config.server);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2016-02-22-更新\"><a href=\"#2016-02-22-更新\" class=\"headerlink\" title=\"2016.02.22 更新\"></a>2016.02.22 更新</h4><p>参考了 <a href=\"https://github.com/hexojs/hexo-server\">hexo-server</a>, 本地服务的 IP ，和 port 可以在启动参数中配置的</p>\n<p>还可以直接写到站点的 配置文件中_config.yml</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">server:<br>  port: <span class=\"hljs-number\">4000</span><br>  <span class=\"hljs-attr\">log</span>: <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">ip</span>: <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">header</span>: <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"主题安装-themes\"><a href=\"#主题安装-themes\" class=\"headerlink\" title=\"主题安装 themes\"></a>主题安装 themes</h3><p>喜欢的主题 <a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a> ，使用文档很详细：<a href=\"http://theme-next.iissnan.com/\">文档地址</a> ，不废话了！</p>\n<p>喜欢的主题列表</p>\n<ol>\n<li><a href=\"https://github.com/heroicyang/hexo-theme-modernist\">hexo-theme-modernist</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n</ol>\n<h4 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h4><p><a href=\"http://duoshuo.com/\">多说</a> 服务停掉了，想法使用 gittalk 或者 gitment</p>\n<h4 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h4><p><a href=\"http://sitecenter.baidu.com/sc-web/\">百度统计</a> ，现在换掉了，改成了 Google analyst</p>\n<h4 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h4><p><a href=\"https://swiftype.com/\">Swiftype</a> 并没使用上</p>\n<h4 id=\"文章摘要\"><a href=\"#文章摘要\" class=\"headerlink\" title=\"文章摘要\"></a>文章摘要</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">以上是摘要<br>&lt;!--more--&gt;<br>以下是全文<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"部署上线\"><a href=\"#部署上线\" class=\"headerlink\" title=\"部署上线\"></a>部署上线</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h3><p>上面都是配置问题，本地没有问题的，终究要部署到<code>github.com</code> 上的，那么问题来了</p>\n<p>部署上去 无法访问，我是在 git 的根目录下有新建了个 blog 目录，因为原来的 git 下有东西了</p>\n<p>怀疑是自己的 git root 下面已经有东西了，在子目录 blog 下影响的，把 git remote 改为新的地址：<code>git@github.com:sumaolin/hexo.git</code></p>\n<p>可是 hexo deploy 还是报错</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/deployment.html\">查官方文档</a>，发现需要插件 hexo-deployer-git 安装后 hexo deploy 报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">Permission denied (publickey).<br>fatal: Could not <span class=\"hljs-built_in\">read</span> from remote repository.<br></code></pre></td></tr></table></figure>\n\n<p>搜索相关的 <code>git Permission denied</code>的问题</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://blog.itpub.net/25851087/viewspace-1262468/\">由于 SSH 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法 </a></li>\n<li><a href=\"http://my.oschina.net/grnick/blog/201155\">Github 访问时出现 Permission denied (public key)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2499331/git-with-ssh-on-windows\">Git with SSH on Windows</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2643502/git-permission-denied-publickey\">Git - Permission denied (publickey)</a></li>\n</ol>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>首先想到的是重新生产公钥和密钥，重新配置 github 账号中的公钥，结果行不通</p>\n</li>\n<li><p>参考链接 1 中，修改了 IdentityFile 的值，还是没有起作用</p>\n</li>\n<li><p>通过参考链接 2 中</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ssh -v git@github.com<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看使用到的秘钥，可以看到有 id_rsa，可是不起作用，为什么？</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ls /.ssh/ 查看目录下的私钥<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只有 knowe_hosts</p>\n</blockquote>\n<p>可是我查看的 username/.ssh/ 目录下面有 id_rsa 并且公钥已经加入到 github 中了,百思不得其解啊，突然想到 /.ssh/ 不是 username/.ssh/ 应该是 ssh 单独配置的，通过<code>where ssh</code> 命令查看，当前 ssh 使用的 git 安装的 ssh, 到 git 安装目录 ：<code>C:\\Program Files (x86)\\Git</code> 果然找到了<code>.ssh/</code> 目录，里面有新生产的公钥和密钥，添加到 github 中就可以了</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;sumaolin619@gmail.com&quot;</span>  // 生产ssh使用的公钥和私钥<br>ssh -t git@github.com // 测试ssh 是否配置成功<br>ssh -v git@github.com // 查看详细的请求过程，包括使用的公钥密钥<br><span class=\"hljs-built_in\">where</span> ssh // 查看当前的ssh 的路径<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">hexo 你的博客</a> <strong>推荐</strong></p>\n<blockquote>\n<p>博客的主题也挺喜欢的</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"后续更新\"><a href=\"#后续更新\" class=\"headerlink\" title=\"后续更新\"></a>后续更新</h2><h3 id=\"github-amp-coding-同时部署\"><a href=\"#github-amp-coding-同时部署\" class=\"headerlink\" title=\"github &amp; coding 同时部署\"></a>github &amp; coding 同时部署</h3><ol>\n<li>github &amp; coding.net 一键同时部署（coding.net 通过 webhook 自动部署)，国内国外区分访问</li>\n</ol>\n<h4 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ol>\n<li><p><a href=\"https://segmentfault.com/a/1190000002900848\">在 Coding 上搭建 Hexo 个人博客！</a></p>\n<p>关于 webhook 的自动部署 说的很明白</p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\">hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding</a></p>\n<p>关于 deplay github &amp; coding.net 的写法 ，国内国外区分访问</p>\n</li>\n</ol>\n<h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>迁移到 coding.net 后，对与国内的的线路一直无法访问，一直以为修改 DNS 服务商后 没有生效，所以等 48 小时后的今天访问，还是不生效，感觉是自己配置的问题了，由于先参考了<a href=\"https://segmentfault.com/a/1190000002900848\">在 Coding 上搭建 Hexo 个人博客！</a>, 潜意识的 以为只能通过 coding.net 的 演示功能部署呢，今天找问题时候发现，coding.net 的 pages 功能，还可以免费绑定域名（演示平台需要会员才可以绑定域名），所以新建了个个人博客的项目，改_config.yml 直接部署到该项目，把 cname 解析到 sumaolin.coding.me 而不是 sumaolin.coding.io （演示功能用到的域名），几秒后可以访问了！</p>\n<p>其实 <a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\">hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding</a> 提到过 coding.net 两种部署方式的：</p>\n<blockquote>\n<p>部署博客方式有两种，第一种就是 pages 服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages 方式也很简单就是在 source/需要创建一个空白文件，至于原因，是因为 coding.net 需要这个文件来作为以静态文件部署的标志。就是说看到这个 Staticfile 就知道按照静态文件来发布。</p>\n</blockquote>\n<p>以后看资料要仔细了，自己的坑自己踩啊！另外 pages 部署的时候不用 创建空白文件 Staticfile 也可以！</p>\n<h3 id=\"图片的使用\"><a href=\"#图片的使用\" class=\"headerlink\" title=\"图片的使用\"></a>图片的使用</h3><h4 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ol>\n<li><p><a href=\"http://blog.shiqichan.com/create-blog-with-hexo/\">使用 Hexo 创建十七蝉的日志 # 如何加入图片</a></p>\n<blockquote>\n<p>本地存储图片，将图片放在 source/images 目录下，然后</p>\n<figure class=\"highlight plaintext\"><figcaption><span>text](/img/QQ截图20160403180630.jpg \"测试，本地图片\")</span></figcaption><table><tr><td class=\"code\"><pre><code class=\"hljs ![Alt\"><br></code></pre></td></tr></table></figure></blockquote>\n</li>\n<li><p><a href=\"http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/\">使用七牛为 Hexo 存储图片</a></p>\n<p>从上文中找到了 相关的插件 <a href=\"https://github.com/gyk001/hexo-qiniu-sync\">hexo-qiniu-sync</a>, 插件已经更新完善了，所以直接使用该插件了，参考了该插件的文档</p>\n<p>因为本域名没有备案，还要设置 dns 等</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/pxzy/article/details/8490058\">Sublime Text 2 中怎样查找 scope 的名称</a></p>\n<p>使用过 sublime plugin “MarkdownEditing” 快捷键 mdi, mdl, mdh1 挺方便的，不过不喜欢在预览模式下写，所以通过 sublime-snippet 直接 定义相应的快捷键，操作方法，参考 <a href=\"http://www.jianshu.com/p/219de00c8343\">使用 Sublime-snippet 来快速做前端页面</a>, 遇到的问题是设置 scole 时候一直无法 trigger ，原谅写错了，一直以为是这个 scope 对应的 sublime Syntax 中的一样就可以了，查找了上面的链接，才发现 too yong too simple 了，mardown 对应的 scope 是 text.html.mardown</p>\n</li>\n</ol>\n<h4 id=\"qiniu-图库使用\"><a href=\"#qiniu-图库使用\" class=\"headerlink\" title=\"qiniu 图库使用\"></a>qiniu 图库使用</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">λ hexo qiniu i<br>ERROR Plugin load failed: hexo-qiniu-sync<br>SyntaxError: Unexpected token a<br>    at Object.parse (native)<br>    at Object.&lt;anonymous&gt; (E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:10:17)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12<br>    at tryCatcher (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:497:31)<br>    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)<br>    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)<br>    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)<br>    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)<br>    at Promise._resolveCallback (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:424:57)<br>    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:510:17)<br>    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)<br>    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)<br>    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)<br>    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21<br>    at E:\\hexoBlog\\hexo\\node_modules\\graceful-fs\\graceful-fs.js:78:16<br>    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)<br></code></pre></td></tr></table></figure>\n\n<p>一直报错，全部是从 <a href=\"https://github.com/gyk001/hexo-qiniu-sync\">hexo-qiniu-sync</a> 中复制粘贴过来的，只是把七牛的秘钥文件单独出来了，没有找到原因</p>\n<h4 id=\"2016-08-10\"><a href=\"#2016-08-10\" class=\"headerlink\" title=\"2016-08-10\"></a>2016-08-10</h4><p>继续前天的工作，想到了先把秘钥配置写到 _config.xml 中测试了下是 OK 的，那么就是单独读取秘钥文件的时候不成功，可能的原因：</p>\n<ol>\n<li>秘钥路径不正确 改为 <code>./sec/qn.json</code></li>\n<li>qn.json 文件格式不正确，改为了严格的 json 格式 OK 了</li>\n</ol>\n<p>插件的配置 OK 了，看下插件的使用了，官网的使用方式：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\">qnimg</span> qiniu.jpg title:qnimg alt:qnimg %&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>文件保存到根目录下的 static/img 目录下，同步成功了</p>\n<p>页面上不显示：</p>\n<ol>\n<li>我开启了白名单功能，只有白名单中的域名可以加载</li>\n<li>设置了自定义域名功能，需要设置 <code>urlPrefix</code>属性设置为自定义的域名</li>\n</ol>\n<p>每次都贴一次很麻烦啊，直接定义 sublime text snippet: qnimg:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snippet</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">content</span></span><br><span class=\"hljs-tag\">    &gt;</span>&lt;![CDATA[ &#123;% qnimg $&#123;1:imgName&#125; title:$&#123;2:imgTitile&#125; alt:$&#123;2:imgTitle&#125; %&#125;<br>    ]]&gt;&lt;/content<br>  &gt;<br>  <span class=\"hljs-comment\">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tabTrigger</span>&gt;</span>qnimg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tabTrigger</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>text.html.markdown<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snippet</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就完美了 每次 qnimg Tab 下就可以了</p>\n<p>发现个美中不足的地方： <a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/39\">qiniu 中开启了防盗链白名单功能，所以本地 hexo s 时无法实时预览图片？</a> 期望有解决方法</p>\n<h4 id=\"2016-08-12\"><a href=\"#2016-08-12\" class=\"headerlink\" title=\"2016-08-12\"></a>2016-08-12</h4><p>根据作者的介绍使用 <code>offline:true</code>配置可以开启 本地调用功能的，并且更新到 V 1.4.5 版本解决了软连的问题</p>\n<h4 id=\"2016-09-27\"><a href=\"#2016-09-27\" class=\"headerlink\" title=\"2016-09-27\"></a>2016-09-27</h4><p>更新的时候 hexo v3.2.2 更新后 没有了 hexo server 选项了，这也没法开启 offline:true 验证了，hexo 官方确认是个 windows 下的 bug</p>\n<h4 id=\"2016-12-21\"><a href=\"#2016-12-21\" class=\"headerlink\" title=\"2016-12-21\"></a>2016-12-21</h4><p>有时间了，再折腾下上次遗留的问题： <code>hexo-qiniu-sync插件配置好后 hexo server 无法启动了</code></p>\n<ol>\n<li><p> 上次冲洗 hexo init 个 blog 是有 hexo server 命令的，所以肯定了这个是插件引起的问题</p>\n</li>\n<li><p> 在配置_config.yml 中去掉了关于 hexo-qiniu-sync 的配置</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">λ hexo server<br>ERROR Plugin load failed: hexo-qiniu-sync<br>TypeError: Cannot <span class=\"hljs-built_in\">read</span> property <span class=\"hljs-string\">&#x27;secret_file&#x27;</span> of undefined<br>    at Object.&lt;anonymous&gt; (F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:8:21)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)<br>    at F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14<br>    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12<br>    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)<br>    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)<br>    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)<br>    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)<br>    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)<br>    at Promise._resolveCallback (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)<br>    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)<br>    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)<br>    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)<br>    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)<br>    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)<br>    at F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21<br>INFO  Start processing<br>FATAL Something<span class=\"hljs-string\">&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"hljs-string\">Template render error: (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)</span><br><span class=\"hljs-string\">    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)</span><br><span class=\"hljs-string\">    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9</span><br><span class=\"hljs-string\">    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)</span><br><span class=\"hljs-string\">    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)</span><br><span class=\"hljs-string\">    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)</span><br><span class=\"hljs-string\">    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)</span><br><span class=\"hljs-string\">    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19</span><br><span class=\"hljs-string\">    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)</span><br><span class=\"hljs-string\">    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)</span><br><span class=\"hljs-string\">    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)</span><br><span class=\"hljs-string\">    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)</span><br><span class=\"hljs-string\">    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)</span><br><span class=\"hljs-string\">    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)</span><br><span class=\"hljs-string\">    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)</span><br><span class=\"hljs-string\">    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)</span><br><span class=\"hljs-string\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br><span class=\"hljs-string\">FATAL (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">Template render error: (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)</span><br><span class=\"hljs-string\">    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)</span><br><span class=\"hljs-string\">    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9</span><br><span class=\"hljs-string\">    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)</span><br><span class=\"hljs-string\">    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)</span><br><span class=\"hljs-string\">    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)</span><br><span class=\"hljs-string\">    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)</span><br><span class=\"hljs-string\">    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19</span><br><span class=\"hljs-string\">    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)</span><br><span class=\"hljs-string\">    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)</span><br><span class=\"hljs-string\">    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)</span><br><span class=\"hljs-string\">    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)</span><br><span class=\"hljs-string\">    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)</span><br><span class=\"hljs-string\">    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)</span><br><span class=\"hljs-string\">    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)</span><br><span class=\"hljs-string\">    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)</span><br><span class=\"hljs-string\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br><span class=\"hljs-string\"></span><br></code></pre></td></tr></table></figure>\n\n<p>看来是安装了 hexo-qiniu-sync 插件的问题</p>\n<p>搜索了下相关问题，找到了条有价值的信息: <a href=\"http://mp.weixin.qq.com/s?__biz=MzIzNzEzNDMxOA==&idx=1&mid=2651006828&sn=c553c202b1162f6bd37d87a41a8a961d\">Hexo 七牛云同步插件的使用</a></p>\n<blockquote>\n<p>基本的安装、配置在插件主页也有过说明，按照配置即可，这里记录下遇到的坑。注意在_config.yml 中不要配置插件栏如下，否则会报错找不到 hexo server 的命令，可参考问题: <a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/41\">https://github.com/gyk001/hexo-qiniu-sync/issues/41</a></p>\n</blockquote>\n<p>原来官方已经解决了，按照提示注释掉 插件就可以了，再来个测试 OK</p>\n<p>发现刚才测试的 考辛斯的图片并没有同步到七牛 ，并且 deploy 后连接还是原来的域名下的</p>\n<h4 id=\"2017-05-13\"><a href=\"#2017-05-13\" class=\"headerlink\" title=\"2017-05-13\"></a>2017-05-13</h4><p>终于完成了这个 hexo-qiniu-sync 插件的调试，可以痛快的使用了</p>\n<p>下面在弄个自己的<a href=\"/2017/05/13/hexo-theme/\">hexo-theme</a></p>\n<ol>\n<li>前几天测试过从新 <code>hexo init</code> 个新项目的话 是有 <code>hexo server</code> 命令并且能够运行的，看来是 hexo-qiniu-sync 插件出问题了。有时间修复下</li>\n<li>自动部署的问题 看到了个更简洁的: <a href=\"https://www.jianshu.com/p/e22c13d85659\">手把手教你使用 Travis CI 自动部署你的 Hexo 博客到 Github 上</a></li>\n</ol>\n<h4 id=\"2019-08-28\"><a href=\"#2019-08-28\" class=\"headerlink\" title=\"2019-08-28\"></a>2019-08-28</h4><p> 七牛的服务停掉了，算是弃坑七牛了，自动部署时候一直报错！</p>\n<p>新开了篇新文章，整理 <a href=\"/2017/05/13/hexo-theme/\">hexo-theme</a> </p>\n","site":{"data":{}},"excerpt":"<p>一直想弄个自己的博客 记录下自己的技术方面的点点滴滴</p>\n<p>新年第一天上班，正好看到 hexo 可以借助 github.com 构建自己的静态博客，正好可以折腾下！</p>","more":"<h2 id=\"基本的安装\"><a href=\"#基本的安装\" class=\"headerlink\" title=\"基本的安装\"></a>基本的安装</h2><p>(懒癌发作!)都是做开发的不一步步讲解了，直接上参考链接吧：</p>\n<ol>\n<li><a href=\"http://yangjian.me/workspace/building-blog-with-hexo/\">使用 hexo 搭建博客</a> <strong>无效了无奈</strong></li>\n</ol>\n<h3 id=\"本地调试地址端口无效\"><a href=\"#本地调试地址端口无效\" class=\"headerlink\" title=\"本地调试地址端口无效\"></a>本地调试地址端口无效</h3><h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>搜索参考网上的说是端口占用了 把 ip 地址改为常用的 127.0.0.1:4000 就 OK 了<br>修改方法：直接找到<code>node_modules/ hexo-serve/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">hexo.config.server = assign(&#123;<br>  <span class=\"hljs-attr\">log</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">ip</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span><br>&#125;, hexo.config.server);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2016-02-22-更新\"><a href=\"#2016-02-22-更新\" class=\"headerlink\" title=\"2016.02.22 更新\"></a>2016.02.22 更新</h4><p>参考了 <a href=\"https://github.com/hexojs/hexo-server\">hexo-server</a>, 本地服务的 IP ，和 port 可以在启动参数中配置的</p>\n<p>还可以直接写到站点的 配置文件中_config.yml</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">server:<br>  port: <span class=\"hljs-number\">4000</span><br>  <span class=\"hljs-attr\">log</span>: <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">ip</span>: <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">header</span>: <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"主题安装-themes\"><a href=\"#主题安装-themes\" class=\"headerlink\" title=\"主题安装 themes\"></a>主题安装 themes</h3><p>喜欢的主题 <a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a> ，使用文档很详细：<a href=\"http://theme-next.iissnan.com/\">文档地址</a> ，不废话了！</p>\n<p>喜欢的主题列表</p>\n<ol>\n<li><a href=\"https://github.com/heroicyang/hexo-theme-modernist\">hexo-theme-modernist</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n</ol>\n<h4 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h4><p><a href=\"http://duoshuo.com/\">多说</a> 服务停掉了，想法使用 gittalk 或者 gitment</p>\n<h4 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h4><p><a href=\"http://sitecenter.baidu.com/sc-web/\">百度统计</a> ，现在换掉了，改成了 Google analyst</p>\n<h4 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h4><p><a href=\"https://swiftype.com/\">Swiftype</a> 并没使用上</p>\n<h4 id=\"文章摘要\"><a href=\"#文章摘要\" class=\"headerlink\" title=\"文章摘要\"></a>文章摘要</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\">以上是摘要<br>&lt;!--more--&gt;<br>以下是全文<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"部署上线\"><a href=\"#部署上线\" class=\"headerlink\" title=\"部署上线\"></a>部署上线</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h3><p>上面都是配置问题，本地没有问题的，终究要部署到<code>github.com</code> 上的，那么问题来了</p>\n<p>部署上去 无法访问，我是在 git 的根目录下有新建了个 blog 目录，因为原来的 git 下有东西了</p>\n<p>怀疑是自己的 git root 下面已经有东西了，在子目录 blog 下影响的，把 git remote 改为新的地址：<code>git@github.com:sumaolin/hexo.git</code></p>\n<p>可是 hexo deploy 还是报错</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/deployment.html\">查官方文档</a>，发现需要插件 hexo-deployer-git 安装后 hexo deploy 报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">Permission denied (publickey).<br>fatal: Could not <span class=\"hljs-built_in\">read</span> from remote repository.<br></code></pre></td></tr></table></figure>\n\n<p>搜索相关的 <code>git Permission denied</code>的问题</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://blog.itpub.net/25851087/viewspace-1262468/\">由于 SSH 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法 </a></li>\n<li><a href=\"http://my.oschina.net/grnick/blog/201155\">Github 访问时出现 Permission denied (public key)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2499331/git-with-ssh-on-windows\">Git with SSH on Windows</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2643502/git-permission-denied-publickey\">Git - Permission denied (publickey)</a></li>\n</ol>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li><p>首先想到的是重新生产公钥和密钥，重新配置 github 账号中的公钥，结果行不通</p>\n</li>\n<li><p>参考链接 1 中，修改了 IdentityFile 的值，还是没有起作用</p>\n</li>\n<li><p>通过参考链接 2 中</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ssh -v git@github.com<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看使用到的秘钥，可以看到有 id_rsa，可是不起作用，为什么？</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ls /.ssh/ 查看目录下的私钥<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只有 knowe_hosts</p>\n</blockquote>\n<p>可是我查看的 username/.ssh/ 目录下面有 id_rsa 并且公钥已经加入到 github 中了,百思不得其解啊，突然想到 /.ssh/ 不是 username/.ssh/ 应该是 ssh 单独配置的，通过<code>where ssh</code> 命令查看，当前 ssh 使用的 git 安装的 ssh, 到 git 安装目录 ：<code>C:\\Program Files (x86)\\Git</code> 果然找到了<code>.ssh/</code> 目录，里面有新生产的公钥和密钥，添加到 github 中就可以了</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;sumaolin619@gmail.com&quot;</span>  // 生产ssh使用的公钥和私钥<br>ssh -t git@github.com // 测试ssh 是否配置成功<br>ssh -v git@github.com // 查看详细的请求过程，包括使用的公钥密钥<br><span class=\"hljs-built_in\">where</span> ssh // 查看当前的ssh 的路径<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">hexo 你的博客</a> <strong>推荐</strong></p>\n<blockquote>\n<p>博客的主题也挺喜欢的</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"后续更新\"><a href=\"#后续更新\" class=\"headerlink\" title=\"后续更新\"></a>后续更新</h2><h3 id=\"github-amp-coding-同时部署\"><a href=\"#github-amp-coding-同时部署\" class=\"headerlink\" title=\"github &amp; coding 同时部署\"></a>github &amp; coding 同时部署</h3><ol>\n<li>github &amp; coding.net 一键同时部署（coding.net 通过 webhook 自动部署)，国内国外区分访问</li>\n</ol>\n<h4 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ol>\n<li><p><a href=\"https://segmentfault.com/a/1190000002900848\">在 Coding 上搭建 Hexo 个人博客！</a></p>\n<p>关于 webhook 的自动部署 说的很明白</p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\">hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding</a></p>\n<p>关于 deplay github &amp; coding.net 的写法 ，国内国外区分访问</p>\n</li>\n</ol>\n<h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>迁移到 coding.net 后，对与国内的的线路一直无法访问，一直以为修改 DNS 服务商后 没有生效，所以等 48 小时后的今天访问，还是不生效，感觉是自己配置的问题了，由于先参考了<a href=\"https://segmentfault.com/a/1190000002900848\">在 Coding 上搭建 Hexo 个人博客！</a>, 潜意识的 以为只能通过 coding.net 的 演示功能部署呢，今天找问题时候发现，coding.net 的 pages 功能，还可以免费绑定域名（演示平台需要会员才可以绑定域名），所以新建了个个人博客的项目，改_config.yml 直接部署到该项目，把 cname 解析到 sumaolin.coding.me 而不是 sumaolin.coding.io （演示功能用到的域名），几秒后可以访问了！</p>\n<p>其实 <a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\">hexo 干货系列：（四）将 hexo 博客同时托管到 github 和 coding</a> 提到过 coding.net 两种部署方式的：</p>\n<blockquote>\n<p>部署博客方式有两种，第一种就是 pages 服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages 方式也很简单就是在 source/需要创建一个空白文件，至于原因，是因为 coding.net 需要这个文件来作为以静态文件部署的标志。就是说看到这个 Staticfile 就知道按照静态文件来发布。</p>\n</blockquote>\n<p>以后看资料要仔细了，自己的坑自己踩啊！另外 pages 部署的时候不用 创建空白文件 Staticfile 也可以！</p>\n<h3 id=\"图片的使用\"><a href=\"#图片的使用\" class=\"headerlink\" title=\"图片的使用\"></a>图片的使用</h3><h4 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ol>\n<li><p><a href=\"http://blog.shiqichan.com/create-blog-with-hexo/\">使用 Hexo 创建十七蝉的日志 # 如何加入图片</a></p>\n<blockquote>\n<p>本地存储图片，将图片放在 source/images 目录下，然后</p>\n<figure class=\"highlight plaintext\"><figcaption><span>text](/img/QQ截图20160403180630.jpg \"测试，本地图片\")</span></figcaption><table><tr><td class=\"code\"><pre><code class=\"hljs ![Alt\"><br></code></pre></td></tr></table></figure></blockquote>\n</li>\n<li><p><a href=\"http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/\">使用七牛为 Hexo 存储图片</a></p>\n<p>从上文中找到了 相关的插件 <a href=\"https://github.com/gyk001/hexo-qiniu-sync\">hexo-qiniu-sync</a>, 插件已经更新完善了，所以直接使用该插件了，参考了该插件的文档</p>\n<p>因为本域名没有备案，还要设置 dns 等</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/pxzy/article/details/8490058\">Sublime Text 2 中怎样查找 scope 的名称</a></p>\n<p>使用过 sublime plugin “MarkdownEditing” 快捷键 mdi, mdl, mdh1 挺方便的，不过不喜欢在预览模式下写，所以通过 sublime-snippet 直接 定义相应的快捷键，操作方法，参考 <a href=\"http://www.jianshu.com/p/219de00c8343\">使用 Sublime-snippet 来快速做前端页面</a>, 遇到的问题是设置 scole 时候一直无法 trigger ，原谅写错了，一直以为是这个 scope 对应的 sublime Syntax 中的一样就可以了，查找了上面的链接，才发现 too yong too simple 了，mardown 对应的 scope 是 text.html.mardown</p>\n</li>\n</ol>\n<h4 id=\"qiniu-图库使用\"><a href=\"#qiniu-图库使用\" class=\"headerlink\" title=\"qiniu 图库使用\"></a>qiniu 图库使用</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">λ hexo qiniu i<br>ERROR Plugin load failed: hexo-qiniu-sync<br>SyntaxError: Unexpected token a<br>    at Object.parse (native)<br>    at Object.&lt;anonymous&gt; (E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:10:17)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12<br>    at tryCatcher (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:497:31)<br>    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)<br>    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)<br>    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)<br>    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)<br>    at Promise._resolveCallback (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:424:57)<br>    at Promise._settlePromiseFromHandler (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:510:17)<br>    at Promise._settlePromise (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:555:18)<br>    at Promise._settlePromise0 (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:600:10)<br>    at Promise._settlePromises (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:683:18)<br>    at Promise._fulfill (E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\promise.js:624:18)<br>    at E:\\hexoBlog\\hexo\\node_modules\\hexo-fs\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21<br>    at E:\\hexoBlog\\hexo\\node_modules\\graceful-fs\\graceful-fs.js:78:16<br>    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)<br></code></pre></td></tr></table></figure>\n\n<p>一直报错，全部是从 <a href=\"https://github.com/gyk001/hexo-qiniu-sync\">hexo-qiniu-sync</a> 中复制粘贴过来的，只是把七牛的秘钥文件单独出来了，没有找到原因</p>\n<h4 id=\"2016-08-10\"><a href=\"#2016-08-10\" class=\"headerlink\" title=\"2016-08-10\"></a>2016-08-10</h4><p>继续前天的工作，想到了先把秘钥配置写到 _config.xml 中测试了下是 OK 的，那么就是单独读取秘钥文件的时候不成功，可能的原因：</p>\n<ol>\n<li>秘钥路径不正确 改为 <code>./sec/qn.json</code></li>\n<li>qn.json 文件格式不正确，改为了严格的 json 格式 OK 了</li>\n</ol>\n<p>插件的配置 OK 了，看下插件的使用了，官网的使用方式：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\">qnimg</span> qiniu.jpg title:qnimg alt:qnimg %&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>文件保存到根目录下的 static/img 目录下，同步成功了</p>\n<p>页面上不显示：</p>\n<ol>\n<li>我开启了白名单功能，只有白名单中的域名可以加载</li>\n<li>设置了自定义域名功能，需要设置 <code>urlPrefix</code>属性设置为自定义的域名</li>\n</ol>\n<p>每次都贴一次很麻烦啊，直接定义 sublime text snippet: qnimg:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snippet</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">content</span></span><br><span class=\"hljs-tag\">    &gt;</span>&lt;![CDATA[ &#123;% qnimg $&#123;1:imgName&#125; title:$&#123;2:imgTitile&#125; alt:$&#123;2:imgTitle&#125; %&#125;<br>    ]]&gt;&lt;/content<br>  &gt;<br>  <span class=\"hljs-comment\">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tabTrigger</span>&gt;</span>qnimg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tabTrigger</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>text.html.markdown<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snippet</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就完美了 每次 qnimg Tab 下就可以了</p>\n<p>发现个美中不足的地方： <a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/39\">qiniu 中开启了防盗链白名单功能，所以本地 hexo s 时无法实时预览图片？</a> 期望有解决方法</p>\n<h4 id=\"2016-08-12\"><a href=\"#2016-08-12\" class=\"headerlink\" title=\"2016-08-12\"></a>2016-08-12</h4><p>根据作者的介绍使用 <code>offline:true</code>配置可以开启 本地调用功能的，并且更新到 V 1.4.5 版本解决了软连的问题</p>\n<h4 id=\"2016-09-27\"><a href=\"#2016-09-27\" class=\"headerlink\" title=\"2016-09-27\"></a>2016-09-27</h4><p>更新的时候 hexo v3.2.2 更新后 没有了 hexo server 选项了，这也没法开启 offline:true 验证了，hexo 官方确认是个 windows 下的 bug</p>\n<h4 id=\"2016-12-21\"><a href=\"#2016-12-21\" class=\"headerlink\" title=\"2016-12-21\"></a>2016-12-21</h4><p>有时间了，再折腾下上次遗留的问题： <code>hexo-qiniu-sync插件配置好后 hexo server 无法启动了</code></p>\n<ol>\n<li><p> 上次冲洗 hexo init 个 blog 是有 hexo server 命令的，所以肯定了这个是插件引起的问题</p>\n</li>\n<li><p> 在配置_config.yml 中去掉了关于 hexo-qiniu-sync 的配置</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">λ hexo server<br>ERROR Plugin load failed: hexo-qiniu-sync<br>TypeError: Cannot <span class=\"hljs-built_in\">read</span> property <span class=\"hljs-string\">&#x27;secret_file&#x27;</span> of undefined<br>    at Object.&lt;anonymous&gt; (F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\config.js:8:21)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:213:21)<br>    at F:\\nodeDev\\hexo\\node_modules\\hexo-qiniu-sync\\index.js:9:14<br>    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\index.js:229:12<br>    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)<br>    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)<br>    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)<br>    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)<br>    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)<br>    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)<br>    at Promise._resolveCallback (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)<br>    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)<br>    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)<br>    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)<br>    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)<br>    at Promise._fulfill (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)<br>    at F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21<br>INFO  Start processing<br>FATAL Something<span class=\"hljs-string\">&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"hljs-string\">Template render error: (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)</span><br><span class=\"hljs-string\">    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)</span><br><span class=\"hljs-string\">    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9</span><br><span class=\"hljs-string\">    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)</span><br><span class=\"hljs-string\">    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)</span><br><span class=\"hljs-string\">    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)</span><br><span class=\"hljs-string\">    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)</span><br><span class=\"hljs-string\">    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19</span><br><span class=\"hljs-string\">    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)</span><br><span class=\"hljs-string\">    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)</span><br><span class=\"hljs-string\">    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)</span><br><span class=\"hljs-string\">    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)</span><br><span class=\"hljs-string\">    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)</span><br><span class=\"hljs-string\">    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)</span><br><span class=\"hljs-string\">    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)</span><br><span class=\"hljs-string\">    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)</span><br><span class=\"hljs-string\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br><span class=\"hljs-string\">FATAL (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">Template render error: (unknown path) [Line 91, Column 2]</span><br><span class=\"hljs-string\">  unknown block tag: qnimg</span><br><span class=\"hljs-string\">    at Object.exports.prettifyError (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\lib.js:34:15)</span><br><span class=\"hljs-string\">    at Obj.extend.render (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:469:27)</span><br><span class=\"hljs-string\">    at Obj.extend.renderString (F:\\nodeDev\\hexo\\node_modules\\nunjucks\\src\\environment.js:327:21)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:66:9</span><br><span class=\"hljs-string\">    at Promise._execute (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\debuggability.js:299:9)</span><br><span class=\"hljs-string\">    at Promise._resolveFromExecutor (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:481:18)</span><br><span class=\"hljs-string\">    at new Promise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:77:14)</span><br><span class=\"hljs-string\">    at Tag.render (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\extend\\tag.js:64:10)</span><br><span class=\"hljs-string\">    at Object.tagFilter [as onRenderEnd] (F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\post.js:253:16)</span><br><span class=\"hljs-string\">    at F:\\nodeDev\\hexo\\node_modules\\hexo\\lib\\hexo\\render.js:65:19</span><br><span class=\"hljs-string\">    at tryCatcher (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)</span><br><span class=\"hljs-string\">    at Promise._settlePromiseFromHandler (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:510:31)</span><br><span class=\"hljs-string\">    at Promise._settlePromise (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)</span><br><span class=\"hljs-string\">    at Promise._settlePromise0 (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)</span><br><span class=\"hljs-string\">    at Promise._settlePromises (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)</span><br><span class=\"hljs-string\">    at Async._drainQueue (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:138:16)</span><br><span class=\"hljs-string\">    at Async._drainQueues (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:148:10)</span><br><span class=\"hljs-string\">    at Immediate.Async.drainQueues [as _onImmediate] (F:\\nodeDev\\hexo\\node_modules\\bluebird\\js\\release\\async.js:17:14)</span><br><span class=\"hljs-string\">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br><span class=\"hljs-string\"></span><br></code></pre></td></tr></table></figure>\n\n<p>看来是安装了 hexo-qiniu-sync 插件的问题</p>\n<p>搜索了下相关问题，找到了条有价值的信息: <a href=\"http://mp.weixin.qq.com/s?__biz=MzIzNzEzNDMxOA==&idx=1&mid=2651006828&sn=c553c202b1162f6bd37d87a41a8a961d\">Hexo 七牛云同步插件的使用</a></p>\n<blockquote>\n<p>基本的安装、配置在插件主页也有过说明，按照配置即可，这里记录下遇到的坑。注意在_config.yml 中不要配置插件栏如下，否则会报错找不到 hexo server 的命令，可参考问题: <a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/41\">https://github.com/gyk001/hexo-qiniu-sync/issues/41</a></p>\n</blockquote>\n<p>原来官方已经解决了，按照提示注释掉 插件就可以了，再来个测试 OK</p>\n<p>发现刚才测试的 考辛斯的图片并没有同步到七牛 ，并且 deploy 后连接还是原来的域名下的</p>\n<h4 id=\"2017-05-13\"><a href=\"#2017-05-13\" class=\"headerlink\" title=\"2017-05-13\"></a>2017-05-13</h4><p>终于完成了这个 hexo-qiniu-sync 插件的调试，可以痛快的使用了</p>\n<p>下面在弄个自己的<a href=\"/2017/05/13/hexo-theme/\">hexo-theme</a></p>\n<ol>\n<li>前几天测试过从新 <code>hexo init</code> 个新项目的话 是有 <code>hexo server</code> 命令并且能够运行的，看来是 hexo-qiniu-sync 插件出问题了。有时间修复下</li>\n<li>自动部署的问题 看到了个更简洁的: <a href=\"https://www.jianshu.com/p/e22c13d85659\">手把手教你使用 Travis CI 自动部署你的 Hexo 博客到 Github 上</a></li>\n</ol>\n<h4 id=\"2019-08-28\"><a href=\"#2019-08-28\" class=\"headerlink\" title=\"2019-08-28\"></a>2019-08-28</h4><p> 七牛的服务停掉了，算是弃坑七牛了，自动部署时候一直报错！</p>\n<p>新开了篇新文章，整理 <a href=\"/2017/05/13/hexo-theme/\">hexo-theme</a> </p>"},{"title":"After hello hexo","date":"2016-02-17T10:03:20.000Z","_content":"\n建好了网站下面就是优化了，主要的几个问题\n\n1. 自动化部署 TravisCI\n2. 评论\n3. PWA\n4. theme 主题\n\n<!--more-->\n\n## 自动化部署 TravisCI\n\n### Reference\n\n1. [持续集成在Hexo自动化部署上的实践](https://qinyuanpei.github.io/posts/3521618732/) **推荐** \n\n   持续集成的概念讲的很通透，讲起因，讲落地的困难，到 hexo 的 TravisCI\n\n2. [HexoClient使用帮助](https://www.mspring.org/2018/11/29/HexoClient使用帮助/) \n\n\n\n\n\n## 评论\n\n虽然流量很少，不过也少了互动，不知道来的用户的想法，少了反馈\n\n适用于hexo的评论组件挺多的，如：[多说](http://duoshuo.com/) ，[畅言](https://changyan.kuaizhan.com/) 等依赖服务端的评论服务，也有无服务端依赖的如： [Valine](https://valine.js.org/) ，[Gitalk](https://github.com/gitalk/gitalk) ，[Gitment](https://github.com/imsun/gitment) ，[Vssue](https://vssue.js.org/) 。\n\n1. 多说\n\n   服务停掉了\n\n2. 畅言\n\n   > - 需要填入备案号且审核通过\n   > - 用户发表评论要绑定手机号\n   > - 有广告\n\n   Reference： [为 Hexo 的 Indigo 主题添加畅言评论系统](https://ziyue.life/201812/ad52hc4b.html) \n\n   上面列出几条，有一条都要 pass 掉了\n\n3. [Valine](https://valine.js.org/) 一款快速、简洁且高效的无后端评论系统\n\n   > Valine 诞生于2017年8月7日，是一款基于[LeanCloud](https://leancloud.cn/)的快速、简洁且高效的无后端评论系统\n\n4. [Gitalk](https://github.com/gitalk/gitalk)  is a modern comment component based on Github Issue and Preact\n\n5. [Gitment](https://github.com/imsun/gitment) \n\n   Reference：[Gitment：使用 GitHub Issues 搭建评论系统](https://imsun.net/posts/gitment-introduction/) ，中文的使用说明\n\n6. [Vssue](https://vssue.js.org/) Vue 驱动的、基于 Issue 的评论插件\n\n   > - **Vssue** 支持 Github、Gitlab 和 Bitbucket，并且很容易扩展到其它平台。**Gitment** 和 **Gitalk** 仅支持 Github。\n   > - **Vssue** 可以发表、编辑、删除评论。**Gitment** 和 **Gitalk** 仅能发表评论。\n   > - **Vssue** 是基于 [Vue.js](https://vuejs.org/) 开发的，可以集成到 Vue 项目中，并且提供了一个 [Vuepress 插件](https://vssue.js.org/zh/guide/vuepress.html)。 **Gitment**基于原生JS，而 **Gitalk** 基于 [Preact](https://github.com/developit/preact)。\n\n\n\n### 2019.10.30\n\n选择了Gittalk，在 [hexo-theme-material-indigo](https://github.com/yscoder/hexo-theme-indigo) 的 [wiki](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85) 中有gittalk 的 [配置](https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE)，本来是想改主题代码呢，看代码有相关的配置，就修改了 主题下`_config.yml`  下面的评论配置就可以了，\"集成了 [disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[gitment](https://github.com/imsun/gitment) 和 [valine](https://valine.js.org/)，开启其一即可\"\n\n\n\n使用 [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) 主题时候，配置了`baidu_url_submitter` 但是一直报错，今天也解决掉了，是对YML 语法的不了解导致的，其中的数组是用 `-`  开头的，所以一直报错，得看下 [YAML 语言教程](http://www.ruanyifeng.com/blog/2016/07/yaml.html) 的提高下\n\n\n\n还有个不影响运行，但是一直提示的错误：`Error: Cannot find module './build/Release/DTraceProviderBindings'`  ，重新安装了hexo `npm install hexo --no-optional`  解决了，搜索到的参考：[Hexo常见问题解决方案](https://xuanwo.io/2014/08/14/hexo-usual-problem/) \n\n\n\n折腾了好久，感觉blog 也没啥有营养的资料，现在整体想要的功能都有了，主要是评论，后面暂时放弃 PWA 的优化，和主题定制（也没头绪想要定制成什么样子），暂时放一放 hexo 的折腾，专注下blog 内容了\n\n\n\n## PWA\n\n> 渐进式应用(Progressive Web Apps，PWA)是Google提出的新一代Web应用概念，其目的是提供可靠、快速、接近Native应用的服务方案。\n\nGithub page 支持 https，自己还么升级呢，同时 PWA 也算 速度上的优化！\n\n### Reference\n\n1. [迁移Hexo博客到Google渐进式Web应用(PWA)](https://qinyuanpei.github.io/posts/450254281/) \n\n   使用的插件： [hexo-offline](https://github.com/JLHwung/hexo-offline) \n\n2. [五步让 Hexo 博客支持 PWA](https://richardcao.me/2017/09/03/Hexo-PWA/)  \n\n3. [hexo博客支持PWA了](https://github.com/funnycoderstar/funnycoderstar/issues/6) \n\n\n\n\n\n## Theme 主题\n\n想自己写一套呢，不过现在看中一套 Meterial 风格的theme ： [hexo-theme-material-indigo](https://github.com/yscoder/hexo-theme-indigo) 和它的进化版本： [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) ，试着改写下吧\n\n### Reference\n\n1. [Hexo 主题制作指南](https://chensd.com/2016-06/hexo-theme-guide.html) 很详细的 五星推荐\n\n2. [如何写一个自己的hexo主题](http://mrzhang123.github.io/2017/04/01/hexo-theme/) \n\n3. [Create an Hexo Theme - Part 1: Index](http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/) \n\n4. [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) 使用文档 \n\n   不错的文档，其实是搭建hexo的整个过程，主题风格也喜欢\n\n\n\n## Feature\n\n1. 最近写东西都是在 Markdown 中整理，使用的编辑器是 Typora ，想着和hexo 组合起来，做到一键部署更新呢！\n\n\n\n","source":"_posts/hexo-theme.md","raw":"---\ntitle: After hello hexo\ndate: 2016-02-17 18:03:20\ntags: [heox, blog, node]\ncategories: node\n\n---\n\n建好了网站下面就是优化了，主要的几个问题\n\n1. 自动化部署 TravisCI\n2. 评论\n3. PWA\n4. theme 主题\n\n<!--more-->\n\n## 自动化部署 TravisCI\n\n### Reference\n\n1. [持续集成在Hexo自动化部署上的实践](https://qinyuanpei.github.io/posts/3521618732/) **推荐** \n\n   持续集成的概念讲的很通透，讲起因，讲落地的困难，到 hexo 的 TravisCI\n\n2. [HexoClient使用帮助](https://www.mspring.org/2018/11/29/HexoClient使用帮助/) \n\n\n\n\n\n## 评论\n\n虽然流量很少，不过也少了互动，不知道来的用户的想法，少了反馈\n\n适用于hexo的评论组件挺多的，如：[多说](http://duoshuo.com/) ，[畅言](https://changyan.kuaizhan.com/) 等依赖服务端的评论服务，也有无服务端依赖的如： [Valine](https://valine.js.org/) ，[Gitalk](https://github.com/gitalk/gitalk) ，[Gitment](https://github.com/imsun/gitment) ，[Vssue](https://vssue.js.org/) 。\n\n1. 多说\n\n   服务停掉了\n\n2. 畅言\n\n   > - 需要填入备案号且审核通过\n   > - 用户发表评论要绑定手机号\n   > - 有广告\n\n   Reference： [为 Hexo 的 Indigo 主题添加畅言评论系统](https://ziyue.life/201812/ad52hc4b.html) \n\n   上面列出几条，有一条都要 pass 掉了\n\n3. [Valine](https://valine.js.org/) 一款快速、简洁且高效的无后端评论系统\n\n   > Valine 诞生于2017年8月7日，是一款基于[LeanCloud](https://leancloud.cn/)的快速、简洁且高效的无后端评论系统\n\n4. [Gitalk](https://github.com/gitalk/gitalk)  is a modern comment component based on Github Issue and Preact\n\n5. [Gitment](https://github.com/imsun/gitment) \n\n   Reference：[Gitment：使用 GitHub Issues 搭建评论系统](https://imsun.net/posts/gitment-introduction/) ，中文的使用说明\n\n6. [Vssue](https://vssue.js.org/) Vue 驱动的、基于 Issue 的评论插件\n\n   > - **Vssue** 支持 Github、Gitlab 和 Bitbucket，并且很容易扩展到其它平台。**Gitment** 和 **Gitalk** 仅支持 Github。\n   > - **Vssue** 可以发表、编辑、删除评论。**Gitment** 和 **Gitalk** 仅能发表评论。\n   > - **Vssue** 是基于 [Vue.js](https://vuejs.org/) 开发的，可以集成到 Vue 项目中，并且提供了一个 [Vuepress 插件](https://vssue.js.org/zh/guide/vuepress.html)。 **Gitment**基于原生JS，而 **Gitalk** 基于 [Preact](https://github.com/developit/preact)。\n\n\n\n### 2019.10.30\n\n选择了Gittalk，在 [hexo-theme-material-indigo](https://github.com/yscoder/hexo-theme-indigo) 的 [wiki](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85) 中有gittalk 的 [配置](https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE)，本来是想改主题代码呢，看代码有相关的配置，就修改了 主题下`_config.yml`  下面的评论配置就可以了，\"集成了 [disqus](https://disqus.com/)、[友言](http://www.uyan.cc/)、[gitment](https://github.com/imsun/gitment) 和 [valine](https://valine.js.org/)，开启其一即可\"\n\n\n\n使用 [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) 主题时候，配置了`baidu_url_submitter` 但是一直报错，今天也解决掉了，是对YML 语法的不了解导致的，其中的数组是用 `-`  开头的，所以一直报错，得看下 [YAML 语言教程](http://www.ruanyifeng.com/blog/2016/07/yaml.html) 的提高下\n\n\n\n还有个不影响运行，但是一直提示的错误：`Error: Cannot find module './build/Release/DTraceProviderBindings'`  ，重新安装了hexo `npm install hexo --no-optional`  解决了，搜索到的参考：[Hexo常见问题解决方案](https://xuanwo.io/2014/08/14/hexo-usual-problem/) \n\n\n\n折腾了好久，感觉blog 也没啥有营养的资料，现在整体想要的功能都有了，主要是评论，后面暂时放弃 PWA 的优化，和主题定制（也没头绪想要定制成什么样子），暂时放一放 hexo 的折腾，专注下blog 内容了\n\n\n\n## PWA\n\n> 渐进式应用(Progressive Web Apps，PWA)是Google提出的新一代Web应用概念，其目的是提供可靠、快速、接近Native应用的服务方案。\n\nGithub page 支持 https，自己还么升级呢，同时 PWA 也算 速度上的优化！\n\n### Reference\n\n1. [迁移Hexo博客到Google渐进式Web应用(PWA)](https://qinyuanpei.github.io/posts/450254281/) \n\n   使用的插件： [hexo-offline](https://github.com/JLHwung/hexo-offline) \n\n2. [五步让 Hexo 博客支持 PWA](https://richardcao.me/2017/09/03/Hexo-PWA/)  \n\n3. [hexo博客支持PWA了](https://github.com/funnycoderstar/funnycoderstar/issues/6) \n\n\n\n\n\n## Theme 主题\n\n想自己写一套呢，不过现在看中一套 Meterial 风格的theme ： [hexo-theme-material-indigo](https://github.com/yscoder/hexo-theme-indigo) 和它的进化版本： [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) ，试着改写下吧\n\n### Reference\n\n1. [Hexo 主题制作指南](https://chensd.com/2016-06/hexo-theme-guide.html) 很详细的 五星推荐\n\n2. [如何写一个自己的hexo主题](http://mrzhang123.github.io/2017/04/01/hexo-theme/) \n\n3. [Create an Hexo Theme - Part 1: Index](http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/) \n\n4. [hexo-theme-indigo-plus](https://github.com/abelsu7/hexo-theme-indigo-plus) 使用文档 \n\n   不错的文档，其实是搭建hexo的整个过程，主题风格也喜欢\n\n\n\n## Feature\n\n1. 最近写东西都是在 Markdown 中整理，使用的编辑器是 Typora ，想着和hexo 组合起来，做到一键部署更新呢！\n\n\n\n","slug":"hexo-theme","published":1,"updated":"2022-01-20T04:12:09.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0t000e7uo06c256u7z","content":"<p>建好了网站下面就是优化了，主要的几个问题</p>\n<ol>\n<li>自动化部署 TravisCI</li>\n<li>评论</li>\n<li>PWA</li>\n<li>theme 主题</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"自动化部署-TravisCI\"><a href=\"#自动化部署-TravisCI\" class=\"headerlink\" title=\"自动化部署 TravisCI\"></a>自动化部署 TravisCI</h2><h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://qinyuanpei.github.io/posts/3521618732/\">持续集成在Hexo自动化部署上的实践</a> <strong>推荐</strong> </p>\n<p>持续集成的概念讲的很通透，讲起因，讲落地的困难，到 hexo 的 TravisCI</p>\n</li>\n<li><p><a href=\"https://www.mspring.org/2018/11/29/HexoClient%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/\">HexoClient使用帮助</a> </p>\n</li>\n</ol>\n<h2 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h2><p>虽然流量很少，不过也少了互动，不知道来的用户的想法，少了反馈</p>\n<p>适用于hexo的评论组件挺多的，如：<a href=\"http://duoshuo.com/\">多说</a> ，<a href=\"https://changyan.kuaizhan.com/\">畅言</a> 等依赖服务端的评论服务，也有无服务端依赖的如： <a href=\"https://valine.js.org/\">Valine</a> ，<a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> ，<a href=\"https://github.com/imsun/gitment\">Gitment</a> ，<a href=\"https://vssue.js.org/\">Vssue</a> 。</p>\n<ol>\n<li><p>多说</p>\n<p>服务停掉了</p>\n</li>\n<li><p>畅言</p>\n<blockquote>\n<ul>\n<li>需要填入备案号且审核通过</li>\n<li>用户发表评论要绑定手机号</li>\n<li>有广告</li>\n</ul>\n</blockquote>\n<p>Reference： <a href=\"https://ziyue.life/201812/ad52hc4b.html\">为 Hexo 的 Indigo 主题添加畅言评论系统</a> </p>\n<p>上面列出几条，有一条都要 pass 掉了</p>\n</li>\n<li><p><a href=\"https://valine.js.org/\">Valine</a> 一款快速、简洁且高效的无后端评论系统</p>\n<blockquote>\n<p>Valine 诞生于2017年8月7日，是一款基于<a href=\"https://leancloud.cn/\">LeanCloud</a>的快速、简洁且高效的无后端评论系统</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/gitalk/gitalk\">Gitalk</a>  is a modern comment component based on Github Issue and Preact</p>\n</li>\n<li><p><a href=\"https://github.com/imsun/gitment\">Gitment</a> </p>\n<p>Reference：<a href=\"https://imsun.net/posts/gitment-introduction/\">Gitment：使用 GitHub Issues 搭建评论系统</a> ，中文的使用说明</p>\n</li>\n<li><p><a href=\"https://vssue.js.org/\">Vssue</a> Vue 驱动的、基于 Issue 的评论插件</p>\n<blockquote>\n<ul>\n<li><strong>Vssue</strong> 支持 Github、Gitlab 和 Bitbucket，并且很容易扩展到其它平台。<strong>Gitment</strong> 和 <strong>Gitalk</strong> 仅支持 Github。</li>\n<li><strong>Vssue</strong> 可以发表、编辑、删除评论。<strong>Gitment</strong> 和 <strong>Gitalk</strong> 仅能发表评论。</li>\n<li><strong>Vssue</strong> 是基于 <a href=\"https://vuejs.org/\">Vue.js</a> 开发的，可以集成到 Vue 项目中，并且提供了一个 <a href=\"https://vssue.js.org/zh/guide/vuepress.html\">Vuepress 插件</a>。 <strong>Gitment</strong>基于原生JS，而 <strong>Gitalk</strong> 基于 <a href=\"https://github.com/developit/preact\">Preact</a>。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2019-10-30\"><a href=\"#2019-10-30\" class=\"headerlink\" title=\"2019.10.30\"></a>2019.10.30</h3><p>选择了Gittalk，在 <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-material-indigo</a> 的 <a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\">wiki</a> 中有gittalk 的 <a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE\">配置</a>，本来是想改主题代码呢，看代码有相关的配置，就修改了 主题下<code>_config.yml</code>  下面的评论配置就可以了，”集成了 <a href=\"https://disqus.com/\">disqus</a>、<a href=\"http://www.uyan.cc/\">友言</a>、<a href=\"https://github.com/imsun/gitment\">gitment</a> 和 <a href=\"https://valine.js.org/\">valine</a>，开启其一即可”</p>\n<p>使用 <a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> 主题时候，配置了<code>baidu_url_submitter</code> 但是一直报错，今天也解决掉了，是对YML 语法的不了解导致的，其中的数组是用 <code>-</code>  开头的，所以一直报错，得看下 <a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html\">YAML 语言教程</a> 的提高下</p>\n<p>还有个不影响运行，但是一直提示的错误：<code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</code>  ，重新安装了hexo <code>npm install hexo --no-optional</code>  解决了，搜索到的参考：<a href=\"https://xuanwo.io/2014/08/14/hexo-usual-problem/\">Hexo常见问题解决方案</a> </p>\n<p>折腾了好久，感觉blog 也没啥有营养的资料，现在整体想要的功能都有了，主要是评论，后面暂时放弃 PWA 的优化，和主题定制（也没头绪想要定制成什么样子），暂时放一放 hexo 的折腾，专注下blog 内容了</p>\n<h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><blockquote>\n<p>渐进式应用(Progressive Web Apps，PWA)是Google提出的新一代Web应用概念，其目的是提供可靠、快速、接近Native应用的服务方案。</p>\n</blockquote>\n<p>Github page 支持 https，自己还么升级呢，同时 PWA 也算 速度上的优化！</p>\n<h3 id=\"Reference-1\"><a href=\"#Reference-1\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://qinyuanpei.github.io/posts/450254281/\">迁移Hexo博客到Google渐进式Web应用(PWA)</a> </p>\n<p>使用的插件： <a href=\"https://github.com/JLHwung/hexo-offline\">hexo-offline</a> </p>\n</li>\n<li><p><a href=\"https://richardcao.me/2017/09/03/Hexo-PWA/\">五步让 Hexo 博客支持 PWA</a>  </p>\n</li>\n<li><p><a href=\"https://github.com/funnycoderstar/funnycoderstar/issues/6\">hexo博客支持PWA了</a> </p>\n</li>\n</ol>\n<h2 id=\"Theme-主题\"><a href=\"#Theme-主题\" class=\"headerlink\" title=\"Theme 主题\"></a>Theme 主题</h2><p>想自己写一套呢，不过现在看中一套 Meterial 风格的theme ： <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-material-indigo</a> 和它的进化版本： <a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> ，试着改写下吧</p>\n<h3 id=\"Reference-2\"><a href=\"#Reference-2\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://chensd.com/2016-06/hexo-theme-guide.html\">Hexo 主题制作指南</a> 很详细的 五星推荐</p>\n</li>\n<li><p><a href=\"http://mrzhang123.github.io/2017/04/01/hexo-theme/\">如何写一个自己的hexo主题</a> </p>\n</li>\n<li><p><a href=\"http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/\">Create an Hexo Theme - Part 1: Index</a> </p>\n</li>\n<li><p><a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> 使用文档 </p>\n<p>不错的文档，其实是搭建hexo的整个过程，主题风格也喜欢</p>\n</li>\n</ol>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ol>\n<li>最近写东西都是在 Markdown 中整理，使用的编辑器是 Typora ，想着和hexo 组合起来，做到一键部署更新呢！</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>建好了网站下面就是优化了，主要的几个问题</p>\n<ol>\n<li>自动化部署 TravisCI</li>\n<li>评论</li>\n<li>PWA</li>\n<li>theme 主题</li>\n</ol>","more":"<h2 id=\"自动化部署-TravisCI\"><a href=\"#自动化部署-TravisCI\" class=\"headerlink\" title=\"自动化部署 TravisCI\"></a>自动化部署 TravisCI</h2><h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://qinyuanpei.github.io/posts/3521618732/\">持续集成在Hexo自动化部署上的实践</a> <strong>推荐</strong> </p>\n<p>持续集成的概念讲的很通透，讲起因，讲落地的困难，到 hexo 的 TravisCI</p>\n</li>\n<li><p><a href=\"https://www.mspring.org/2018/11/29/HexoClient%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/\">HexoClient使用帮助</a> </p>\n</li>\n</ol>\n<h2 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h2><p>虽然流量很少，不过也少了互动，不知道来的用户的想法，少了反馈</p>\n<p>适用于hexo的评论组件挺多的，如：<a href=\"http://duoshuo.com/\">多说</a> ，<a href=\"https://changyan.kuaizhan.com/\">畅言</a> 等依赖服务端的评论服务，也有无服务端依赖的如： <a href=\"https://valine.js.org/\">Valine</a> ，<a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> ，<a href=\"https://github.com/imsun/gitment\">Gitment</a> ，<a href=\"https://vssue.js.org/\">Vssue</a> 。</p>\n<ol>\n<li><p>多说</p>\n<p>服务停掉了</p>\n</li>\n<li><p>畅言</p>\n<blockquote>\n<ul>\n<li>需要填入备案号且审核通过</li>\n<li>用户发表评论要绑定手机号</li>\n<li>有广告</li>\n</ul>\n</blockquote>\n<p>Reference： <a href=\"https://ziyue.life/201812/ad52hc4b.html\">为 Hexo 的 Indigo 主题添加畅言评论系统</a> </p>\n<p>上面列出几条，有一条都要 pass 掉了</p>\n</li>\n<li><p><a href=\"https://valine.js.org/\">Valine</a> 一款快速、简洁且高效的无后端评论系统</p>\n<blockquote>\n<p>Valine 诞生于2017年8月7日，是一款基于<a href=\"https://leancloud.cn/\">LeanCloud</a>的快速、简洁且高效的无后端评论系统</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/gitalk/gitalk\">Gitalk</a>  is a modern comment component based on Github Issue and Preact</p>\n</li>\n<li><p><a href=\"https://github.com/imsun/gitment\">Gitment</a> </p>\n<p>Reference：<a href=\"https://imsun.net/posts/gitment-introduction/\">Gitment：使用 GitHub Issues 搭建评论系统</a> ，中文的使用说明</p>\n</li>\n<li><p><a href=\"https://vssue.js.org/\">Vssue</a> Vue 驱动的、基于 Issue 的评论插件</p>\n<blockquote>\n<ul>\n<li><strong>Vssue</strong> 支持 Github、Gitlab 和 Bitbucket，并且很容易扩展到其它平台。<strong>Gitment</strong> 和 <strong>Gitalk</strong> 仅支持 Github。</li>\n<li><strong>Vssue</strong> 可以发表、编辑、删除评论。<strong>Gitment</strong> 和 <strong>Gitalk</strong> 仅能发表评论。</li>\n<li><strong>Vssue</strong> 是基于 <a href=\"https://vuejs.org/\">Vue.js</a> 开发的，可以集成到 Vue 项目中，并且提供了一个 <a href=\"https://vssue.js.org/zh/guide/vuepress.html\">Vuepress 插件</a>。 <strong>Gitment</strong>基于原生JS，而 <strong>Gitalk</strong> 基于 <a href=\"https://github.com/developit/preact\">Preact</a>。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2019-10-30\"><a href=\"#2019-10-30\" class=\"headerlink\" title=\"2019.10.30\"></a>2019.10.30</h3><p>选择了Gittalk，在 <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-material-indigo</a> 的 <a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\">wiki</a> 中有gittalk 的 <a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE\">配置</a>，本来是想改主题代码呢，看代码有相关的配置，就修改了 主题下<code>_config.yml</code>  下面的评论配置就可以了，”集成了 <a href=\"https://disqus.com/\">disqus</a>、<a href=\"http://www.uyan.cc/\">友言</a>、<a href=\"https://github.com/imsun/gitment\">gitment</a> 和 <a href=\"https://valine.js.org/\">valine</a>，开启其一即可”</p>\n<p>使用 <a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> 主题时候，配置了<code>baidu_url_submitter</code> 但是一直报错，今天也解决掉了，是对YML 语法的不了解导致的，其中的数组是用 <code>-</code>  开头的，所以一直报错，得看下 <a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html\">YAML 语言教程</a> 的提高下</p>\n<p>还有个不影响运行，但是一直提示的错误：<code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</code>  ，重新安装了hexo <code>npm install hexo --no-optional</code>  解决了，搜索到的参考：<a href=\"https://xuanwo.io/2014/08/14/hexo-usual-problem/\">Hexo常见问题解决方案</a> </p>\n<p>折腾了好久，感觉blog 也没啥有营养的资料，现在整体想要的功能都有了，主要是评论，后面暂时放弃 PWA 的优化，和主题定制（也没头绪想要定制成什么样子），暂时放一放 hexo 的折腾，专注下blog 内容了</p>\n<h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><blockquote>\n<p>渐进式应用(Progressive Web Apps，PWA)是Google提出的新一代Web应用概念，其目的是提供可靠、快速、接近Native应用的服务方案。</p>\n</blockquote>\n<p>Github page 支持 https，自己还么升级呢，同时 PWA 也算 速度上的优化！</p>\n<h3 id=\"Reference-1\"><a href=\"#Reference-1\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://qinyuanpei.github.io/posts/450254281/\">迁移Hexo博客到Google渐进式Web应用(PWA)</a> </p>\n<p>使用的插件： <a href=\"https://github.com/JLHwung/hexo-offline\">hexo-offline</a> </p>\n</li>\n<li><p><a href=\"https://richardcao.me/2017/09/03/Hexo-PWA/\">五步让 Hexo 博客支持 PWA</a>  </p>\n</li>\n<li><p><a href=\"https://github.com/funnycoderstar/funnycoderstar/issues/6\">hexo博客支持PWA了</a> </p>\n</li>\n</ol>\n<h2 id=\"Theme-主题\"><a href=\"#Theme-主题\" class=\"headerlink\" title=\"Theme 主题\"></a>Theme 主题</h2><p>想自己写一套呢，不过现在看中一套 Meterial 风格的theme ： <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-material-indigo</a> 和它的进化版本： <a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> ，试着改写下吧</p>\n<h3 id=\"Reference-2\"><a href=\"#Reference-2\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><p><a href=\"https://chensd.com/2016-06/hexo-theme-guide.html\">Hexo 主题制作指南</a> 很详细的 五星推荐</p>\n</li>\n<li><p><a href=\"http://mrzhang123.github.io/2017/04/01/hexo-theme/\">如何写一个自己的hexo主题</a> </p>\n</li>\n<li><p><a href=\"http://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-1-Index/\">Create an Hexo Theme - Part 1: Index</a> </p>\n</li>\n<li><p><a href=\"https://github.com/abelsu7/hexo-theme-indigo-plus\">hexo-theme-indigo-plus</a> 使用文档 </p>\n<p>不错的文档，其实是搭建hexo的整个过程，主题风格也喜欢</p>\n</li>\n</ol>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ol>\n<li>最近写东西都是在 Markdown 中整理，使用的编辑器是 Typora ，想着和hexo 组合起来，做到一键部署更新呢！</li>\n</ol>"},{"title":"koa begainer","date":"2016-05-10T10:48:41.000Z","_content":"\n想学习下后端的Node or Koa 相关的知识，目标能实现开发，从一个个网上的例子的一行行代码开始敲起！\n\n<!-- more -->\n# [kick-off-koa](https://github.com/koajs/kick-off-koa)\n\n## 总结\n\n  总共11 个 exercise 想每天做一个呢，结果一下午 complete all。总结：\n\n  1. 简单的英文提示，基本能看懂大概意思，按提示的点能够独立完成。很简单的入门课程！\n  2. 对于异步理解很不到位，最后一个exercise: authentication 一直报错：\n    ``` bash\n      should be redirected to '/'\n    ```\n    先'this.redirect=\"/\"' 改为 'this.redirct(\"/\")'，还是一直报错，最后实在没办法，看了下github 中的解决办法，\n    才发现'var body = parse(this)' 写错了，应该是'var body = yield parse(this)' 少了yield。现在对于异步的理解还很浅显，感觉是body 调用的时候数据还没parse完。\n\n\n\n## 参考\n  1. [[Koa系列-1]简单入门](http://www.jscon.cc/koa-action-1/)\n  2. [[koa系列-2]路由](http://www.jscon.cc/koa-action-2/)\n\n  > 在kick-off-koa基础上，深入的讲解了下, 其中讲到了两张代码模式：\n    1. Express-style，用法来自于express框架，它能够开启app.get, app.put, app.post, app.delete等功能\n    2. Middleware-style,此时将 实例化 一个 koa-route 对象，在这个对象中配置路由规则，然后作为一个中间件塞入到app.use方法中。\n\n\n\n\n# [基于 koa 开发论坛系统](http://cnodejs.org/topic/563f6e708e90ab7c391e9f71)\n\n## 2016-05-05\n\n  1. [co 和 koa](http://nswbmw.github.io/N-club/1/1.3.html) 中理解不了thunk函数\n\n## 2016-05-09\n\n  1. [模版系统](https://nswbmw.github.io/N-club/2/2.1.html)\n\n    主要是 [co-ejs](https://github.com/nswbmw/co-ejs) 的各种报错问题，都提交到 [wiki](https://github.com/nswbmw/co-ejs/issues/2) 中，最后通过 项目中的 demo 中的文件找到的 解决方法！\n\n    看了下 [co-ejs setting](https://github.com/nswbmw/co-ejs#settings), 有点被自己蠢哭了，答案都在这里啊！\n    > root: view root directory.\n      layout: global layout file, default is layout, set false to disable layout.\n      viewExt: view file extension (default html).\n      cache: cache compiled templates (default true).\n      debug: debug flag (default false).\n      locals: global locals, can be function type, this in the function is koa's ctx.\n      filters: ejs custom filters.\n      open: open sequence (default <%).\n      close: close sequence (default %>).\n\n## 2016-05-10\n\n  1. [路由](http://nswbmw.github.io/N-club/3/README.html)\n\n    window下安装koa-frouter一直报错，看到 [koa-frouter](https://github.com/nswbmw/koa-frouter) 官网的issus 有这个问题，原因是:`出现这个问题是因为windows的文件命名不能带有通配符*` 所以 @作者修改了该问题发布了 koa-frouter@0.3.3版本修复这个安装时候的问题\n\n    相关 issuse[npm i koa-frouter --save 报错](https://github.com/nswbmw/koa-frouter/issues/4)\n    \n    话说koa-frouter, co-ejs 都是这个教程的作者写的啊！\n  \n\n## 2016-05-11\n\n### [参数验证与错误处理](http://nswbmw.github.io/N-club/4/4.1.html)\n\n  [koa-scheme](https://github.com/nswbmw/koa-scheme) 用于输入输出（this.request, this.response) 数据格式的校验，代码编写后要写测试用例，先看后面的\n\n  [koa-errorhandler](https://github.com/nswbmw/koa-errorhandler)\n\n### [缓存和配置](http://nswbmw.github.io/N-club/5/5.1.html)\n\n  [koa-router-cache](https://github.com/nswbmw/koa-router-cache) 匹配路径 请求的cache，业务逻辑层之前的缓存\n\n  [co-cache](https://github.com/nswbmw/co-cache) 业务逻辑之后，数据层之前，把写经常用的查询数据，缓存起来！ 需要用到mongodb ，后面测试\n\n  [config-lite](https://github.com/nswbmw/config-lite) 配置文件的区分调用plugin\n\n\n## 2016-05-12\n\n### [测试](http://nswbmw.github.io/N-club/6/README.html)\n\n  主要用到的npm [co-mocha](https://github.com/blakeembrey/co-mocha) 与 [co-supertest](https://github.com/avbel/co-supertest)\n\n  describe // 一直写错了，\n\n  参考了 [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html) 和 [初识 mocha in NodeJS](https://cnodejs.org/topic/516526766d38277306c7d277) \n\n  [带你入门带你飞Ⅱ 使用Mocha + Chai + SuperTest测试Restful API in node.js](http://www.cnblogs.com/wade-xu/p/4673460.html)\n  >.send(obj) post 的请求的时候，发送请求参数\n\n  Anything you can do with superagent, you can do with supertest - for example multipart file uploads!\n  测试上传图片的请求\n  ```javascript\n  request(app)\n  .post('/')\n  .field('name', 'my awesome avatar')\n  .attach('avatar', 'test/fixtures/homeboy.jpg')\n  ...\n  ```\n## 2016-05-13\n\n  继续测试\n  ``` javascript\n  it('post /signup', function *(done) {\n    yield agent.post('/signup')\n    .send(param)\n    .end(function(err, res){\n      return done(err);\n    });\n  });\n  // 报错信息，感觉是因为 生成器函数中，不能使用 done 参数\n  Error: timeout of 2000ms exceeded. Ensure the done() callback is being call\n  ed in this test.\n  ```\n\n## 2016-05-16\n\n  经过前面的铺垫，开始根据第七章构建一个完整的论坛demo\n\n  做完7.5 可以开始初步的调试\n\n## 2016-05-17\n\n### 安装mongodb \n  1. [Windows7下安装MongoDB](http://www.cnblogs.com/linjiqin/p/3192159.html) \n\n  吃了路径没有写对的亏，一直启动不成功，以后要注意\n\n### 调试\n\n  1. node app.js 报错:\n  ``` bash\n    bbs@1.0.0 start f:\\Users\\dev\\bbs\n    node app.js\n\n    f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:556\n        throw new TypeError('Undefined type `' + name + '` at `' + path +\n        ^\n\n    TypeError: Undefined type `C` at `0`\n      Did you try nesting Schemas? You can only nest using refs or arrays.\n        at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l\n    ib\\schema.js:556:11)\n        at Schema.path (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:464:29)\n\n        at Schema.add (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:348:12)\n        at new Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:94:10)\n        at Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:67:12)\n        at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Module.require (module.js:353:17)\n        at require (internal/module.js:12:17)\n        at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\index.js:13:19)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n\n    npm ERR! Windows_NT 6.1.7601\n    npm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\KevinSu\\\\AppData\n    \\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"start\"\n    npm ERR! node v4.4.3\n    npm ERR! npm  v3.8.7\n    npm ERR! code ELIFECYCLE\n    npm ERR! bbs@1.0.0 start: `node app.js`\n    npm ERR! Exit status 1\n    npm ERR!\n    npm ERR! Failed at the bbs@1.0.0 start script 'node app.js'.\n    npm ERR! Make sure you have the latest version of node.js and npm installed.\n    npm ERR! If you do, this is most likely a problem with the bbs package,\n    npm ERR! not with npm itself.\n    npm ERR! Tell the author that this fails on your system:\n    npm ERR!     node app.js\n    npm ERR! You can get information on how to open an issue for this project with:\n    npm ERR!     npm bugs bbs\n    npm ERR! Or if that isn't available, you can get their info via:\n    npm ERR!     npm owner ls bbs\n    npm ERR! There is likely additional logging output above.\n\n    npm ERR! Please include the following file with any support request:\n    npm ERR!     f:\\Users\\dev\\bbs\\npm-debug.log\n  ```\n  \n  重点错误信息：\n  ``` bash\n  TypeError: Undefined type `C` at `0`\n      Did you try nesting Schemas? You can only nest using refs or arrays.\n        at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l\n    ib\\schema.js:556:11)\n  ```\n  和 `at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)`  定位代码错误的位置\n\n  百度 错误 得到的是 [Mongoose error: nesting Schemas](http://stackoverflow.com/questions/27259449/mongoose-error-nesting-schemas) 没看懂，感觉是mongodb 的使用出问题了，直接去 [mongoose 官网issuse](https://github.com/Automattic/mongoose/issues)\n\n  发现错误 `module.exports = Schema('Comment', CommontSchema);` 写错了，应该是`module.exports = mongoose.model('Comment', CommontSchema);`\n\n## 2016-05-18\n\n  继续昨天的调试\n\n  1. [7.1. 基础项目搭建](http://nswbmw.github.io/N-club/7/README.html) 中`default.js` 关于 routerCacheConf 的配置是以前旧版本的koa-router-cache的使用方法，运行会报错：\n  ``` bash\n  Error: `key` must be string or generatorFunction!\n    at module.exports (f:\\Users\\dev\\bbs\\node_modules\\koa-router-cache\\lib\\index.\njs:13:13)\n    at Object.<anonymous> (f:\\Users\\dev\\bbs\\app.js:32:9)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:968:3\n  ```\n  新的配置方法请参考 [koa-router-cache](https://github.com/nswbmw/koa-router-cache)\n\n  2. 然后就可以启动了 简单的`node app.js` 看到没报错启动成功了，可以直接 ` http://localhost:3000`页面报错，cli里面不报错，想了半天原因，后面才想去没有index.html 页面，只有signup页面，直接访问 `http://localhost:3000/signup`就OK了！\n\n  7.5章节就OK啦！继续下一节了！\n\n## 2016-05-19\n\n  7.8 章节点code 了，next code  7.9 章节\n\n## 2016-05-20\n\n  昨天调试了几个bug，都是代码单词拼写错误或者分号缺少造成的语法错误，`node app.js`已经可以运行，但是首页打不开，今天继续调试！\n\n  感觉进步啊，不知道为啥，路由的不起作用，\n\n  next:\n\n    1. vscode debug 功能学习下\n    2. router/topic/_id 不进入\n\n## 2016-05-23\n\n  /index 不响应，后台不报错， 浏览器无响应，不知道从何入手啊!\n\n  翻了下 [N-club issuse](https://github.com/nswbmw/N-club/issues), 感觉是自己没起redis 服务，在 [co-cache这个模块用到了redis](https://github.com/nswbmw/N-club/issues/5#issuecomment-206723697) 中作者明确说 `需要同时开启mongoDB和redis的`, 参考 [Windows下安装并设置Redis](http://blog.csdn.net/renfufei/article/details/38474435) 安装开启redis 服务\n\n## 2016-05-27\n  1. [在windows上部署使用Redis](http://keenwon.com/1275.html) 设置redis 为系统服务\n\n  2. debug 到 `userCard.ejs` 中 `<% var userInfo = yield $User.getUserByName(name) %>` 这行出错了！，再具体的不知道bug 的原因\n\n## 2016-05-30\n  \n### bug 解决办法\n\n  1. 学习 vscode debug koa 的方法，看下是否可以定位到具体的bug\n\n  参考: [【视频教程】使用vscode调试koa2-example](https://cnodejs.org/topic/572209ea35af8a704195f552)\n\n  2. 学习下一章写测试 test , 关于 '$User.getUserByName(name)' 的测试，看是否能找出bug\n\n### post /signin  bug\n\n  先开始发现mongodb 中存入的密码是明文，然后登陆的时候是 比对的 是md5的值，发现注册的时候，schema中 md5(password) 的值没有赋值给body, 而是赋值给了this，所以body 中的还是明文的密码\n\n  然后登陆 post /signin  是报错了！\n\n  错误提示\n  ``` bash\n  koa-generic-session set error: Cannot read property 'maxAge' of undefined\n    at MongoStore.set$ (f:\\Users\\dev\\bbs\\node_modules\\koa-generic-session-mongo\\dist\\store.js:195:33)\n    at tryCatch (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:72:40)\n    at GeneratorFunctionPrototype.invoke [as _invoke] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:334:22)\n    at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:105:21)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n    at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)\n    at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)\n    at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n    at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)\n    at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)\n    at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n  ```\n\n## 2016-06-01\n\n### bugList\n\n1. [koa-generic-session set error: Cannot read property 'maxAge' of undefined](#signin-post-bug)\n\n2. detail topic/:id\n\n  ``` bash\n  NotFoundError: Not Found\n      at Object.module.exports.throw (f:\\Users\\dev\\bbs\\node_modules\\koa\\lib\\context.js:91:23)\n      at Object.error (f:\\Users\\dev\\bbs\\node_modules\\koa-errorhandler\\index.js:70:73)\n      at next (native)\n      at Object.<anonymous> (f:\\Users\\dev\\bbs\\node_modules\\koa-compose\\index.js:28:19)\n      at next (native)\n      at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)\n      at process._tickCallback (node.js:369:9)\n  ```\n\n  ** fix ** : koa-frouter 在Windows中的配置问题\n  ``` javascript\n    routerConf: {\n      root: './routes',\n      wildcard: '_'\n    }\n  ```\n\n## 2016-06-02\n\n### 继续 `post /signup` 时候的 [bug](#post-signin-bug)\n\n暂时解决办法：app.js\n``` javascript\napp.use(session({\n  store: new MongoStore(config.mongodb),\n  beforeSave: function(ctx, sess){\n    ctx.session.cookie = sess.cookie = {\n      httpOnly: true,\n      path: '/',\n      overwrite: true,\n      signed: true,\n      maxAge: & * 24 * 60 * 60 * 1000 //one day in ms\n    };\n  }\n}));\n```\n通过`koa-generic-session` 中的method ` beforeSave ` 直接添加cookie 的相关设置\n\n\n## 2016-06-03\n\n### 1. post /create bug:\n\n``` bash\nValidationError: Topic validation failed\n    at MongooseError.ValidationError (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\error\\validation.js:22:11)\n    at model.Document.invalidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1366:32)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1242:17\n    at validate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:702:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:733:9\n    at Array.forEach (native)\n    at SchemaString.SchemaType.doValidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:707:19)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1240:9\n    at nextTickCallbackWith0Args (node.js:420:9)\n    at process._tickCallback (node.js:349:13)\n```\n\nfixed ： post/signin 时候的 session 中添加user 属性 topic schema 定义的user 是对象！ 代码敲错了！\n\n整个代码可以跑起来了，下面 写 test\n\n### 测试 test\n\n  `npm i mocha co-mocha supertest co-supertest --save-dev` 依赖的模块\n\n\n  test/signup.js 测试注册功能！\n\n### Next Doing\n\n  test/signin.js 登录功能\n  test/create.js 发帖功能\n  test/comment.js 回帖功能\n\n  部署到coding 演示平台上\n\n# 参考链接\n\n## 系列教程\n\n  1. [kick-off-koa](https://github.com/koajs/kick-off-koa) 【已完成】\n\n    >npm 安装，cli 交互模式学习。应该深入学习 [NodeSchool](http://nodeschool.io/zh-cn/) 下各个课程。\n\n\n  2. [基于 koa 开发论坛系统](http://cnodejs.org/topic/563f6e708e90ab7c391e9f71) 【进行……】\n\n  3. [使用 Express + MongoDB 搭建多人博客](https://github.com/nswbmw/N-blog)\n\n  4. [Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n\n  5. [使用React、Node.js、MongoDB、Socket.IO开发一个角色投票应用](http://www.kancloud.cn/kancloud/create-voting-app/63977) [github](https://github.com/papersnake/newdenfaces-es6)\n\n  6. [Build a React + Flux App with User Authentication](https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication)\n\n  7. [和我一起实战react](https://github.com/mulgore/kodo) 【未完成】\n\n  8. [对Node.js中 stream模块的学习积累和理解](https://github.com/zoubin/streamify-your-node-program)\n\n\n## 入门系列\n\n  1. [koa 中文文档](https://github.com/guo-yu/koa-guide)\n  2. [koa 中间件](https://github.com/koajs/koa/wiki)\n  3. [一起学koa](http://17koa.com/koa-generator-examples/)\n  4. [koa技术分享](https://cnodejs.org/topic/56936889c2289f51658f0926)\n\n## 解读系列\n\n  1. [koa](https://github.com/berwin/Blog/issues/8)\n  2. [如何优雅的在 koa 中处理错误](http://taobaofed.org/blog/2016/03/18/error-handling-in-koa/)\n  3. [对Node.js中 stream模块的学习积累和理解](https://github.com/zoubin/streamify-your-node-program)\n  4. [stream-handbook](link)\n\n## NPM库\n\n  1. [微信公共平台Node库wechat](http://doxmate.cool/node-webot/wechat/index.html)\n","source":"_posts/koa-begainer.md","raw":"---\ntitle: koa begainer\ndate: 2016-05-10 18:48:41\ntags: [Nodejs, koa]\ncategories: Nodejs\n---\n\n想学习下后端的Node or Koa 相关的知识，目标能实现开发，从一个个网上的例子的一行行代码开始敲起！\n\n<!-- more -->\n# [kick-off-koa](https://github.com/koajs/kick-off-koa)\n\n## 总结\n\n  总共11 个 exercise 想每天做一个呢，结果一下午 complete all。总结：\n\n  1. 简单的英文提示，基本能看懂大概意思，按提示的点能够独立完成。很简单的入门课程！\n  2. 对于异步理解很不到位，最后一个exercise: authentication 一直报错：\n    ``` bash\n      should be redirected to '/'\n    ```\n    先'this.redirect=\"/\"' 改为 'this.redirct(\"/\")'，还是一直报错，最后实在没办法，看了下github 中的解决办法，\n    才发现'var body = parse(this)' 写错了，应该是'var body = yield parse(this)' 少了yield。现在对于异步的理解还很浅显，感觉是body 调用的时候数据还没parse完。\n\n\n\n## 参考\n  1. [[Koa系列-1]简单入门](http://www.jscon.cc/koa-action-1/)\n  2. [[koa系列-2]路由](http://www.jscon.cc/koa-action-2/)\n\n  > 在kick-off-koa基础上，深入的讲解了下, 其中讲到了两张代码模式：\n    1. Express-style，用法来自于express框架，它能够开启app.get, app.put, app.post, app.delete等功能\n    2. Middleware-style,此时将 实例化 一个 koa-route 对象，在这个对象中配置路由规则，然后作为一个中间件塞入到app.use方法中。\n\n\n\n\n# [基于 koa 开发论坛系统](http://cnodejs.org/topic/563f6e708e90ab7c391e9f71)\n\n## 2016-05-05\n\n  1. [co 和 koa](http://nswbmw.github.io/N-club/1/1.3.html) 中理解不了thunk函数\n\n## 2016-05-09\n\n  1. [模版系统](https://nswbmw.github.io/N-club/2/2.1.html)\n\n    主要是 [co-ejs](https://github.com/nswbmw/co-ejs) 的各种报错问题，都提交到 [wiki](https://github.com/nswbmw/co-ejs/issues/2) 中，最后通过 项目中的 demo 中的文件找到的 解决方法！\n\n    看了下 [co-ejs setting](https://github.com/nswbmw/co-ejs#settings), 有点被自己蠢哭了，答案都在这里啊！\n    > root: view root directory.\n      layout: global layout file, default is layout, set false to disable layout.\n      viewExt: view file extension (default html).\n      cache: cache compiled templates (default true).\n      debug: debug flag (default false).\n      locals: global locals, can be function type, this in the function is koa's ctx.\n      filters: ejs custom filters.\n      open: open sequence (default <%).\n      close: close sequence (default %>).\n\n## 2016-05-10\n\n  1. [路由](http://nswbmw.github.io/N-club/3/README.html)\n\n    window下安装koa-frouter一直报错，看到 [koa-frouter](https://github.com/nswbmw/koa-frouter) 官网的issus 有这个问题，原因是:`出现这个问题是因为windows的文件命名不能带有通配符*` 所以 @作者修改了该问题发布了 koa-frouter@0.3.3版本修复这个安装时候的问题\n\n    相关 issuse[npm i koa-frouter --save 报错](https://github.com/nswbmw/koa-frouter/issues/4)\n    \n    话说koa-frouter, co-ejs 都是这个教程的作者写的啊！\n  \n\n## 2016-05-11\n\n### [参数验证与错误处理](http://nswbmw.github.io/N-club/4/4.1.html)\n\n  [koa-scheme](https://github.com/nswbmw/koa-scheme) 用于输入输出（this.request, this.response) 数据格式的校验，代码编写后要写测试用例，先看后面的\n\n  [koa-errorhandler](https://github.com/nswbmw/koa-errorhandler)\n\n### [缓存和配置](http://nswbmw.github.io/N-club/5/5.1.html)\n\n  [koa-router-cache](https://github.com/nswbmw/koa-router-cache) 匹配路径 请求的cache，业务逻辑层之前的缓存\n\n  [co-cache](https://github.com/nswbmw/co-cache) 业务逻辑之后，数据层之前，把写经常用的查询数据，缓存起来！ 需要用到mongodb ，后面测试\n\n  [config-lite](https://github.com/nswbmw/config-lite) 配置文件的区分调用plugin\n\n\n## 2016-05-12\n\n### [测试](http://nswbmw.github.io/N-club/6/README.html)\n\n  主要用到的npm [co-mocha](https://github.com/blakeembrey/co-mocha) 与 [co-supertest](https://github.com/avbel/co-supertest)\n\n  describe // 一直写错了，\n\n  参考了 [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html) 和 [初识 mocha in NodeJS](https://cnodejs.org/topic/516526766d38277306c7d277) \n\n  [带你入门带你飞Ⅱ 使用Mocha + Chai + SuperTest测试Restful API in node.js](http://www.cnblogs.com/wade-xu/p/4673460.html)\n  >.send(obj) post 的请求的时候，发送请求参数\n\n  Anything you can do with superagent, you can do with supertest - for example multipart file uploads!\n  测试上传图片的请求\n  ```javascript\n  request(app)\n  .post('/')\n  .field('name', 'my awesome avatar')\n  .attach('avatar', 'test/fixtures/homeboy.jpg')\n  ...\n  ```\n## 2016-05-13\n\n  继续测试\n  ``` javascript\n  it('post /signup', function *(done) {\n    yield agent.post('/signup')\n    .send(param)\n    .end(function(err, res){\n      return done(err);\n    });\n  });\n  // 报错信息，感觉是因为 生成器函数中，不能使用 done 参数\n  Error: timeout of 2000ms exceeded. Ensure the done() callback is being call\n  ed in this test.\n  ```\n\n## 2016-05-16\n\n  经过前面的铺垫，开始根据第七章构建一个完整的论坛demo\n\n  做完7.5 可以开始初步的调试\n\n## 2016-05-17\n\n### 安装mongodb \n  1. [Windows7下安装MongoDB](http://www.cnblogs.com/linjiqin/p/3192159.html) \n\n  吃了路径没有写对的亏，一直启动不成功，以后要注意\n\n### 调试\n\n  1. node app.js 报错:\n  ``` bash\n    bbs@1.0.0 start f:\\Users\\dev\\bbs\n    node app.js\n\n    f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:556\n        throw new TypeError('Undefined type `' + name + '` at `' + path +\n        ^\n\n    TypeError: Undefined type `C` at `0`\n      Did you try nesting Schemas? You can only nest using refs or arrays.\n        at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l\n    ib\\schema.js:556:11)\n        at Schema.path (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:464:29)\n\n        at Schema.add (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:348:12)\n        at new Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:94:10)\n        at Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:67:12)\n        at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Module.require (module.js:353:17)\n        at require (internal/module.js:12:17)\n        at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\index.js:13:19)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n\n    npm ERR! Windows_NT 6.1.7601\n    npm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\KevinSu\\\\AppData\n    \\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"start\"\n    npm ERR! node v4.4.3\n    npm ERR! npm  v3.8.7\n    npm ERR! code ELIFECYCLE\n    npm ERR! bbs@1.0.0 start: `node app.js`\n    npm ERR! Exit status 1\n    npm ERR!\n    npm ERR! Failed at the bbs@1.0.0 start script 'node app.js'.\n    npm ERR! Make sure you have the latest version of node.js and npm installed.\n    npm ERR! If you do, this is most likely a problem with the bbs package,\n    npm ERR! not with npm itself.\n    npm ERR! Tell the author that this fails on your system:\n    npm ERR!     node app.js\n    npm ERR! You can get information on how to open an issue for this project with:\n    npm ERR!     npm bugs bbs\n    npm ERR! Or if that isn't available, you can get their info via:\n    npm ERR!     npm owner ls bbs\n    npm ERR! There is likely additional logging output above.\n\n    npm ERR! Please include the following file with any support request:\n    npm ERR!     f:\\Users\\dev\\bbs\\npm-debug.log\n  ```\n  \n  重点错误信息：\n  ``` bash\n  TypeError: Undefined type `C` at `0`\n      Did you try nesting Schemas? You can only nest using refs or arrays.\n        at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l\n    ib\\schema.js:556:11)\n  ```\n  和 `at Object.<anonymous> (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)`  定位代码错误的位置\n\n  百度 错误 得到的是 [Mongoose error: nesting Schemas](http://stackoverflow.com/questions/27259449/mongoose-error-nesting-schemas) 没看懂，感觉是mongodb 的使用出问题了，直接去 [mongoose 官网issuse](https://github.com/Automattic/mongoose/issues)\n\n  发现错误 `module.exports = Schema('Comment', CommontSchema);` 写错了，应该是`module.exports = mongoose.model('Comment', CommontSchema);`\n\n## 2016-05-18\n\n  继续昨天的调试\n\n  1. [7.1. 基础项目搭建](http://nswbmw.github.io/N-club/7/README.html) 中`default.js` 关于 routerCacheConf 的配置是以前旧版本的koa-router-cache的使用方法，运行会报错：\n  ``` bash\n  Error: `key` must be string or generatorFunction!\n    at module.exports (f:\\Users\\dev\\bbs\\node_modules\\koa-router-cache\\lib\\index.\njs:13:13)\n    at Object.<anonymous> (f:\\Users\\dev\\bbs\\app.js:32:9)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:968:3\n  ```\n  新的配置方法请参考 [koa-router-cache](https://github.com/nswbmw/koa-router-cache)\n\n  2. 然后就可以启动了 简单的`node app.js` 看到没报错启动成功了，可以直接 ` http://localhost:3000`页面报错，cli里面不报错，想了半天原因，后面才想去没有index.html 页面，只有signup页面，直接访问 `http://localhost:3000/signup`就OK了！\n\n  7.5章节就OK啦！继续下一节了！\n\n## 2016-05-19\n\n  7.8 章节点code 了，next code  7.9 章节\n\n## 2016-05-20\n\n  昨天调试了几个bug，都是代码单词拼写错误或者分号缺少造成的语法错误，`node app.js`已经可以运行，但是首页打不开，今天继续调试！\n\n  感觉进步啊，不知道为啥，路由的不起作用，\n\n  next:\n\n    1. vscode debug 功能学习下\n    2. router/topic/_id 不进入\n\n## 2016-05-23\n\n  /index 不响应，后台不报错， 浏览器无响应，不知道从何入手啊!\n\n  翻了下 [N-club issuse](https://github.com/nswbmw/N-club/issues), 感觉是自己没起redis 服务，在 [co-cache这个模块用到了redis](https://github.com/nswbmw/N-club/issues/5#issuecomment-206723697) 中作者明确说 `需要同时开启mongoDB和redis的`, 参考 [Windows下安装并设置Redis](http://blog.csdn.net/renfufei/article/details/38474435) 安装开启redis 服务\n\n## 2016-05-27\n  1. [在windows上部署使用Redis](http://keenwon.com/1275.html) 设置redis 为系统服务\n\n  2. debug 到 `userCard.ejs` 中 `<% var userInfo = yield $User.getUserByName(name) %>` 这行出错了！，再具体的不知道bug 的原因\n\n## 2016-05-30\n  \n### bug 解决办法\n\n  1. 学习 vscode debug koa 的方法，看下是否可以定位到具体的bug\n\n  参考: [【视频教程】使用vscode调试koa2-example](https://cnodejs.org/topic/572209ea35af8a704195f552)\n\n  2. 学习下一章写测试 test , 关于 '$User.getUserByName(name)' 的测试，看是否能找出bug\n\n### post /signin  bug\n\n  先开始发现mongodb 中存入的密码是明文，然后登陆的时候是 比对的 是md5的值，发现注册的时候，schema中 md5(password) 的值没有赋值给body, 而是赋值给了this，所以body 中的还是明文的密码\n\n  然后登陆 post /signin  是报错了！\n\n  错误提示\n  ``` bash\n  koa-generic-session set error: Cannot read property 'maxAge' of undefined\n    at MongoStore.set$ (f:\\Users\\dev\\bbs\\node_modules\\koa-generic-session-mongo\\dist\\store.js:195:33)\n    at tryCatch (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:72:40)\n    at GeneratorFunctionPrototype.invoke [as _invoke] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:334:22)\n    at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:105:21)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n    at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)\n    at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)\n    at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n    at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)\n    at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)\n    at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)\n    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5\n  ```\n\n## 2016-06-01\n\n### bugList\n\n1. [koa-generic-session set error: Cannot read property 'maxAge' of undefined](#signin-post-bug)\n\n2. detail topic/:id\n\n  ``` bash\n  NotFoundError: Not Found\n      at Object.module.exports.throw (f:\\Users\\dev\\bbs\\node_modules\\koa\\lib\\context.js:91:23)\n      at Object.error (f:\\Users\\dev\\bbs\\node_modules\\koa-errorhandler\\index.js:70:73)\n      at next (native)\n      at Object.<anonymous> (f:\\Users\\dev\\bbs\\node_modules\\koa-compose\\index.js:28:19)\n      at next (native)\n      at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)\n      at process._tickCallback (node.js:369:9)\n  ```\n\n  ** fix ** : koa-frouter 在Windows中的配置问题\n  ``` javascript\n    routerConf: {\n      root: './routes',\n      wildcard: '_'\n    }\n  ```\n\n## 2016-06-02\n\n### 继续 `post /signup` 时候的 [bug](#post-signin-bug)\n\n暂时解决办法：app.js\n``` javascript\napp.use(session({\n  store: new MongoStore(config.mongodb),\n  beforeSave: function(ctx, sess){\n    ctx.session.cookie = sess.cookie = {\n      httpOnly: true,\n      path: '/',\n      overwrite: true,\n      signed: true,\n      maxAge: & * 24 * 60 * 60 * 1000 //one day in ms\n    };\n  }\n}));\n```\n通过`koa-generic-session` 中的method ` beforeSave ` 直接添加cookie 的相关设置\n\n\n## 2016-06-03\n\n### 1. post /create bug:\n\n``` bash\nValidationError: Topic validation failed\n    at MongooseError.ValidationError (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\error\\validation.js:22:11)\n    at model.Document.invalidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1366:32)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1242:17\n    at validate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:702:7)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:733:9\n    at Array.forEach (native)\n    at SchemaString.SchemaType.doValidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:707:19)\n    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1240:9\n    at nextTickCallbackWith0Args (node.js:420:9)\n    at process._tickCallback (node.js:349:13)\n```\n\nfixed ： post/signin 时候的 session 中添加user 属性 topic schema 定义的user 是对象！ 代码敲错了！\n\n整个代码可以跑起来了，下面 写 test\n\n### 测试 test\n\n  `npm i mocha co-mocha supertest co-supertest --save-dev` 依赖的模块\n\n\n  test/signup.js 测试注册功能！\n\n### Next Doing\n\n  test/signin.js 登录功能\n  test/create.js 发帖功能\n  test/comment.js 回帖功能\n\n  部署到coding 演示平台上\n\n# 参考链接\n\n## 系列教程\n\n  1. [kick-off-koa](https://github.com/koajs/kick-off-koa) 【已完成】\n\n    >npm 安装，cli 交互模式学习。应该深入学习 [NodeSchool](http://nodeschool.io/zh-cn/) 下各个课程。\n\n\n  2. [基于 koa 开发论坛系统](http://cnodejs.org/topic/563f6e708e90ab7c391e9f71) 【进行……】\n\n  3. [使用 Express + MongoDB 搭建多人博客](https://github.com/nswbmw/N-blog)\n\n  4. [Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n\n  5. [使用React、Node.js、MongoDB、Socket.IO开发一个角色投票应用](http://www.kancloud.cn/kancloud/create-voting-app/63977) [github](https://github.com/papersnake/newdenfaces-es6)\n\n  6. [Build a React + Flux App with User Authentication](https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication)\n\n  7. [和我一起实战react](https://github.com/mulgore/kodo) 【未完成】\n\n  8. [对Node.js中 stream模块的学习积累和理解](https://github.com/zoubin/streamify-your-node-program)\n\n\n## 入门系列\n\n  1. [koa 中文文档](https://github.com/guo-yu/koa-guide)\n  2. [koa 中间件](https://github.com/koajs/koa/wiki)\n  3. [一起学koa](http://17koa.com/koa-generator-examples/)\n  4. [koa技术分享](https://cnodejs.org/topic/56936889c2289f51658f0926)\n\n## 解读系列\n\n  1. [koa](https://github.com/berwin/Blog/issues/8)\n  2. [如何优雅的在 koa 中处理错误](http://taobaofed.org/blog/2016/03/18/error-handling-in-koa/)\n  3. [对Node.js中 stream模块的学习积累和理解](https://github.com/zoubin/streamify-your-node-program)\n  4. [stream-handbook](link)\n\n## NPM库\n\n  1. [微信公共平台Node库wechat](http://doxmate.cool/node-webot/wechat/index.html)\n","slug":"koa-begainer","published":1,"updated":"2022-01-20T04:12:09.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0v000h7uo05tip62x0","content":"<p>想学习下后端的Node or Koa 相关的知识，目标能实现开发，从一个个网上的例子的一行行代码开始敲起！</p>\n<span id=\"more\"></span>\n<h1 id=\"kick-off-koa\"><a href=\"#kick-off-koa\" class=\"headerlink\" title=\"kick-off-koa\"></a><a href=\"https://github.com/koajs/kick-off-koa\">kick-off-koa</a></h1><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>  总共11 个 exercise 想每天做一个呢，结果一下午 complete all。总结：</p>\n<ol>\n<li>简单的英文提示，基本能看懂大概意思，按提示的点能够独立完成。很简单的入门课程！</li>\n<li>对于异步理解很不到位，最后一个exercise: authentication 一直报错：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">should be redirected to <span class=\"hljs-string\">&#x27;/&#x27;</span><br></code></pre></td></tr></table></figure>\n先’this.redirect=”/“‘ 改为 ‘this.redirct(“/“)’，还是一直报错，最后实在没办法，看了下github 中的解决办法，<br>才发现’var body = parse(this)’ 写错了，应该是’var body = yield parse(this)’ 少了yield。现在对于异步的理解还很浅显，感觉是body 调用的时候数据还没parse完。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.jscon.cc/koa-action-1/\">[Koa系列-1]简单入门</a></li>\n<li><a href=\"http://www.jscon.cc/koa-action-2/\">[koa系列-2]路由</a></li>\n</ol>\n<blockquote>\n<p>在kick-off-koa基础上，深入的讲解了下, 其中讲到了两张代码模式：<br>    1. Express-style，用法来自于express框架，它能够开启app.get, app.put, app.post, app.delete等功能<br>    2. Middleware-style,此时将 实例化 一个 koa-route 对象，在这个对象中配置路由规则，然后作为一个中间件塞入到app.use方法中。</p>\n</blockquote>\n<h1 id=\"基于-koa-开发论坛系统\"><a href=\"#基于-koa-开发论坛系统\" class=\"headerlink\" title=\"基于 koa 开发论坛系统\"></a><a href=\"http://cnodejs.org/topic/563f6e708e90ab7c391e9f71\">基于 koa 开发论坛系统</a></h1><h2 id=\"2016-05-05\"><a href=\"#2016-05-05\" class=\"headerlink\" title=\"2016-05-05\"></a>2016-05-05</h2><ol>\n<li><a href=\"http://nswbmw.github.io/N-club/1/1.3.html\">co 和 koa</a> 中理解不了thunk函数</li>\n</ol>\n<h2 id=\"2016-05-09\"><a href=\"#2016-05-09\" class=\"headerlink\" title=\"2016-05-09\"></a>2016-05-09</h2><ol>\n<li><a href=\"https://nswbmw.github.io/N-club/2/2.1.html\">模版系统</a></li>\n</ol>\n<pre><code>主要是 [co-ejs](https://github.com/nswbmw/co-ejs) 的各种报错问题，都提交到 [wiki](https://github.com/nswbmw/co-ejs/issues/2) 中，最后通过 项目中的 demo 中的文件找到的 解决方法！\n\n看了下 [co-ejs setting](https://github.com/nswbmw/co-ejs#settings), 有点被自己蠢哭了，答案都在这里啊！\n&gt; root: view root directory.\n  layout: global layout file, default is layout, set false to disable layout.\n  viewExt: view file extension (default html).\n  cache: cache compiled templates (default true).\n  debug: debug flag (default false).\n  locals: global locals, can be function type, this in the function is koa&#39;s ctx.\n  filters: ejs custom filters.\n  open: open sequence (default &lt;%).\n  close: close sequence (default %&gt;).\n</code></pre>\n<h2 id=\"2016-05-10\"><a href=\"#2016-05-10\" class=\"headerlink\" title=\"2016-05-10\"></a>2016-05-10</h2><ol>\n<li><a href=\"http://nswbmw.github.io/N-club/3/README.html\">路由</a></li>\n</ol>\n<pre><code>window下安装koa-frouter一直报错，看到 [koa-frouter](https://github.com/nswbmw/koa-frouter) 官网的issus 有这个问题，原因是:`出现这个问题是因为windows的文件命名不能带有通配符*` 所以 @作者修改了该问题发布了 koa-frouter@0.3.3版本修复这个安装时候的问题\n\n相关 issuse[npm i koa-frouter --save 报错](https://github.com/nswbmw/koa-frouter/issues/4)\n\n话说koa-frouter, co-ejs 都是这个教程的作者写的啊！\n</code></pre>\n<h2 id=\"2016-05-11\"><a href=\"#2016-05-11\" class=\"headerlink\" title=\"2016-05-11\"></a>2016-05-11</h2><h3 id=\"参数验证与错误处理\"><a href=\"#参数验证与错误处理\" class=\"headerlink\" title=\"参数验证与错误处理\"></a><a href=\"http://nswbmw.github.io/N-club/4/4.1.html\">参数验证与错误处理</a></h3><p>  <a href=\"https://github.com/nswbmw/koa-scheme\">koa-scheme</a> 用于输入输出（this.request, this.response) 数据格式的校验，代码编写后要写测试用例，先看后面的</p>\n<p>  <a href=\"https://github.com/nswbmw/koa-errorhandler\">koa-errorhandler</a></p>\n<h3 id=\"缓存和配置\"><a href=\"#缓存和配置\" class=\"headerlink\" title=\"缓存和配置\"></a><a href=\"http://nswbmw.github.io/N-club/5/5.1.html\">缓存和配置</a></h3><p>  <a href=\"https://github.com/nswbmw/koa-router-cache\">koa-router-cache</a> 匹配路径 请求的cache，业务逻辑层之前的缓存</p>\n<p>  <a href=\"https://github.com/nswbmw/co-cache\">co-cache</a> 业务逻辑之后，数据层之前，把写经常用的查询数据，缓存起来！ 需要用到mongodb ，后面测试</p>\n<p>  <a href=\"https://github.com/nswbmw/config-lite\">config-lite</a> 配置文件的区分调用plugin</p>\n<h2 id=\"2016-05-12\"><a href=\"#2016-05-12\" class=\"headerlink\" title=\"2016-05-12\"></a>2016-05-12</h2><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><a href=\"http://nswbmw.github.io/N-club/6/README.html\">测试</a></h3><p>  主要用到的npm <a href=\"https://github.com/blakeembrey/co-mocha\">co-mocha</a> 与 <a href=\"https://github.com/avbel/co-supertest\">co-supertest</a></p>\n<p>  describe // 一直写错了，</p>\n<p>  参考了 <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\">测试框架 Mocha 实例教程</a> 和 <a href=\"https://cnodejs.org/topic/516526766d38277306c7d277\">初识 mocha in NodeJS</a> </p>\n<p>  <a href=\"http://www.cnblogs.com/wade-xu/p/4673460.html\">带你入门带你飞Ⅱ 使用Mocha + Chai + SuperTest测试Restful API in node.js</a></p>\n<blockquote>\n<p>.send(obj) post 的请求的时候，发送请求参数</p>\n</blockquote>\n<p>  Anything you can do with superagent, you can do with supertest - for example multipart file uploads!<br>  测试上传图片的请求<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">request(app)<br>.post(<span class=\"hljs-string\">&#x27;/&#x27;</span>)<br>.field(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;my awesome avatar&#x27;</span>)<br>.attach(<span class=\"hljs-string\">&#x27;avatar&#x27;</span>, <span class=\"hljs-string\">&#x27;test/fixtures/homeboy.jpg&#x27;</span>)<br>...<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-05-13\"><a href=\"#2016-05-13\" class=\"headerlink\" title=\"2016-05-13\"></a>2016-05-13</h2><p>  继续测试<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">it(<span class=\"hljs-string\">&#x27;post /signup&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *(<span class=\"hljs-params\">done</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">yield</span> agent.post(<span class=\"hljs-string\">&#x27;/signup&#x27;</span>)<br>  .send(param)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> done(err);<br>  &#125;);<br>&#125;);<br><span class=\"hljs-comment\">// 报错信息，感觉是因为 生成器函数中，不能使用 done 参数</span><br><span class=\"hljs-built_in\">Error</span>: timeout <span class=\"hljs-keyword\">of</span> 2000ms exceeded. Ensure the done() callback is being call<br>ed <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span> test.<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-05-16\"><a href=\"#2016-05-16\" class=\"headerlink\" title=\"2016-05-16\"></a>2016-05-16</h2><p>  经过前面的铺垫，开始根据第七章构建一个完整的论坛demo</p>\n<p>  做完7.5 可以开始初步的调试</p>\n<h2 id=\"2016-05-17\"><a href=\"#2016-05-17\" class=\"headerlink\" title=\"2016-05-17\"></a>2016-05-17</h2><h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li><a href=\"http://www.cnblogs.com/linjiqin/p/3192159.html\">Windows7下安装MongoDB</a> </li>\n</ol>\n<p>  吃了路径没有写对的亏，一直启动不成功，以后要注意</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ol>\n<li>node app.js 报错:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">bbs@1.0.0 start f:\\Users\\dev\\bbs<br>node app.js<br><br>f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:556<br>    throw new TypeError(<span class=\"hljs-string\">&#x27;Undefined type `&#x27;</span> + name + <span class=\"hljs-string\">&#x27;` at `&#x27;</span> + path +<br>    ^<br><br>TypeError: Undefined <span class=\"hljs-built_in\">type</span> `C` at `0`<br>  Did you try nesting Schemas? You can only nest using refs or arrays.<br>    at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l<br>ib\\schema.js:556:11)<br>    at Schema.path (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:464:29)<br><br>    at Schema.add (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:348:12)<br>    at new Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:94:10)<br>    at Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:67:12)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (internal/module.js:12:17)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\index.js:13:19)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br><br>npm ERR! Windows_NT 6.1.7601<br>npm ERR! argv <span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\nodejs\\\\node.exe&quot;</span> <span class=\"hljs-string\">&quot;C:\\\\Users\\\\KevinSu\\\\AppData</span><br><span class=\"hljs-string\">\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot;</span> <span class=\"hljs-string\">&quot;start&quot;</span><br>npm ERR! node v4.4.3<br>npm ERR! npm  v3.8.7<br>npm ERR! code ELIFECYCLE<br>npm ERR! bbs@1.0.0 start: `node app.js`<br>npm ERR! Exit status 1<br>npm ERR!<br>npm ERR! Failed at the bbs@1.0.0 start script <span class=\"hljs-string\">&#x27;node app.js&#x27;</span>.<br>npm ERR! Make sure you have the latest version of node.js and npm installed.<br>npm ERR! If you <span class=\"hljs-keyword\">do</span>, this is most likely a problem with the bbs package,<br>npm ERR! not with npm itself.<br>npm ERR! Tell the author that this fails on your system:<br>npm ERR!     node app.js<br>npm ERR! You can get information on how to open an issue <span class=\"hljs-keyword\">for</span> this project with:<br>npm ERR!     npm bugs bbs<br>npm ERR! Or <span class=\"hljs-keyword\">if</span> that isn<span class=\"hljs-string\">&#x27;t available, you can get their info via:</span><br><span class=\"hljs-string\">npm ERR!     npm owner ls bbs</span><br><span class=\"hljs-string\">npm ERR! There is likely additional logging output above.</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">npm ERR! Please include the following file with any support request:</span><br><span class=\"hljs-string\">npm ERR!     f:\\Users\\dev\\bbs\\npm-debug.log</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>  重点错误信息：<br>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">TypeError: Undefined <span class=\"hljs-built_in\">type</span> `C` at `0`<br>    Did you try nesting Schemas? You can only nest using refs or arrays.<br>      at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l<br>  ib\\schema.js:556:11)<br></code></pre></td></tr></table></figure><br>  和 <code>at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)</code>  定位代码错误的位置</p>\n<p>  百度 错误 得到的是 <a href=\"http://stackoverflow.com/questions/27259449/mongoose-error-nesting-schemas\">Mongoose error: nesting Schemas</a> 没看懂，感觉是mongodb 的使用出问题了，直接去 <a href=\"https://github.com/Automattic/mongoose/issues\">mongoose 官网issuse</a></p>\n<p>  发现错误 <code>module.exports = Schema(&#39;Comment&#39;, CommontSchema);</code> 写错了，应该是<code>module.exports = mongoose.model(&#39;Comment&#39;, CommontSchema);</code></p>\n<h2 id=\"2016-05-18\"><a href=\"#2016-05-18\" class=\"headerlink\" title=\"2016-05-18\"></a>2016-05-18</h2><p>  继续昨天的调试</p>\n<ol>\n<li><p><a href=\"http://nswbmw.github.io/N-club/7/README.html\">7.1. 基础项目搭建</a> 中<code>default.js</code> 关于 routerCacheConf 的配置是以前旧版本的koa-router-cache的使用方法，运行会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">  Error: `key` must be string or generatorFunction!<br>    at module.exports (f:\\Users\\dev\\bbs\\node_modules\\koa-router-cache\\lib\\index.<br>js:13:13)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\app.js:32:9)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Function.Module.runMain (module.js:441:10)<br>    at startup (node.js:139:18)<br>    at node.js:968:3<br></code></pre></td></tr></table></figure>\n<p>新的配置方法请参考 <a href=\"https://github.com/nswbmw/koa-router-cache\">koa-router-cache</a></p>\n</li>\n<li><p>然后就可以启动了 简单的<code>node app.js</code> 看到没报错启动成功了，可以直接 <code> http://localhost:3000</code>页面报错，cli里面不报错，想了半天原因，后面才想去没有index.html 页面，只有signup页面，直接访问 <code>http://localhost:3000/signup</code>就OK了！</p>\n</li>\n<li><p>5章节就OK啦！继续下一节了！</p>\n</li>\n</ol>\n<h2 id=\"2016-05-19\"><a href=\"#2016-05-19\" class=\"headerlink\" title=\"2016-05-19\"></a>2016-05-19</h2><p>  7.8 章节点code 了，next code  7.9 章节</p>\n<h2 id=\"2016-05-20\"><a href=\"#2016-05-20\" class=\"headerlink\" title=\"2016-05-20\"></a>2016-05-20</h2><p>  昨天调试了几个bug，都是代码单词拼写错误或者分号缺少造成的语法错误，<code>node app.js</code>已经可以运行，但是首页打不开，今天继续调试！</p>\n<p>  感觉进步啊，不知道为啥，路由的不起作用，</p>\n<p>  next:</p>\n<pre><code>1. vscode debug 功能学习下\n2. router/topic/_id 不进入\n</code></pre>\n<h2 id=\"2016-05-23\"><a href=\"#2016-05-23\" class=\"headerlink\" title=\"2016-05-23\"></a>2016-05-23</h2><p>  /index 不响应，后台不报错， 浏览器无响应，不知道从何入手啊!</p>\n<p>  翻了下 <a href=\"https://github.com/nswbmw/N-club/issues\">N-club issuse</a>, 感觉是自己没起redis 服务，在 <a href=\"https://github.com/nswbmw/N-club/issues/5#issuecomment-206723697\">co-cache这个模块用到了redis</a> 中作者明确说 <code>需要同时开启mongoDB和redis的</code>, 参考 <a href=\"http://blog.csdn.net/renfufei/article/details/38474435\">Windows下安装并设置Redis</a> 安装开启redis 服务</p>\n<h2 id=\"2016-05-27\"><a href=\"#2016-05-27\" class=\"headerlink\" title=\"2016-05-27\"></a>2016-05-27</h2><ol>\n<li><p><a href=\"http://keenwon.com/1275.html\">在windows上部署使用Redis</a> 设置redis 为系统服务</p>\n</li>\n<li><p>debug 到 <code>userCard.ejs</code> 中 <code>&lt;% var userInfo = yield $User.getUserByName(name) %&gt;</code> 这行出错了！，再具体的不知道bug 的原因</p>\n</li>\n</ol>\n<h2 id=\"2016-05-30\"><a href=\"#2016-05-30\" class=\"headerlink\" title=\"2016-05-30\"></a>2016-05-30</h2><h3 id=\"bug-解决办法\"><a href=\"#bug-解决办法\" class=\"headerlink\" title=\"bug 解决办法\"></a>bug 解决办法</h3><ol>\n<li>学习 vscode debug koa 的方法，看下是否可以定位到具体的bug</li>\n</ol>\n<p>  参考: <a href=\"https://cnodejs.org/topic/572209ea35af8a704195f552\">【视频教程】使用vscode调试koa2-example</a></p>\n<ol start=\"2\">\n<li>学习下一章写测试 test , 关于 ‘$User.getUserByName(name)’ 的测试，看是否能找出bug</li>\n</ol>\n<h3 id=\"post-signin-bug\"><a href=\"#post-signin-bug\" class=\"headerlink\" title=\"post /signin  bug\"></a>post /signin  bug</h3><p>  先开始发现mongodb 中存入的密码是明文，然后登陆的时候是 比对的 是md5的值，发现注册的时候，schema中 md5(password) 的值没有赋值给body, 而是赋值给了this，所以body 中的还是明文的密码</p>\n<p>  然后登陆 post /signin  是报错了！</p>\n<p>  错误提示<br>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">koa-generic-session <span class=\"hljs-built_in\">set</span> error: Cannot <span class=\"hljs-built_in\">read</span> property <span class=\"hljs-string\">&#x27;maxAge&#x27;</span> of undefined<br>  at MongoStore.set$ (f:\\Users\\dev\\bbs\\node_modules\\koa-generic-session-mongo\\dist\\store.js:195:33)<br>  at tryCatch (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:72:40)<br>  at GeneratorFunctionPrototype.invoke [as _invoke] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:334:22)<br>  at GeneratorFunctionPrototype.prototype.(anonymous <span class=\"hljs-keyword\">function</span>) [as next] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:105:21)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br>  at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)<br>  at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)<br>  at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br>  at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)<br>  at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)<br>  at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-06-01\"><a href=\"#2016-06-01\" class=\"headerlink\" title=\"2016-06-01\"></a>2016-06-01</h2><h3 id=\"bugList\"><a href=\"#bugList\" class=\"headerlink\" title=\"bugList\"></a>bugList</h3><ol>\n<li><p><a href=\"#signin-post-bug\">koa-generic-session set error: Cannot read property ‘maxAge’ of undefined</a></p>\n</li>\n<li><p>detail topic/:id</p>\n</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">NotFoundError: Not Found<br>    at Object.module.exports.throw (f:\\Users\\dev\\bbs\\node_modules\\koa\\lib\\context.js:91:23)<br>    at Object.error (f:\\Users\\dev\\bbs\\node_modules\\koa-errorhandler\\index.js:70:73)<br>    at next (native)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\node_modules\\koa-compose\\index.js:28:19)<br>    at next (native)<br>    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)<br>    at process._tickCallback (node.js:369:9)<br></code></pre></td></tr></table></figure>\n\n<p>  ** fix ** : koa-frouter 在Windows中的配置问题<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">routerConf: &#123;<br>  <span class=\"hljs-attr\">root</span>: <span class=\"hljs-string\">&#x27;./routes&#x27;</span>,<br>  <span class=\"hljs-attr\">wildcard</span>: <span class=\"hljs-string\">&#x27;_&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-06-02\"><a href=\"#2016-06-02\" class=\"headerlink\" title=\"2016-06-02\"></a>2016-06-02</h2><h3 id=\"继续-post-signup-时候的-bug\"><a href=\"#继续-post-signup-时候的-bug\" class=\"headerlink\" title=\"继续 post /signup 时候的 bug\"></a>继续 <code>post /signup</code> 时候的 <a href=\"#post-signin-bug\">bug</a></h3><p>暂时解决办法：app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">app.use(session(&#123;<br>  <span class=\"hljs-attr\">store</span>: <span class=\"hljs-keyword\">new</span> MongoStore(config.mongodb),<br>  <span class=\"hljs-attr\">beforeSave</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ctx, sess</span>)</span>&#123;<br>    ctx.session.cookie = sess.cookie = &#123;<br>      <span class=\"hljs-attr\">httpOnly</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>      <span class=\"hljs-attr\">overwrite</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">signed</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">maxAge</span>: &amp; * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span> <span class=\"hljs-comment\">//one day in ms</span><br>    &#125;;<br>  &#125;<br>&#125;));<br></code></pre></td></tr></table></figure>\n<p>通过<code>koa-generic-session</code> 中的method <code>beforeSave</code> 直接添加cookie 的相关设置</p>\n<h2 id=\"2016-06-03\"><a href=\"#2016-06-03\" class=\"headerlink\" title=\"2016-06-03\"></a>2016-06-03</h2><h3 id=\"1-post-create-bug\"><a href=\"#1-post-create-bug\" class=\"headerlink\" title=\"1. post /create bug:\"></a>1. post /create bug:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ValidationError: Topic validation failed<br>    at MongooseError.ValidationError (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\error\\validation.js:22:11)<br>    at model.Document.invalidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1366:32)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1242:17<br>    at validate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:702:7)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:733:9<br>    at Array.forEach (native)<br>    at SchemaString.SchemaType.doValidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:707:19)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1240:9<br>    at nextTickCallbackWith0Args (node.js:420:9)<br>    at process._tickCallback (node.js:349:13)<br></code></pre></td></tr></table></figure>\n\n<p>fixed ： post/signin 时候的 session 中添加user 属性 topic schema 定义的user 是对象！ 代码敲错了！</p>\n<p>整个代码可以跑起来了，下面 写 test</p>\n<h3 id=\"测试-test\"><a href=\"#测试-test\" class=\"headerlink\" title=\"测试 test\"></a>测试 test</h3><p>  <code>npm i mocha co-mocha supertest co-supertest --save-dev</code> 依赖的模块</p>\n<p>  test/signup.js 测试注册功能！</p>\n<h3 id=\"Next-Doing\"><a href=\"#Next-Doing\" class=\"headerlink\" title=\"Next Doing\"></a>Next Doing</h3><p>  test/signin.js 登录功能<br>  test/create.js 发帖功能<br>  test/comment.js 回帖功能</p>\n<p>  部署到coding 演示平台上</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><h2 id=\"系列教程\"><a href=\"#系列教程\" class=\"headerlink\" title=\"系列教程\"></a>系列教程</h2><ol>\n<li><a href=\"https://github.com/koajs/kick-off-koa\">kick-off-koa</a> 【已完成】</li>\n</ol>\n<pre><code>&gt;npm 安装，cli 交互模式学习。应该深入学习 [NodeSchool](http://nodeschool.io/zh-cn/) 下各个课程。\n</code></pre>\n<ol start=\"2\">\n<li><p><a href=\"http://cnodejs.org/topic/563f6e708e90ab7c391e9f71\">基于 koa 开发论坛系统</a> 【进行……】</p>\n</li>\n<li><p><a href=\"https://github.com/nswbmw/N-blog\">使用 Express + MongoDB 搭建多人博客</a></p>\n</li>\n<li><p><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node入门</a></p>\n</li>\n<li><p><a href=\"http://www.kancloud.cn/kancloud/create-voting-app/63977\">使用React、Node.js、MongoDB、Socket.IO开发一个角色投票应用</a> <a href=\"https://github.com/papersnake/newdenfaces-es6\">github</a></p>\n</li>\n<li><p><a href=\"https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication\">Build a React + Flux App with User Authentication</a></p>\n</li>\n<li><p><a href=\"https://github.com/mulgore/kodo\">和我一起实战react</a> 【未完成】</p>\n</li>\n<li><p><a href=\"https://github.com/zoubin/streamify-your-node-program\">对Node.js中 stream模块的学习积累和理解</a></p>\n</li>\n</ol>\n<h2 id=\"入门系列\"><a href=\"#入门系列\" class=\"headerlink\" title=\"入门系列\"></a>入门系列</h2><ol>\n<li><a href=\"https://github.com/guo-yu/koa-guide\">koa 中文文档</a></li>\n<li><a href=\"https://github.com/koajs/koa/wiki\">koa 中间件</a></li>\n<li><a href=\"http://17koa.com/koa-generator-examples/\">一起学koa</a></li>\n<li><a href=\"https://cnodejs.org/topic/56936889c2289f51658f0926\">koa技术分享</a></li>\n</ol>\n<h2 id=\"解读系列\"><a href=\"#解读系列\" class=\"headerlink\" title=\"解读系列\"></a>解读系列</h2><ol>\n<li><a href=\"https://github.com/berwin/Blog/issues/8\">koa</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/03/18/error-handling-in-koa/\">如何优雅的在 koa 中处理错误</a></li>\n<li><a href=\"https://github.com/zoubin/streamify-your-node-program\">对Node.js中 stream模块的学习积累和理解</a></li>\n<li><a href=\"link\">stream-handbook</a></li>\n</ol>\n<h2 id=\"NPM库\"><a href=\"#NPM库\" class=\"headerlink\" title=\"NPM库\"></a>NPM库</h2><ol>\n<li><a href=\"http://doxmate.cool/node-webot/wechat/index.html\">微信公共平台Node库wechat</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>想学习下后端的Node or Koa 相关的知识，目标能实现开发，从一个个网上的例子的一行行代码开始敲起！</p>","more":"<h1 id=\"kick-off-koa\"><a href=\"#kick-off-koa\" class=\"headerlink\" title=\"kick-off-koa\"></a><a href=\"https://github.com/koajs/kick-off-koa\">kick-off-koa</a></h1><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>  总共11 个 exercise 想每天做一个呢，结果一下午 complete all。总结：</p>\n<ol>\n<li>简单的英文提示，基本能看懂大概意思，按提示的点能够独立完成。很简单的入门课程！</li>\n<li>对于异步理解很不到位，最后一个exercise: authentication 一直报错：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">should be redirected to <span class=\"hljs-string\">&#x27;/&#x27;</span><br></code></pre></td></tr></table></figure>\n先’this.redirect=”/“‘ 改为 ‘this.redirct(“/“)’，还是一直报错，最后实在没办法，看了下github 中的解决办法，<br>才发现’var body = parse(this)’ 写错了，应该是’var body = yield parse(this)’ 少了yield。现在对于异步的理解还很浅显，感觉是body 调用的时候数据还没parse完。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.jscon.cc/koa-action-1/\">[Koa系列-1]简单入门</a></li>\n<li><a href=\"http://www.jscon.cc/koa-action-2/\">[koa系列-2]路由</a></li>\n</ol>\n<blockquote>\n<p>在kick-off-koa基础上，深入的讲解了下, 其中讲到了两张代码模式：<br>    1. Express-style，用法来自于express框架，它能够开启app.get, app.put, app.post, app.delete等功能<br>    2. Middleware-style,此时将 实例化 一个 koa-route 对象，在这个对象中配置路由规则，然后作为一个中间件塞入到app.use方法中。</p>\n</blockquote>\n<h1 id=\"基于-koa-开发论坛系统\"><a href=\"#基于-koa-开发论坛系统\" class=\"headerlink\" title=\"基于 koa 开发论坛系统\"></a><a href=\"http://cnodejs.org/topic/563f6e708e90ab7c391e9f71\">基于 koa 开发论坛系统</a></h1><h2 id=\"2016-05-05\"><a href=\"#2016-05-05\" class=\"headerlink\" title=\"2016-05-05\"></a>2016-05-05</h2><ol>\n<li><a href=\"http://nswbmw.github.io/N-club/1/1.3.html\">co 和 koa</a> 中理解不了thunk函数</li>\n</ol>\n<h2 id=\"2016-05-09\"><a href=\"#2016-05-09\" class=\"headerlink\" title=\"2016-05-09\"></a>2016-05-09</h2><ol>\n<li><a href=\"https://nswbmw.github.io/N-club/2/2.1.html\">模版系统</a></li>\n</ol>\n<pre><code>主要是 [co-ejs](https://github.com/nswbmw/co-ejs) 的各种报错问题，都提交到 [wiki](https://github.com/nswbmw/co-ejs/issues/2) 中，最后通过 项目中的 demo 中的文件找到的 解决方法！\n\n看了下 [co-ejs setting](https://github.com/nswbmw/co-ejs#settings), 有点被自己蠢哭了，答案都在这里啊！\n&gt; root: view root directory.\n  layout: global layout file, default is layout, set false to disable layout.\n  viewExt: view file extension (default html).\n  cache: cache compiled templates (default true).\n  debug: debug flag (default false).\n  locals: global locals, can be function type, this in the function is koa&#39;s ctx.\n  filters: ejs custom filters.\n  open: open sequence (default &lt;%).\n  close: close sequence (default %&gt;).\n</code></pre>\n<h2 id=\"2016-05-10\"><a href=\"#2016-05-10\" class=\"headerlink\" title=\"2016-05-10\"></a>2016-05-10</h2><ol>\n<li><a href=\"http://nswbmw.github.io/N-club/3/README.html\">路由</a></li>\n</ol>\n<pre><code>window下安装koa-frouter一直报错，看到 [koa-frouter](https://github.com/nswbmw/koa-frouter) 官网的issus 有这个问题，原因是:`出现这个问题是因为windows的文件命名不能带有通配符*` 所以 @作者修改了该问题发布了 koa-frouter@0.3.3版本修复这个安装时候的问题\n\n相关 issuse[npm i koa-frouter --save 报错](https://github.com/nswbmw/koa-frouter/issues/4)\n\n话说koa-frouter, co-ejs 都是这个教程的作者写的啊！\n</code></pre>\n<h2 id=\"2016-05-11\"><a href=\"#2016-05-11\" class=\"headerlink\" title=\"2016-05-11\"></a>2016-05-11</h2><h3 id=\"参数验证与错误处理\"><a href=\"#参数验证与错误处理\" class=\"headerlink\" title=\"参数验证与错误处理\"></a><a href=\"http://nswbmw.github.io/N-club/4/4.1.html\">参数验证与错误处理</a></h3><p>  <a href=\"https://github.com/nswbmw/koa-scheme\">koa-scheme</a> 用于输入输出（this.request, this.response) 数据格式的校验，代码编写后要写测试用例，先看后面的</p>\n<p>  <a href=\"https://github.com/nswbmw/koa-errorhandler\">koa-errorhandler</a></p>\n<h3 id=\"缓存和配置\"><a href=\"#缓存和配置\" class=\"headerlink\" title=\"缓存和配置\"></a><a href=\"http://nswbmw.github.io/N-club/5/5.1.html\">缓存和配置</a></h3><p>  <a href=\"https://github.com/nswbmw/koa-router-cache\">koa-router-cache</a> 匹配路径 请求的cache，业务逻辑层之前的缓存</p>\n<p>  <a href=\"https://github.com/nswbmw/co-cache\">co-cache</a> 业务逻辑之后，数据层之前，把写经常用的查询数据，缓存起来！ 需要用到mongodb ，后面测试</p>\n<p>  <a href=\"https://github.com/nswbmw/config-lite\">config-lite</a> 配置文件的区分调用plugin</p>\n<h2 id=\"2016-05-12\"><a href=\"#2016-05-12\" class=\"headerlink\" title=\"2016-05-12\"></a>2016-05-12</h2><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a><a href=\"http://nswbmw.github.io/N-club/6/README.html\">测试</a></h3><p>  主要用到的npm <a href=\"https://github.com/blakeembrey/co-mocha\">co-mocha</a> 与 <a href=\"https://github.com/avbel/co-supertest\">co-supertest</a></p>\n<p>  describe // 一直写错了，</p>\n<p>  参考了 <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\">测试框架 Mocha 实例教程</a> 和 <a href=\"https://cnodejs.org/topic/516526766d38277306c7d277\">初识 mocha in NodeJS</a> </p>\n<p>  <a href=\"http://www.cnblogs.com/wade-xu/p/4673460.html\">带你入门带你飞Ⅱ 使用Mocha + Chai + SuperTest测试Restful API in node.js</a></p>\n<blockquote>\n<p>.send(obj) post 的请求的时候，发送请求参数</p>\n</blockquote>\n<p>  Anything you can do with superagent, you can do with supertest - for example multipart file uploads!<br>  测试上传图片的请求<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">request(app)<br>.post(<span class=\"hljs-string\">&#x27;/&#x27;</span>)<br>.field(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;my awesome avatar&#x27;</span>)<br>.attach(<span class=\"hljs-string\">&#x27;avatar&#x27;</span>, <span class=\"hljs-string\">&#x27;test/fixtures/homeboy.jpg&#x27;</span>)<br>...<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-05-13\"><a href=\"#2016-05-13\" class=\"headerlink\" title=\"2016-05-13\"></a>2016-05-13</h2><p>  继续测试<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">it(<span class=\"hljs-string\">&#x27;post /signup&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *(<span class=\"hljs-params\">done</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">yield</span> agent.post(<span class=\"hljs-string\">&#x27;/signup&#x27;</span>)<br>  .send(param)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> done(err);<br>  &#125;);<br>&#125;);<br><span class=\"hljs-comment\">// 报错信息，感觉是因为 生成器函数中，不能使用 done 参数</span><br><span class=\"hljs-built_in\">Error</span>: timeout <span class=\"hljs-keyword\">of</span> 2000ms exceeded. Ensure the done() callback is being call<br>ed <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span> test.<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-05-16\"><a href=\"#2016-05-16\" class=\"headerlink\" title=\"2016-05-16\"></a>2016-05-16</h2><p>  经过前面的铺垫，开始根据第七章构建一个完整的论坛demo</p>\n<p>  做完7.5 可以开始初步的调试</p>\n<h2 id=\"2016-05-17\"><a href=\"#2016-05-17\" class=\"headerlink\" title=\"2016-05-17\"></a>2016-05-17</h2><h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li><a href=\"http://www.cnblogs.com/linjiqin/p/3192159.html\">Windows7下安装MongoDB</a> </li>\n</ol>\n<p>  吃了路径没有写对的亏，一直启动不成功，以后要注意</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ol>\n<li>node app.js 报错:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">bbs@1.0.0 start f:\\Users\\dev\\bbs<br>node app.js<br><br>f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:556<br>    throw new TypeError(<span class=\"hljs-string\">&#x27;Undefined type `&#x27;</span> + name + <span class=\"hljs-string\">&#x27;` at `&#x27;</span> + path +<br>    ^<br><br>TypeError: Undefined <span class=\"hljs-built_in\">type</span> `C` at `0`<br>  Did you try nesting Schemas? You can only nest using refs or arrays.<br>    at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l<br>ib\\schema.js:556:11)<br>    at Schema.path (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:464:29)<br><br>    at Schema.add (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:348:12)<br>    at new Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:94:10)<br>    at Schema (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schema.js:67:12)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Module.require (module.js:353:17)<br>    at require (internal/module.js:12:17)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\index.js:13:19)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br><br>npm ERR! Windows_NT 6.1.7601<br>npm ERR! argv <span class=\"hljs-string\">&quot;C:\\\\Program Files\\\\nodejs\\\\node.exe&quot;</span> <span class=\"hljs-string\">&quot;C:\\\\Users\\\\KevinSu\\\\AppData</span><br><span class=\"hljs-string\">\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot;</span> <span class=\"hljs-string\">&quot;start&quot;</span><br>npm ERR! node v4.4.3<br>npm ERR! npm  v3.8.7<br>npm ERR! code ELIFECYCLE<br>npm ERR! bbs@1.0.0 start: `node app.js`<br>npm ERR! Exit status 1<br>npm ERR!<br>npm ERR! Failed at the bbs@1.0.0 start script <span class=\"hljs-string\">&#x27;node app.js&#x27;</span>.<br>npm ERR! Make sure you have the latest version of node.js and npm installed.<br>npm ERR! If you <span class=\"hljs-keyword\">do</span>, this is most likely a problem with the bbs package,<br>npm ERR! not with npm itself.<br>npm ERR! Tell the author that this fails on your system:<br>npm ERR!     node app.js<br>npm ERR! You can get information on how to open an issue <span class=\"hljs-keyword\">for</span> this project with:<br>npm ERR!     npm bugs bbs<br>npm ERR! Or <span class=\"hljs-keyword\">if</span> that isn<span class=\"hljs-string\">&#x27;t available, you can get their info via:</span><br><span class=\"hljs-string\">npm ERR!     npm owner ls bbs</span><br><span class=\"hljs-string\">npm ERR! There is likely additional logging output above.</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">npm ERR! Please include the following file with any support request:</span><br><span class=\"hljs-string\">npm ERR!     f:\\Users\\dev\\bbs\\npm-debug.log</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>  重点错误信息：<br>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">TypeError: Undefined <span class=\"hljs-built_in\">type</span> `C` at `0`<br>    Did you try nesting Schemas? You can only nest using refs or arrays.<br>      at Function.Schema.interpretAsType (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\l<br>  ib\\schema.js:556:11)<br></code></pre></td></tr></table></figure><br>  和 <code>at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\models\\comment.js:18:18)</code>  定位代码错误的位置</p>\n<p>  百度 错误 得到的是 <a href=\"http://stackoverflow.com/questions/27259449/mongoose-error-nesting-schemas\">Mongoose error: nesting Schemas</a> 没看懂，感觉是mongodb 的使用出问题了，直接去 <a href=\"https://github.com/Automattic/mongoose/issues\">mongoose 官网issuse</a></p>\n<p>  发现错误 <code>module.exports = Schema(&#39;Comment&#39;, CommontSchema);</code> 写错了，应该是<code>module.exports = mongoose.model(&#39;Comment&#39;, CommontSchema);</code></p>\n<h2 id=\"2016-05-18\"><a href=\"#2016-05-18\" class=\"headerlink\" title=\"2016-05-18\"></a>2016-05-18</h2><p>  继续昨天的调试</p>\n<ol>\n<li><p><a href=\"http://nswbmw.github.io/N-club/7/README.html\">7.1. 基础项目搭建</a> 中<code>default.js</code> 关于 routerCacheConf 的配置是以前旧版本的koa-router-cache的使用方法，运行会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">  Error: `key` must be string or generatorFunction!<br>    at module.exports (f:\\Users\\dev\\bbs\\node_modules\\koa-router-cache\\lib\\index.<br>js:13:13)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\app.js:32:9)<br>    at Module._compile (module.js:409:26)<br>    at Object.Module._extensions..js (module.js:416:10)<br>    at Module.load (module.js:343:32)<br>    at Function.Module._load (module.js:300:12)<br>    at Function.Module.runMain (module.js:441:10)<br>    at startup (node.js:139:18)<br>    at node.js:968:3<br></code></pre></td></tr></table></figure>\n<p>新的配置方法请参考 <a href=\"https://github.com/nswbmw/koa-router-cache\">koa-router-cache</a></p>\n</li>\n<li><p>然后就可以启动了 简单的<code>node app.js</code> 看到没报错启动成功了，可以直接 <code> http://localhost:3000</code>页面报错，cli里面不报错，想了半天原因，后面才想去没有index.html 页面，只有signup页面，直接访问 <code>http://localhost:3000/signup</code>就OK了！</p>\n</li>\n<li><p>5章节就OK啦！继续下一节了！</p>\n</li>\n</ol>\n<h2 id=\"2016-05-19\"><a href=\"#2016-05-19\" class=\"headerlink\" title=\"2016-05-19\"></a>2016-05-19</h2><p>  7.8 章节点code 了，next code  7.9 章节</p>\n<h2 id=\"2016-05-20\"><a href=\"#2016-05-20\" class=\"headerlink\" title=\"2016-05-20\"></a>2016-05-20</h2><p>  昨天调试了几个bug，都是代码单词拼写错误或者分号缺少造成的语法错误，<code>node app.js</code>已经可以运行，但是首页打不开，今天继续调试！</p>\n<p>  感觉进步啊，不知道为啥，路由的不起作用，</p>\n<p>  next:</p>\n<pre><code>1. vscode debug 功能学习下\n2. router/topic/_id 不进入\n</code></pre>\n<h2 id=\"2016-05-23\"><a href=\"#2016-05-23\" class=\"headerlink\" title=\"2016-05-23\"></a>2016-05-23</h2><p>  /index 不响应，后台不报错， 浏览器无响应，不知道从何入手啊!</p>\n<p>  翻了下 <a href=\"https://github.com/nswbmw/N-club/issues\">N-club issuse</a>, 感觉是自己没起redis 服务，在 <a href=\"https://github.com/nswbmw/N-club/issues/5#issuecomment-206723697\">co-cache这个模块用到了redis</a> 中作者明确说 <code>需要同时开启mongoDB和redis的</code>, 参考 <a href=\"http://blog.csdn.net/renfufei/article/details/38474435\">Windows下安装并设置Redis</a> 安装开启redis 服务</p>\n<h2 id=\"2016-05-27\"><a href=\"#2016-05-27\" class=\"headerlink\" title=\"2016-05-27\"></a>2016-05-27</h2><ol>\n<li><p><a href=\"http://keenwon.com/1275.html\">在windows上部署使用Redis</a> 设置redis 为系统服务</p>\n</li>\n<li><p>debug 到 <code>userCard.ejs</code> 中 <code>&lt;% var userInfo = yield $User.getUserByName(name) %&gt;</code> 这行出错了！，再具体的不知道bug 的原因</p>\n</li>\n</ol>\n<h2 id=\"2016-05-30\"><a href=\"#2016-05-30\" class=\"headerlink\" title=\"2016-05-30\"></a>2016-05-30</h2><h3 id=\"bug-解决办法\"><a href=\"#bug-解决办法\" class=\"headerlink\" title=\"bug 解决办法\"></a>bug 解决办法</h3><ol>\n<li>学习 vscode debug koa 的方法，看下是否可以定位到具体的bug</li>\n</ol>\n<p>  参考: <a href=\"https://cnodejs.org/topic/572209ea35af8a704195f552\">【视频教程】使用vscode调试koa2-example</a></p>\n<ol start=\"2\">\n<li>学习下一章写测试 test , 关于 ‘$User.getUserByName(name)’ 的测试，看是否能找出bug</li>\n</ol>\n<h3 id=\"post-signin-bug\"><a href=\"#post-signin-bug\" class=\"headerlink\" title=\"post /signin  bug\"></a>post /signin  bug</h3><p>  先开始发现mongodb 中存入的密码是明文，然后登陆的时候是 比对的 是md5的值，发现注册的时候，schema中 md5(password) 的值没有赋值给body, 而是赋值给了this，所以body 中的还是明文的密码</p>\n<p>  然后登陆 post /signin  是报错了！</p>\n<p>  错误提示<br>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">koa-generic-session <span class=\"hljs-built_in\">set</span> error: Cannot <span class=\"hljs-built_in\">read</span> property <span class=\"hljs-string\">&#x27;maxAge&#x27;</span> of undefined<br>  at MongoStore.set$ (f:\\Users\\dev\\bbs\\node_modules\\koa-generic-session-mongo\\dist\\store.js:195:33)<br>  at tryCatch (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:72:40)<br>  at GeneratorFunctionPrototype.invoke [as _invoke] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:334:22)<br>  at GeneratorFunctionPrototype.prototype.(anonymous <span class=\"hljs-keyword\">function</span>) [as next] (f:\\Users\\dev\\bbs\\node_modules\\babel-runtime\\regenerator\\runtime.js:105:21)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br>  at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)<br>  at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)<br>  at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br>  at Object.co (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:50:10)<br>  at Object.toPromise (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:118:63)<br>  at next (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:99:29)<br>  at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:69:7)<br>  at f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:54:5<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-06-01\"><a href=\"#2016-06-01\" class=\"headerlink\" title=\"2016-06-01\"></a>2016-06-01</h2><h3 id=\"bugList\"><a href=\"#bugList\" class=\"headerlink\" title=\"bugList\"></a>bugList</h3><ol>\n<li><p><a href=\"#signin-post-bug\">koa-generic-session set error: Cannot read property ‘maxAge’ of undefined</a></p>\n</li>\n<li><p>detail topic/:id</p>\n</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">NotFoundError: Not Found<br>    at Object.module.exports.throw (f:\\Users\\dev\\bbs\\node_modules\\koa\\lib\\context.js:91:23)<br>    at Object.error (f:\\Users\\dev\\bbs\\node_modules\\koa-errorhandler\\index.js:70:73)<br>    at next (native)<br>    at Object.&lt;anonymous&gt; (f:\\Users\\dev\\bbs\\node_modules\\koa-compose\\index.js:28:19)<br>    at next (native)<br>    at onFulfilled (f:\\Users\\dev\\bbs\\node_modules\\co\\index.js:65:19)<br>    at process._tickCallback (node.js:369:9)<br></code></pre></td></tr></table></figure>\n\n<p>  ** fix ** : koa-frouter 在Windows中的配置问题<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">routerConf: &#123;<br>  <span class=\"hljs-attr\">root</span>: <span class=\"hljs-string\">&#x27;./routes&#x27;</span>,<br>  <span class=\"hljs-attr\">wildcard</span>: <span class=\"hljs-string\">&#x27;_&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"2016-06-02\"><a href=\"#2016-06-02\" class=\"headerlink\" title=\"2016-06-02\"></a>2016-06-02</h2><h3 id=\"继续-post-signup-时候的-bug\"><a href=\"#继续-post-signup-时候的-bug\" class=\"headerlink\" title=\"继续 post /signup 时候的 bug\"></a>继续 <code>post /signup</code> 时候的 <a href=\"#post-signin-bug\">bug</a></h3><p>暂时解决办法：app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">app.use(session(&#123;<br>  <span class=\"hljs-attr\">store</span>: <span class=\"hljs-keyword\">new</span> MongoStore(config.mongodb),<br>  <span class=\"hljs-attr\">beforeSave</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ctx, sess</span>)</span>&#123;<br>    ctx.session.cookie = sess.cookie = &#123;<br>      <span class=\"hljs-attr\">httpOnly</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>      <span class=\"hljs-attr\">overwrite</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">signed</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-attr\">maxAge</span>: &amp; * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span> <span class=\"hljs-comment\">//one day in ms</span><br>    &#125;;<br>  &#125;<br>&#125;));<br></code></pre></td></tr></table></figure>\n<p>通过<code>koa-generic-session</code> 中的method <code>beforeSave</code> 直接添加cookie 的相关设置</p>\n<h2 id=\"2016-06-03\"><a href=\"#2016-06-03\" class=\"headerlink\" title=\"2016-06-03\"></a>2016-06-03</h2><h3 id=\"1-post-create-bug\"><a href=\"#1-post-create-bug\" class=\"headerlink\" title=\"1. post /create bug:\"></a>1. post /create bug:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ValidationError: Topic validation failed<br>    at MongooseError.ValidationError (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\error\\validation.js:22:11)<br>    at model.Document.invalidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1366:32)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1242:17<br>    at validate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:702:7)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:733:9<br>    at Array.forEach (native)<br>    at SchemaString.SchemaType.doValidate (f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\schematype.js:707:19)<br>    at f:\\Users\\dev\\bbs\\node_modules\\mongoose\\lib\\document.js:1240:9<br>    at nextTickCallbackWith0Args (node.js:420:9)<br>    at process._tickCallback (node.js:349:13)<br></code></pre></td></tr></table></figure>\n\n<p>fixed ： post/signin 时候的 session 中添加user 属性 topic schema 定义的user 是对象！ 代码敲错了！</p>\n<p>整个代码可以跑起来了，下面 写 test</p>\n<h3 id=\"测试-test\"><a href=\"#测试-test\" class=\"headerlink\" title=\"测试 test\"></a>测试 test</h3><p>  <code>npm i mocha co-mocha supertest co-supertest --save-dev</code> 依赖的模块</p>\n<p>  test/signup.js 测试注册功能！</p>\n<h3 id=\"Next-Doing\"><a href=\"#Next-Doing\" class=\"headerlink\" title=\"Next Doing\"></a>Next Doing</h3><p>  test/signin.js 登录功能<br>  test/create.js 发帖功能<br>  test/comment.js 回帖功能</p>\n<p>  部署到coding 演示平台上</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><h2 id=\"系列教程\"><a href=\"#系列教程\" class=\"headerlink\" title=\"系列教程\"></a>系列教程</h2><ol>\n<li><a href=\"https://github.com/koajs/kick-off-koa\">kick-off-koa</a> 【已完成】</li>\n</ol>\n<pre><code>&gt;npm 安装，cli 交互模式学习。应该深入学习 [NodeSchool](http://nodeschool.io/zh-cn/) 下各个课程。\n</code></pre>\n<ol start=\"2\">\n<li><p><a href=\"http://cnodejs.org/topic/563f6e708e90ab7c391e9f71\">基于 koa 开发论坛系统</a> 【进行……】</p>\n</li>\n<li><p><a href=\"https://github.com/nswbmw/N-blog\">使用 Express + MongoDB 搭建多人博客</a></p>\n</li>\n<li><p><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node入门</a></p>\n</li>\n<li><p><a href=\"http://www.kancloud.cn/kancloud/create-voting-app/63977\">使用React、Node.js、MongoDB、Socket.IO开发一个角色投票应用</a> <a href=\"https://github.com/papersnake/newdenfaces-es6\">github</a></p>\n</li>\n<li><p><a href=\"https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication\">Build a React + Flux App with User Authentication</a></p>\n</li>\n<li><p><a href=\"https://github.com/mulgore/kodo\">和我一起实战react</a> 【未完成】</p>\n</li>\n<li><p><a href=\"https://github.com/zoubin/streamify-your-node-program\">对Node.js中 stream模块的学习积累和理解</a></p>\n</li>\n</ol>\n<h2 id=\"入门系列\"><a href=\"#入门系列\" class=\"headerlink\" title=\"入门系列\"></a>入门系列</h2><ol>\n<li><a href=\"https://github.com/guo-yu/koa-guide\">koa 中文文档</a></li>\n<li><a href=\"https://github.com/koajs/koa/wiki\">koa 中间件</a></li>\n<li><a href=\"http://17koa.com/koa-generator-examples/\">一起学koa</a></li>\n<li><a href=\"https://cnodejs.org/topic/56936889c2289f51658f0926\">koa技术分享</a></li>\n</ol>\n<h2 id=\"解读系列\"><a href=\"#解读系列\" class=\"headerlink\" title=\"解读系列\"></a>解读系列</h2><ol>\n<li><a href=\"https://github.com/berwin/Blog/issues/8\">koa</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/03/18/error-handling-in-koa/\">如何优雅的在 koa 中处理错误</a></li>\n<li><a href=\"https://github.com/zoubin/streamify-your-node-program\">对Node.js中 stream模块的学习积累和理解</a></li>\n<li><a href=\"link\">stream-handbook</a></li>\n</ol>\n<h2 id=\"NPM库\"><a href=\"#NPM库\" class=\"headerlink\" title=\"NPM库\"></a>NPM库</h2><ol>\n<li><a href=\"http://doxmate.cool/node-webot/wechat/index.html\">微信公共平台Node库wechat</a></li>\n</ol>"},{"title":"readList","date":"2016-04-05T06:39:43.000Z","_content":"\n平时好文章 搜集\n<!-- more -->\n\n# 这里作为读过的网络文章的链接汇总吧\n\n  ## F2E\n\n1. [css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件](http://blog.csdn.net/kongjiea/article/details/38614695)\n\n\n### 2016-04-05\n\n  1. [HTML代码简写法：Emmet和Haml](http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html)\n\n    >Emmet支持的简写规则:\n      ``` html\n        E 代表HTML标签。\n        E#id 代表id属性。\n        E.class 代表class属性。\n        E[attr=foo] 代表某一个特定属性。\n        E{foo} 代表标签包含的内容是foo。\n        E>N 代表N是E的子元素。\n        E+N 代表N是E的同级元素。\n        E^N 代表N是E的上级元素。\n      ```\n\n  2. [Emmet快捷方式查询](http://emmet.evget.com/)\n\n### 2016-04-12\n\n  1. [@font-face与性能](http://www.cnblogs.com/demix/archive/2009/11/28/1612715.html)\n  2. [图标字体化浅谈](http://isux.tencent.com/icon-font.html)\n\n### 2016-04-14\n\n  1. [javascript将base64编码的图片数据转换为file并提交](http://www.blogjava.net/jidebingfeng/articles/406171.html)\n    > 测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：\n    ```javascript\n      convertBase64UrlToBlob: function (urlData, type){\n          contentType = type || '';\n          var bytes=window.atob(urlData.split(',')[1]);        //去掉url的头，并转换为byte\n          //处理异常,将ascii码小于0的转换为大于0\n          var ab = new ArrayBuffer(bytes.length);\n          var ia = new Uint8Array(ab);\n          for (var i = 0; i < bytes.length; i++) {\n              ia[i] = bytes.charCodeAt(i);\n          }\n\n          return new Blob( [ab] , {type : contentType});\n      }\n    ```\n  2. [Creating a Blob from a base64 string in JavaScript](http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript)\n    ``` javascript\n      function b64toBlob(b64Data, contentType, sliceSize) {\n        contentType = contentType || '';\n        sliceSize = sliceSize || 512;\n\n        var byteCharacters = atob(b64Data);\n        var byteArrays = [];\n\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n          var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n          var byteNumbers = new Array(slice.length);\n          for (var i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n          }\n\n          var byteArray = new Uint8Array(byteNumbers);\n\n          byteArrays.push(byteArray);\n        }\n\n        var blob = new Blob(byteArrays, {type: contentType});\n        return blob;\n      }\n    ```\n    > 结合第一段代码可以发现，window.atob(b64Data.split(',')[1]), 要去掉url的头，而且代码看起来更健壮！\n\n\n### 2016-04-16\n\n  1. [如何优雅地使用Sublime Text3](http://www.jianshu.com/p/3cb5c6f2421c)【很全的一篇使用指南】\n\n    1. _\n_\n build System _\n_\n 【可以自己构建node 一键运行】\n      > 在sublime text中依次打开`Tools -> Build System -> New Build System... `粘贴以下代码后保存`(如Node.sublime-build)`, 然后把Build System设成Automatic\n      ```javascript\n        { \"cmd\": [\"node\", \"--use-strict\", \"--harmony\", \"$file\"], \"selector\": \"source.js\"}\n\n      ```\n    2. _\n_\n WakaTime -- 记录你的Code时间 _\n_\n\n\n      > WakaTime可以做到精确地统计到你花在某个项目上的时间;WakaTime针对不同的IDE，拥有不同的插件，在Sublime上安装着插件，就能统计到我使用Sublime进行的所有项目的行为。可以高效管理和知晓自己code时间\n    \n      sublime & vsCode 都安装了WakaTime 插件了！\n    \n    3. _\n_\n 定制属于自己的快捷键 _\n_\n\n\n      > 设置快捷键。在SublimeText里，打开Preferences -> Key Bindings - User，设置的快捷键。\n    \n      这样结合1 就可以 快捷运行当前的node 文件了\n    \n    4. _\n_\n [编写自己的Sublime Text2 插件](http://www.bluesdream.com/blog/write-your-own-sublime-text2-plug.html) _\n_\n 【很简单的实例】\n\n  Sublime 是迄今为止用的使用的最好用的编辑器了，大部分时间工作时间都在使用，以前了解过其相关的 snipper, hotkey机制，实现了一些自己的定制，现在了解了build System , new Plugin 机制可以更深入的定制了，'一直想写个直接输入当前时间的 plugin'。\n\n  _\n_\n 刚发现了编辑Markdown 文件时sublime 中Ctrl + P输入 @ 会出现目录，真是神器啊！ _\n_\n\n\n  2. [时间都去哪了?用RescueTime和WakaTime来记录你的时间](https://luolei.org/track-your-time/)\n\n    从上面文章中看到了的，感觉对自己很有用，最近拖延症晚期了，改变下，正使用Pomotodo 改正中……\n\n\n### 2016-04-18\n\n  1. [ React Native 开发指南](http://www.tuicool.com/articles/3EVz2qB) 【Facebook官方出品，中译】\n\n### 2016-04-19 15:12\n\n  1. [移动端底部input 样式布局修复方案](https://mingyili.github.io/2015/11/05.html#pagewrap)\n\n    修复了input 父类元素 postion: abusolut or fixed 软键盘弹出覆盖 input 元素的问题\n\n    通过 transform: translate3D(0,y,0) 整体向上滚动键盘的高度实现\n\n    主要通过window resize() 事件监听触发的键盘弹起事件，这个事件在iOS 中无法监听，只有通过android 可以监听到，而且iOS下没有问题，所以只处理 Android 的resize 的事件就可以了\n\n    知乎的相关讨论 [移动web页面，input获取焦点弹出系统虚拟键盘时，挡住input，求解决方案？](https://www.zhihu.com/question/32746176?sort=created)\n  2. 15:25\n\n    Sublime Date plugin: F5 输入date+hour; Shift + F5 输入hour\n\n### 2016-04-20  ###\n\n  1. [Lazy Load Plugin for jQuery](http://www.appelsiini.net/projects/lazyload) 【图片懒加载】\n\n\n### 2016-04-22 11:20\n\n  1. Dove Wedding 婚礼空间 预览模式下崩溃问题\n\n  昨天确定的swipe 初始化的时候会崩溃\n\n\n\n\n","source":"_posts/readList-1.md","raw":"---\ntitle: readList\ndate: 2016-04-05 14:39:43\ntags: [F2E, 前端, 笔记]\ncategories: [ReadList]\n---\n\n平时好文章 搜集\n<!-- more -->\n\n# 这里作为读过的网络文章的链接汇总吧\n\n  ## F2E\n\n1. [css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件](http://blog.csdn.net/kongjiea/article/details/38614695)\n\n\n### 2016-04-05\n\n  1. [HTML代码简写法：Emmet和Haml](http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html)\n\n    >Emmet支持的简写规则:\n      ``` html\n        E 代表HTML标签。\n        E#id 代表id属性。\n        E.class 代表class属性。\n        E[attr=foo] 代表某一个特定属性。\n        E{foo} 代表标签包含的内容是foo。\n        E>N 代表N是E的子元素。\n        E+N 代表N是E的同级元素。\n        E^N 代表N是E的上级元素。\n      ```\n\n  2. [Emmet快捷方式查询](http://emmet.evget.com/)\n\n### 2016-04-12\n\n  1. [@font-face与性能](http://www.cnblogs.com/demix/archive/2009/11/28/1612715.html)\n  2. [图标字体化浅谈](http://isux.tencent.com/icon-font.html)\n\n### 2016-04-14\n\n  1. [javascript将base64编码的图片数据转换为file并提交](http://www.blogjava.net/jidebingfeng/articles/406171.html)\n    > 测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：\n    ```javascript\n      convertBase64UrlToBlob: function (urlData, type){\n          contentType = type || '';\n          var bytes=window.atob(urlData.split(',')[1]);        //去掉url的头，并转换为byte\n          //处理异常,将ascii码小于0的转换为大于0\n          var ab = new ArrayBuffer(bytes.length);\n          var ia = new Uint8Array(ab);\n          for (var i = 0; i < bytes.length; i++) {\n              ia[i] = bytes.charCodeAt(i);\n          }\n\n          return new Blob( [ab] , {type : contentType});\n      }\n    ```\n  2. [Creating a Blob from a base64 string in JavaScript](http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript)\n    ``` javascript\n      function b64toBlob(b64Data, contentType, sliceSize) {\n        contentType = contentType || '';\n        sliceSize = sliceSize || 512;\n\n        var byteCharacters = atob(b64Data);\n        var byteArrays = [];\n\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n          var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n          var byteNumbers = new Array(slice.length);\n          for (var i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n          }\n\n          var byteArray = new Uint8Array(byteNumbers);\n\n          byteArrays.push(byteArray);\n        }\n\n        var blob = new Blob(byteArrays, {type: contentType});\n        return blob;\n      }\n    ```\n    > 结合第一段代码可以发现，window.atob(b64Data.split(',')[1]), 要去掉url的头，而且代码看起来更健壮！\n\n\n### 2016-04-16\n\n  1. [如何优雅地使用Sublime Text3](http://www.jianshu.com/p/3cb5c6f2421c)【很全的一篇使用指南】\n\n    1. _\n_\n build System _\n_\n 【可以自己构建node 一键运行】\n      > 在sublime text中依次打开`Tools -> Build System -> New Build System... `粘贴以下代码后保存`(如Node.sublime-build)`, 然后把Build System设成Automatic\n      ```javascript\n        { \"cmd\": [\"node\", \"--use-strict\", \"--harmony\", \"$file\"], \"selector\": \"source.js\"}\n\n      ```\n    2. _\n_\n WakaTime -- 记录你的Code时间 _\n_\n\n\n      > WakaTime可以做到精确地统计到你花在某个项目上的时间;WakaTime针对不同的IDE，拥有不同的插件，在Sublime上安装着插件，就能统计到我使用Sublime进行的所有项目的行为。可以高效管理和知晓自己code时间\n    \n      sublime & vsCode 都安装了WakaTime 插件了！\n    \n    3. _\n_\n 定制属于自己的快捷键 _\n_\n\n\n      > 设置快捷键。在SublimeText里，打开Preferences -> Key Bindings - User，设置的快捷键。\n    \n      这样结合1 就可以 快捷运行当前的node 文件了\n    \n    4. _\n_\n [编写自己的Sublime Text2 插件](http://www.bluesdream.com/blog/write-your-own-sublime-text2-plug.html) _\n_\n 【很简单的实例】\n\n  Sublime 是迄今为止用的使用的最好用的编辑器了，大部分时间工作时间都在使用，以前了解过其相关的 snipper, hotkey机制，实现了一些自己的定制，现在了解了build System , new Plugin 机制可以更深入的定制了，'一直想写个直接输入当前时间的 plugin'。\n\n  _\n_\n 刚发现了编辑Markdown 文件时sublime 中Ctrl + P输入 @ 会出现目录，真是神器啊！ _\n_\n\n\n  2. [时间都去哪了?用RescueTime和WakaTime来记录你的时间](https://luolei.org/track-your-time/)\n\n    从上面文章中看到了的，感觉对自己很有用，最近拖延症晚期了，改变下，正使用Pomotodo 改正中……\n\n\n### 2016-04-18\n\n  1. [ React Native 开发指南](http://www.tuicool.com/articles/3EVz2qB) 【Facebook官方出品，中译】\n\n### 2016-04-19 15:12\n\n  1. [移动端底部input 样式布局修复方案](https://mingyili.github.io/2015/11/05.html#pagewrap)\n\n    修复了input 父类元素 postion: abusolut or fixed 软键盘弹出覆盖 input 元素的问题\n\n    通过 transform: translate3D(0,y,0) 整体向上滚动键盘的高度实现\n\n    主要通过window resize() 事件监听触发的键盘弹起事件，这个事件在iOS 中无法监听，只有通过android 可以监听到，而且iOS下没有问题，所以只处理 Android 的resize 的事件就可以了\n\n    知乎的相关讨论 [移动web页面，input获取焦点弹出系统虚拟键盘时，挡住input，求解决方案？](https://www.zhihu.com/question/32746176?sort=created)\n  2. 15:25\n\n    Sublime Date plugin: F5 输入date+hour; Shift + F5 输入hour\n\n### 2016-04-20  ###\n\n  1. [Lazy Load Plugin for jQuery](http://www.appelsiini.net/projects/lazyload) 【图片懒加载】\n\n\n### 2016-04-22 11:20\n\n  1. Dove Wedding 婚礼空间 预览模式下崩溃问题\n\n  昨天确定的swipe 初始化的时候会崩溃\n\n\n\n\n","slug":"readList-1","published":1,"updated":"2022-01-20T04:12:09.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0w000i7uo069phdts0","content":"<p>平时好文章 搜集</p>\n<span id=\"more\"></span>\n\n<h1 id=\"这里作为读过的网络文章的链接汇总吧\"><a href=\"#这里作为读过的网络文章的链接汇总吧\" class=\"headerlink\" title=\"这里作为读过的网络文章的链接汇总吧\"></a>这里作为读过的网络文章的链接汇总吧</h1><h2 id=\"F2E\"><a href=\"#F2E\" class=\"headerlink\" title=\"F2E\"></a>F2E</h2><ol>\n<li><a href=\"http://blog.csdn.net/kongjiea/article/details/38614695\">css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件</a></li>\n</ol>\n<h3 id=\"2016-04-05\"><a href=\"#2016-04-05\" class=\"headerlink\" title=\"2016-04-05\"></a>2016-04-05</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html\">HTML代码简写法：Emmet和Haml</a></li>\n</ol>\n<pre><code>&gt;Emmet支持的简写规则:\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">E 代表HTML标签。<br>E#id 代表id属性。<br>E.class 代表class属性。<br>E[attr=foo] 代表某一个特定属性。<br>E&#123;foo&#125; 代表标签包含的内容是foo。<br>E&gt;N 代表N是E的子元素。<br>E+N 代表N是E的同级元素。<br>E^N 代表N是E的上级元素。<br></code></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"http://emmet.evget.com/\">Emmet快捷方式查询</a></li>\n</ol>\n<h3 id=\"2016-04-12\"><a href=\"#2016-04-12\" class=\"headerlink\" title=\"2016-04-12\"></a>2016-04-12</h3><ol>\n<li><a href=\"http://www.cnblogs.com/demix/archive/2009/11/28/1612715.html\">@font-face与性能</a></li>\n<li><a href=\"http://isux.tencent.com/icon-font.html\">图标字体化浅谈</a></li>\n</ol>\n<h3 id=\"2016-04-14\"><a href=\"#2016-04-14\" class=\"headerlink\" title=\"2016-04-14\"></a>2016-04-14</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-16\"><a href=\"#2016-04-16\" class=\"headerlink\" title=\"2016-04-16\"></a>2016-04-16</h3><ol>\n<li><a href=\"http://www.jianshu.com/p/3cb5c6f2421c\">如何优雅地使用Sublime Text3</a>【很全的一篇使用指南】</li>\n</ol>\n<pre><code>1. _\n</code></pre>\n<p>_<br> build System _<br>_<br> 【可以自己构建node 一键运行】<br>      &gt; 在sublime text中依次打开<code>Tools -&gt; Build System -&gt; New Build System... </code>粘贴以下代码后保存<code>(如Node.sublime-build)</code>, 然后把Build System设成Automatic<br>      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-string\">&quot;cmd&quot;</span>: [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;--use-strict&quot;</span>, <span class=\"hljs-string\">&quot;--harmony&quot;</span>, <span class=\"hljs-string\">&quot;$file&quot;</span>], <span class=\"hljs-string\">&quot;selector&quot;</span>: <span class=\"hljs-string\">&quot;source.js&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><br>    2. _<br>_<br> WakaTime – 记录你的Code时间 _<br>_</p>\n<pre><code>  &gt; WakaTime可以做到精确地统计到你花在某个项目上的时间;WakaTime针对不同的IDE，拥有不同的插件，在Sublime上安装着插件，就能统计到我使用Sublime进行的所有项目的行为。可以高效管理和知晓自己code时间\n\n  sublime &amp; vsCode 都安装了WakaTime 插件了！\n\n3. _\n</code></pre>\n<p>_<br> 定制属于自己的快捷键 _<br>_</p>\n<pre><code>  &gt; 设置快捷键。在SublimeText里，打开Preferences -&gt; Key Bindings - User，设置的快捷键。\n\n  这样结合1 就可以 快捷运行当前的node 文件了\n\n4. _\n</code></pre>\n<p>_<br> <a href=\"http://www.bluesdream.com/blog/write-your-own-sublime-text2-plug.html\">编写自己的Sublime Text2 插件</a> _<br>_<br> 【很简单的实例】</p>\n<p>  Sublime 是迄今为止用的使用的最好用的编辑器了，大部分时间工作时间都在使用，以前了解过其相关的 snipper, hotkey机制，实现了一些自己的定制，现在了解了build System , new Plugin 机制可以更深入的定制了，’一直想写个直接输入当前时间的 plugin’。</p>\n<p>  _<br>_<br> 刚发现了编辑Markdown 文件时sublime 中Ctrl + P输入 @ 会出现目录，真是神器啊！ _<br>_</p>\n<ol start=\"2\">\n<li><a href=\"https://luolei.org/track-your-time/\">时间都去哪了?用RescueTime和WakaTime来记录你的时间</a></li>\n</ol>\n<pre><code>从上面文章中看到了的，感觉对自己很有用，最近拖延症晚期了，改变下，正使用Pomotodo 改正中……\n</code></pre>\n<h3 id=\"2016-04-18\"><a href=\"#2016-04-18\" class=\"headerlink\" title=\"2016-04-18\"></a>2016-04-18</h3><ol>\n<li><a href=\"http://www.tuicool.com/articles/3EVz2qB\"> React Native 开发指南</a> 【Facebook官方出品，中译】</li>\n</ol>\n<h3 id=\"2016-04-19-15-12\"><a href=\"#2016-04-19-15-12\" class=\"headerlink\" title=\"2016-04-19 15:12\"></a>2016-04-19 15:12</h3><ol>\n<li><a href=\"https://mingyili.github.io/2015/11/05.html#pagewrap\">移动端底部input 样式布局修复方案</a></li>\n</ol>\n<pre><code>修复了input 父类元素 postion: abusolut or fixed 软键盘弹出覆盖 input 元素的问题\n\n通过 transform: translate3D(0,y,0) 整体向上滚动键盘的高度实现\n\n主要通过window resize() 事件监听触发的键盘弹起事件，这个事件在iOS 中无法监听，只有通过android 可以监听到，而且iOS下没有问题，所以只处理 Android 的resize 的事件就可以了\n\n知乎的相关讨论 [移动web页面，input获取焦点弹出系统虚拟键盘时，挡住input，求解决方案？](https://www.zhihu.com/question/32746176?sort=created)\n</code></pre>\n<ol start=\"2\">\n<li>15:25</li>\n</ol>\n<pre><code>Sublime Date plugin: F5 输入date+hour; Shift + F5 输入hour\n</code></pre>\n<h3 id=\"2016-04-20\"><a href=\"#2016-04-20\" class=\"headerlink\" title=\"2016-04-20\"></a>2016-04-20</h3><ol>\n<li><a href=\"http://www.appelsiini.net/projects/lazyload\">Lazy Load Plugin for jQuery</a> 【图片懒加载】</li>\n</ol>\n<h3 id=\"2016-04-22-11-20\"><a href=\"#2016-04-22-11-20\" class=\"headerlink\" title=\"2016-04-22 11:20\"></a>2016-04-22 11:20</h3><ol>\n<li>Dove Wedding 婚礼空间 预览模式下崩溃问题</li>\n</ol>\n<p>  昨天确定的swipe 初始化的时候会崩溃</p>\n","site":{"data":{}},"excerpt":"<p>平时好文章 搜集</p>","more":"<h1 id=\"这里作为读过的网络文章的链接汇总吧\"><a href=\"#这里作为读过的网络文章的链接汇总吧\" class=\"headerlink\" title=\"这里作为读过的网络文章的链接汇总吧\"></a>这里作为读过的网络文章的链接汇总吧</h1><h2 id=\"F2E\"><a href=\"#F2E\" class=\"headerlink\" title=\"F2E\"></a>F2E</h2><ol>\n<li><a href=\"http://blog.csdn.net/kongjiea/article/details/38614695\">css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件</a></li>\n</ol>\n<h3 id=\"2016-04-05\"><a href=\"#2016-04-05\" class=\"headerlink\" title=\"2016-04-05\"></a>2016-04-05</h3><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html\">HTML代码简写法：Emmet和Haml</a></li>\n</ol>\n<pre><code>&gt;Emmet支持的简写规则:\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">E 代表HTML标签。<br>E#id 代表id属性。<br>E.class 代表class属性。<br>E[attr=foo] 代表某一个特定属性。<br>E&#123;foo&#125; 代表标签包含的内容是foo。<br>E&gt;N 代表N是E的子元素。<br>E+N 代表N是E的同级元素。<br>E^N 代表N是E的上级元素。<br></code></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"http://emmet.evget.com/\">Emmet快捷方式查询</a></li>\n</ol>\n<h3 id=\"2016-04-12\"><a href=\"#2016-04-12\" class=\"headerlink\" title=\"2016-04-12\"></a>2016-04-12</h3><ol>\n<li><a href=\"http://www.cnblogs.com/demix/archive/2009/11/28/1612715.html\">@font-face与性能</a></li>\n<li><a href=\"http://isux.tencent.com/icon-font.html\">图标字体化浅谈</a></li>\n</ol>\n<h3 id=\"2016-04-14\"><a href=\"#2016-04-14\" class=\"headerlink\" title=\"2016-04-14\"></a>2016-04-14</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-16\"><a href=\"#2016-04-16\" class=\"headerlink\" title=\"2016-04-16\"></a>2016-04-16</h3><ol>\n<li><a href=\"http://www.jianshu.com/p/3cb5c6f2421c\">如何优雅地使用Sublime Text3</a>【很全的一篇使用指南】</li>\n</ol>\n<pre><code>1. _\n</code></pre>\n<p>_<br> build System _<br>_<br> 【可以自己构建node 一键运行】<br>      &gt; 在sublime text中依次打开<code>Tools -&gt; Build System -&gt; New Build System... </code>粘贴以下代码后保存<code>(如Node.sublime-build)</code>, 然后把Build System设成Automatic<br>      <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-string\">&quot;cmd&quot;</span>: [<span class=\"hljs-string\">&quot;node&quot;</span>, <span class=\"hljs-string\">&quot;--use-strict&quot;</span>, <span class=\"hljs-string\">&quot;--harmony&quot;</span>, <span class=\"hljs-string\">&quot;$file&quot;</span>], <span class=\"hljs-string\">&quot;selector&quot;</span>: <span class=\"hljs-string\">&quot;source.js&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><br>    2. _<br>_<br> WakaTime – 记录你的Code时间 _<br>_</p>\n<pre><code>  &gt; WakaTime可以做到精确地统计到你花在某个项目上的时间;WakaTime针对不同的IDE，拥有不同的插件，在Sublime上安装着插件，就能统计到我使用Sublime进行的所有项目的行为。可以高效管理和知晓自己code时间\n\n  sublime &amp; vsCode 都安装了WakaTime 插件了！\n\n3. _\n</code></pre>\n<p>_<br> 定制属于自己的快捷键 _<br>_</p>\n<pre><code>  &gt; 设置快捷键。在SublimeText里，打开Preferences -&gt; Key Bindings - User，设置的快捷键。\n\n  这样结合1 就可以 快捷运行当前的node 文件了\n\n4. _\n</code></pre>\n<p>_<br> <a href=\"http://www.bluesdream.com/blog/write-your-own-sublime-text2-plug.html\">编写自己的Sublime Text2 插件</a> _<br>_<br> 【很简单的实例】</p>\n<p>  Sublime 是迄今为止用的使用的最好用的编辑器了，大部分时间工作时间都在使用，以前了解过其相关的 snipper, hotkey机制，实现了一些自己的定制，现在了解了build System , new Plugin 机制可以更深入的定制了，’一直想写个直接输入当前时间的 plugin’。</p>\n<p>  _<br>_<br> 刚发现了编辑Markdown 文件时sublime 中Ctrl + P输入 @ 会出现目录，真是神器啊！ _<br>_</p>\n<ol start=\"2\">\n<li><a href=\"https://luolei.org/track-your-time/\">时间都去哪了?用RescueTime和WakaTime来记录你的时间</a></li>\n</ol>\n<pre><code>从上面文章中看到了的，感觉对自己很有用，最近拖延症晚期了，改变下，正使用Pomotodo 改正中……\n</code></pre>\n<h3 id=\"2016-04-18\"><a href=\"#2016-04-18\" class=\"headerlink\" title=\"2016-04-18\"></a>2016-04-18</h3><ol>\n<li><a href=\"http://www.tuicool.com/articles/3EVz2qB\"> React Native 开发指南</a> 【Facebook官方出品，中译】</li>\n</ol>\n<h3 id=\"2016-04-19-15-12\"><a href=\"#2016-04-19-15-12\" class=\"headerlink\" title=\"2016-04-19 15:12\"></a>2016-04-19 15:12</h3><ol>\n<li><a href=\"https://mingyili.github.io/2015/11/05.html#pagewrap\">移动端底部input 样式布局修复方案</a></li>\n</ol>\n<pre><code>修复了input 父类元素 postion: abusolut or fixed 软键盘弹出覆盖 input 元素的问题\n\n通过 transform: translate3D(0,y,0) 整体向上滚动键盘的高度实现\n\n主要通过window resize() 事件监听触发的键盘弹起事件，这个事件在iOS 中无法监听，只有通过android 可以监听到，而且iOS下没有问题，所以只处理 Android 的resize 的事件就可以了\n\n知乎的相关讨论 [移动web页面，input获取焦点弹出系统虚拟键盘时，挡住input，求解决方案？](https://www.zhihu.com/question/32746176?sort=created)\n</code></pre>\n<ol start=\"2\">\n<li>15:25</li>\n</ol>\n<pre><code>Sublime Date plugin: F5 输入date+hour; Shift + F5 输入hour\n</code></pre>\n<h3 id=\"2016-04-20\"><a href=\"#2016-04-20\" class=\"headerlink\" title=\"2016-04-20\"></a>2016-04-20</h3><ol>\n<li><a href=\"http://www.appelsiini.net/projects/lazyload\">Lazy Load Plugin for jQuery</a> 【图片懒加载】</li>\n</ol>\n<h3 id=\"2016-04-22-11-20\"><a href=\"#2016-04-22-11-20\" class=\"headerlink\" title=\"2016-04-22 11:20\"></a>2016-04-22 11:20</h3><ol>\n<li>Dove Wedding 婚礼空间 预览模式下崩溃问题</li>\n</ol>\n<p>  昨天确定的swipe 初始化的时候会崩溃</p>"},{"title":"readList 2016.06.01","date":"2016-06-02T06:53:47.000Z","_content":"\n转眼进入六月了，在开个readlist ，把一些看过的网上资料，总结于此！\n\n<!-- more -->\n\n## 2016-06-02 \n\n  1. [影厅座位预览效果（css3）](http://www.jcodecraeer.com/a/qianduankaifa/css3/2016/0602/4322.html) 通过 `transform-style: preserve-3d`属性实现:选座后的视角变化！  [Github](https://github.com/codrops/SeatPreview)\n\n  2. [React 学习指南](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html)\n\n  3. [移动端图片上传的实践](http://qiutc.me/post/uploading-image-file-in-mobile-fe.html)\n\n## 2016-06-03\n\n  1. [nodejs上传整个文件夹](https://cnodejs.org/topic/574e9e856e66e53930827697)\n\n    >`<input id=\"file\" type=\"file\" directory mozDirectory webkitDirectory />` [Demo](http://jsbin.com/retoxesoya/1/edit?html,js,output)\n\n  2. [深入理解Node.js：核心思想与源码分析](https://yjhjstz.gitbooks.io/deep-into-node/content/) 【电子书】\n\n    >深入理解Node.js：核心思想与源码分析\n\n  3. [react native redux FeInn 从零到1让你学会搭建一个APP](https://github.com/febobo/react-native-redux-FeInn)\n\n\n## 2016-06-12 \n\n  1. [N​gi​n​x 内配置 G​o​o​g​l​e A​nal​y​ti​c​s 指南](https://darknode.in/network/nginx-google-analytics/) 【自己的网站可以配置实践下】\n\n  2. [文字龙卷风](http://www.w3cfuns.com/notes/26894/65fd1b670c97595cc23f3a7416d11cc5.html) 【很赞的效果】\n\n## 2016-06-13\n\n  1. [JSDoc 中文文档](http://www.css88.com/doc/jsdoc/index.html)\n\n  2. [构建 Express Api 五个有用的中间件[译]](https://fe.ele.me/gou-jian-express-api-wu-ge-you-yong-de-zhong-jian-jian/?f=tt) \n\n  > 跨域 cors  \n    gzip 压缩 compression \n    安全设置 helmet \n    分布式多进程处理 cluster\n    生产日志 morgan\n    https SSL\n\n## 2016-06-16\n\n  1. [21 天学会 Emacs](https://zilongshanren.com/LearnEmacs/) 【LearnEmacs系列教材】\n\n  2. [深入理解javascript原型和闭包系列](http://www.cnblogs.com/wangfupeng1988/p/4001284.html)\n\n## 2016-06-17\n\n  1. [莫邪 Node.js系列文章](http://www.moye.me/nodejs_articles/) \n  > 涉及很多方面，很值得看看","source":"_posts/readList-2016-06-01.md","raw":"---\ntitle: readList 2016.06.01\ndate: 2016-06-02 14:53:47\ntags: [readlist, F2E]\ncategories: [ReadList]\n---\n\n转眼进入六月了，在开个readlist ，把一些看过的网上资料，总结于此！\n\n<!-- more -->\n\n## 2016-06-02 \n\n  1. [影厅座位预览效果（css3）](http://www.jcodecraeer.com/a/qianduankaifa/css3/2016/0602/4322.html) 通过 `transform-style: preserve-3d`属性实现:选座后的视角变化！  [Github](https://github.com/codrops/SeatPreview)\n\n  2. [React 学习指南](http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html)\n\n  3. [移动端图片上传的实践](http://qiutc.me/post/uploading-image-file-in-mobile-fe.html)\n\n## 2016-06-03\n\n  1. [nodejs上传整个文件夹](https://cnodejs.org/topic/574e9e856e66e53930827697)\n\n    >`<input id=\"file\" type=\"file\" directory mozDirectory webkitDirectory />` [Demo](http://jsbin.com/retoxesoya/1/edit?html,js,output)\n\n  2. [深入理解Node.js：核心思想与源码分析](https://yjhjstz.gitbooks.io/deep-into-node/content/) 【电子书】\n\n    >深入理解Node.js：核心思想与源码分析\n\n  3. [react native redux FeInn 从零到1让你学会搭建一个APP](https://github.com/febobo/react-native-redux-FeInn)\n\n\n## 2016-06-12 \n\n  1. [N​gi​n​x 内配置 G​o​o​g​l​e A​nal​y​ti​c​s 指南](https://darknode.in/network/nginx-google-analytics/) 【自己的网站可以配置实践下】\n\n  2. [文字龙卷风](http://www.w3cfuns.com/notes/26894/65fd1b670c97595cc23f3a7416d11cc5.html) 【很赞的效果】\n\n## 2016-06-13\n\n  1. [JSDoc 中文文档](http://www.css88.com/doc/jsdoc/index.html)\n\n  2. [构建 Express Api 五个有用的中间件[译]](https://fe.ele.me/gou-jian-express-api-wu-ge-you-yong-de-zhong-jian-jian/?f=tt) \n\n  > 跨域 cors  \n    gzip 压缩 compression \n    安全设置 helmet \n    分布式多进程处理 cluster\n    生产日志 morgan\n    https SSL\n\n## 2016-06-16\n\n  1. [21 天学会 Emacs](https://zilongshanren.com/LearnEmacs/) 【LearnEmacs系列教材】\n\n  2. [深入理解javascript原型和闭包系列](http://www.cnblogs.com/wangfupeng1988/p/4001284.html)\n\n## 2016-06-17\n\n  1. [莫邪 Node.js系列文章](http://www.moye.me/nodejs_articles/) \n  > 涉及很多方面，很值得看看","slug":"readList-2016-06-01","published":1,"updated":"2022-01-20T04:12:09.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo0z000l7uo0425hgdy6","content":"<p>转眼进入六月了，在开个readlist ，把一些看过的网上资料，总结于此！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2016-06-02\"><a href=\"#2016-06-02\" class=\"headerlink\" title=\"2016-06-02\"></a>2016-06-02</h2><ol>\n<li><p><a href=\"http://www.jcodecraeer.com/a/qianduankaifa/css3/2016/0602/4322.html\">影厅座位预览效果（css3）</a> 通过 <code>transform-style: preserve-3d</code>属性实现:选座后的视角变化！  <a href=\"https://github.com/codrops/SeatPreview\">Github</a></p>\n</li>\n<li><p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html\">React 学习指南</a></p>\n</li>\n<li><p><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a></p>\n</li>\n</ol>\n<h2 id=\"2016-06-03\"><a href=\"#2016-06-03\" class=\"headerlink\" title=\"2016-06-03\"></a>2016-06-03</h2><ol>\n<li><a href=\"https://cnodejs.org/topic/574e9e856e66e53930827697\">nodejs上传整个文件夹</a></li>\n</ol>\n<pre><code>&gt;`&lt;input id=&quot;file&quot; type=&quot;file&quot; directory mozDirectory webkitDirectory /&gt;` [Demo](http://jsbin.com/retoxesoya/1/edit?html,js,output)\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"https://yjhjstz.gitbooks.io/deep-into-node/content/\">深入理解Node.js：核心思想与源码分析</a> 【电子书】</li>\n</ol>\n<pre><code>&gt;深入理解Node.js：核心思想与源码分析\n</code></pre>\n<ol start=\"3\">\n<li><a href=\"https://github.com/febobo/react-native-redux-FeInn\">react native redux FeInn 从零到1让你学会搭建一个APP</a></li>\n</ol>\n<h2 id=\"2016-06-12\"><a href=\"#2016-06-12\" class=\"headerlink\" title=\"2016-06-12\"></a>2016-06-12</h2><ol>\n<li><p><a href=\"https://darknode.in/network/nginx-google-analytics/\">N​gi​n​x 内配置 G​o​o​g​l​e A​nal​y​ti​c​s 指南</a> 【自己的网站可以配置实践下】</p>\n</li>\n<li><p><a href=\"http://www.w3cfuns.com/notes/26894/65fd1b670c97595cc23f3a7416d11cc5.html\">文字龙卷风</a> 【很赞的效果】</p>\n</li>\n</ol>\n<h2 id=\"2016-06-13\"><a href=\"#2016-06-13\" class=\"headerlink\" title=\"2016-06-13\"></a>2016-06-13</h2><ol>\n<li><p><a href=\"http://www.css88.com/doc/jsdoc/index.html\">JSDoc 中文文档</a></p>\n</li>\n<li><p><a href=\"https://fe.ele.me/gou-jian-express-api-wu-ge-you-yong-de-zhong-jian-jian/?f=tt\">构建 Express Api 五个有用的中间件[译]</a> </p>\n</li>\n</ol>\n<blockquote>\n<p>跨域 cors<br>    gzip 压缩 compression<br>    安全设置 helmet<br>    分布式多进程处理 cluster<br>    生产日志 morgan<br>    https SSL</p>\n</blockquote>\n<h2 id=\"2016-06-16\"><a href=\"#2016-06-16\" class=\"headerlink\" title=\"2016-06-16\"></a>2016-06-16</h2><ol>\n<li><p><a href=\"https://zilongshanren.com/LearnEmacs/\">21 天学会 Emacs</a> 【LearnEmacs系列教材】</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\">深入理解javascript原型和闭包系列</a></p>\n</li>\n</ol>\n<h2 id=\"2016-06-17\"><a href=\"#2016-06-17\" class=\"headerlink\" title=\"2016-06-17\"></a>2016-06-17</h2><ol>\n<li><a href=\"http://www.moye.me/nodejs_articles/\">莫邪 Node.js系列文章</a> <blockquote>\n<p>涉及很多方面，很值得看看</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>转眼进入六月了，在开个readlist ，把一些看过的网上资料，总结于此！</p>","more":"<h2 id=\"2016-06-02\"><a href=\"#2016-06-02\" class=\"headerlink\" title=\"2016-06-02\"></a>2016-06-02</h2><ol>\n<li><p><a href=\"http://www.jcodecraeer.com/a/qianduankaifa/css3/2016/0602/4322.html\">影厅座位预览效果（css3）</a> 通过 <code>transform-style: preserve-3d</code>属性实现:选座后的视角变化！  <a href=\"https://github.com/codrops/SeatPreview\">Github</a></p>\n</li>\n<li><p><a href=\"http://guoyongfeng.github.io/idoc/html/React%E8%AF%BE%E7%A8%8B%E4%B8%93%E9%A2%98/React%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html\">React 学习指南</a></p>\n</li>\n<li><p><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a></p>\n</li>\n</ol>\n<h2 id=\"2016-06-03\"><a href=\"#2016-06-03\" class=\"headerlink\" title=\"2016-06-03\"></a>2016-06-03</h2><ol>\n<li><a href=\"https://cnodejs.org/topic/574e9e856e66e53930827697\">nodejs上传整个文件夹</a></li>\n</ol>\n<pre><code>&gt;`&lt;input id=&quot;file&quot; type=&quot;file&quot; directory mozDirectory webkitDirectory /&gt;` [Demo](http://jsbin.com/retoxesoya/1/edit?html,js,output)\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"https://yjhjstz.gitbooks.io/deep-into-node/content/\">深入理解Node.js：核心思想与源码分析</a> 【电子书】</li>\n</ol>\n<pre><code>&gt;深入理解Node.js：核心思想与源码分析\n</code></pre>\n<ol start=\"3\">\n<li><a href=\"https://github.com/febobo/react-native-redux-FeInn\">react native redux FeInn 从零到1让你学会搭建一个APP</a></li>\n</ol>\n<h2 id=\"2016-06-12\"><a href=\"#2016-06-12\" class=\"headerlink\" title=\"2016-06-12\"></a>2016-06-12</h2><ol>\n<li><p><a href=\"https://darknode.in/network/nginx-google-analytics/\">N​gi​n​x 内配置 G​o​o​g​l​e A​nal​y​ti​c​s 指南</a> 【自己的网站可以配置实践下】</p>\n</li>\n<li><p><a href=\"http://www.w3cfuns.com/notes/26894/65fd1b670c97595cc23f3a7416d11cc5.html\">文字龙卷风</a> 【很赞的效果】</p>\n</li>\n</ol>\n<h2 id=\"2016-06-13\"><a href=\"#2016-06-13\" class=\"headerlink\" title=\"2016-06-13\"></a>2016-06-13</h2><ol>\n<li><p><a href=\"http://www.css88.com/doc/jsdoc/index.html\">JSDoc 中文文档</a></p>\n</li>\n<li><p><a href=\"https://fe.ele.me/gou-jian-express-api-wu-ge-you-yong-de-zhong-jian-jian/?f=tt\">构建 Express Api 五个有用的中间件[译]</a> </p>\n</li>\n</ol>\n<blockquote>\n<p>跨域 cors<br>    gzip 压缩 compression<br>    安全设置 helmet<br>    分布式多进程处理 cluster<br>    生产日志 morgan<br>    https SSL</p>\n</blockquote>\n<h2 id=\"2016-06-16\"><a href=\"#2016-06-16\" class=\"headerlink\" title=\"2016-06-16\"></a>2016-06-16</h2><ol>\n<li><p><a href=\"https://zilongshanren.com/LearnEmacs/\">21 天学会 Emacs</a> 【LearnEmacs系列教材】</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\">深入理解javascript原型和闭包系列</a></p>\n</li>\n</ol>\n<h2 id=\"2016-06-17\"><a href=\"#2016-06-17\" class=\"headerlink\" title=\"2016-06-17\"></a>2016-06-17</h2><ol>\n<li><a href=\"http://www.moye.me/nodejs_articles/\">莫邪 Node.js系列文章</a> <blockquote>\n<p>涉及很多方面，很值得看看</p>\n</blockquote>\n</li>\n</ol>"},{"title":"readList 201608","date":"2016-08-08T06:59:02.000Z","_content":"八月份的文章荟萃\n<!-- more -->\n\n\n## 2016-08-08\n\n1. [如何让你的网页打开速度降低到1s内](http://www.jianshu.com/p/d857c3ff78d6)\n2. [大公司里怎样开发和部署前端代码？(附实践方案)](http://www.jianshu.com/p/35e20bb361d0#)\n3. [大公司里怎样开发和部署前端代码？](https://github.com/fouber/blog/issues/6) github相关的讨论值得一看\n4. [高质量Node.js微服务的编写和部署](https://github.com/Carrotzpc/docker_web_app) docker相关的node实践\n\n## 2016-08-09\n\n1. [how to remove remote origin from git repo](http://stackoverflow.com/questions/16330404/how-to-remove-remote-origin-from-git-repo)\n\n  > `git remote set-url git:your-url;`\n  > 'git remote show origin'","source":"_posts/readList-201608.md","raw":"---\ntitle: readList 201608\ndate: 2016-08-08 14:59:02\ntags: [readList]\ncategories: [ReadList]\n---\n八月份的文章荟萃\n<!-- more -->\n\n\n## 2016-08-08\n\n1. [如何让你的网页打开速度降低到1s内](http://www.jianshu.com/p/d857c3ff78d6)\n2. [大公司里怎样开发和部署前端代码？(附实践方案)](http://www.jianshu.com/p/35e20bb361d0#)\n3. [大公司里怎样开发和部署前端代码？](https://github.com/fouber/blog/issues/6) github相关的讨论值得一看\n4. [高质量Node.js微服务的编写和部署](https://github.com/Carrotzpc/docker_web_app) docker相关的node实践\n\n## 2016-08-09\n\n1. [how to remove remote origin from git repo](http://stackoverflow.com/questions/16330404/how-to-remove-remote-origin-from-git-repo)\n\n  > `git remote set-url git:your-url;`\n  > 'git remote show origin'","slug":"readList-201608","published":1,"updated":"2022-01-20T04:12:09.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo11000n7uo0c0ra8zaq","content":"<p>八月份的文章荟萃</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"2016-08-08\"><a href=\"#2016-08-08\" class=\"headerlink\" title=\"2016-08-08\"></a>2016-08-08</h2><ol>\n<li><a href=\"http://www.jianshu.com/p/d857c3ff78d6\">如何让你的网页打开速度降低到1s内</a></li>\n<li><a href=\"http://www.jianshu.com/p/35e20bb361d0#\">大公司里怎样开发和部署前端代码？(附实践方案)</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码？</a> github相关的讨论值得一看</li>\n<li><a href=\"https://github.com/Carrotzpc/docker_web_app\">高质量Node.js微服务的编写和部署</a> docker相关的node实践</li>\n</ol>\n<h2 id=\"2016-08-09\"><a href=\"#2016-08-09\" class=\"headerlink\" title=\"2016-08-09\"></a>2016-08-09</h2><ol>\n<li><a href=\"http://stackoverflow.com/questions/16330404/how-to-remove-remote-origin-from-git-repo\">how to remove remote origin from git repo</a></li>\n</ol>\n<blockquote>\n<p><code>git remote set-url git:your-url;</code><br>‘git remote show origin’</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>八月份的文章荟萃</p>","more":"<h2 id=\"2016-08-08\"><a href=\"#2016-08-08\" class=\"headerlink\" title=\"2016-08-08\"></a>2016-08-08</h2><ol>\n<li><a href=\"http://www.jianshu.com/p/d857c3ff78d6\">如何让你的网页打开速度降低到1s内</a></li>\n<li><a href=\"http://www.jianshu.com/p/35e20bb361d0#\">大公司里怎样开发和部署前端代码？(附实践方案)</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码？</a> github相关的讨论值得一看</li>\n<li><a href=\"https://github.com/Carrotzpc/docker_web_app\">高质量Node.js微服务的编写和部署</a> docker相关的node实践</li>\n</ol>\n<h2 id=\"2016-08-09\"><a href=\"#2016-08-09\" class=\"headerlink\" title=\"2016-08-09\"></a>2016-08-09</h2><ol>\n<li><a href=\"http://stackoverflow.com/questions/16330404/how-to-remove-remote-origin-from-git-repo\">how to remove remote origin from git repo</a></li>\n</ol>\n<blockquote>\n<p><code>git remote set-url git:your-url;</code><br>‘git remote show origin’</p>\n</blockquote>"},{"title":"readList","date":"2016-05-06T06:39:43.000Z","_content":"\n五月份 工作中遇到问题汇总\n\n<!-- more -->\n\n\n  1. [css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件](http://blog.csdn.net/kongjiea/article/details/38614695)\n\n\n## 2016-05-06 21:14\n\n### 1. [介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color](http://www.css88.com/archives/5393)\n  > `-webkit-touch-callout` 当你触摸并按住触摸目标时候，禁止或显示系统默认菜单\n  >\n  > > `-webkit-tap-highlight-color` 当用户点击iOS的Safari浏览器中的链接或JavaScript的可点击的元素时，覆盖显示的高亮颜色。\n\n\n## 2016-05-09 18:38\n\n  1. [Node.js学习系列总索引](http://www.cnblogs.com/zhongweiv/p/nodejs.html)\n\n## 2016-05-10 20:00:05 \n\n  1. [Gulp实战和原理解析](http://i5ting.github.io/stuq-gulp/) 【未读】\n\n  参考下重写下 generator-kmapp， 以前将就这用，今天更新了下就莫名其妙的报错了！感觉是 task : `wiredep-include` 遍历html文件时候，有的文件没有引人 公用的 bower 文件引人引起的，抽时间解决下！\n\n  2. [如何在全职工作同时做一个自由职业者](http://yizaoyiwan.com/stories/23) 发现个好网站，一早一晚【未读】\n\n  3. [Promise 进阶核心](http://yizaoyiwan.com/stories/23)【未读】\n\n## 2016-05-16 16:11:59\n\n  1. [cooking](http://cookingjs.github.io/intro.html) 【改天试用下】\n    > 一个全局安装的命令行工具\n      一个包含了基本依赖（Babel + webpack + 基本 loader）和预配置的 webpack\n      一个配置和依赖都能通过插件扩展的构建工具\n\n## 2016-05-19 10:47:38\n\n  1. [Javascript Object.keys()用法](http://www.webhek.com/javascript-object-keys) obj.attrs 转换成 array\n\n  2. [互联网服务端技术——如何学（下B）](http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&mid=2650392056&idx=1&sn=0e0cd289b852d41567e475d911763e63&scene=0#wechat_redirect) 很通俗易懂，说明白了某个技术出现的需求原因！\n\n## 2016-05-24 16:57:25\n\n  1. [Win下必备神器之Cmder](https://segmentfault.com/a/1190000004408436)\n  >Chocolatey软件包管理系统 'choco install' 安装软件\n\n## 2016-05-27 13:54:30\n\n  ","source":"_posts/readList.md","raw":"---\ntitle: readList\ndate: 2016-05-06 14:39:43\ntags: [F2E, 前端, 笔记]\ncategories: [ReadList]\n---\n\n五月份 工作中遇到问题汇总\n\n<!-- more -->\n\n\n  1. [css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件](http://blog.csdn.net/kongjiea/article/details/38614695)\n\n\n## 2016-05-06 21:14\n\n### 1. [介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color](http://www.css88.com/archives/5393)\n  > `-webkit-touch-callout` 当你触摸并按住触摸目标时候，禁止或显示系统默认菜单\n  >\n  > > `-webkit-tap-highlight-color` 当用户点击iOS的Safari浏览器中的链接或JavaScript的可点击的元素时，覆盖显示的高亮颜色。\n\n\n## 2016-05-09 18:38\n\n  1. [Node.js学习系列总索引](http://www.cnblogs.com/zhongweiv/p/nodejs.html)\n\n## 2016-05-10 20:00:05 \n\n  1. [Gulp实战和原理解析](http://i5ting.github.io/stuq-gulp/) 【未读】\n\n  参考下重写下 generator-kmapp， 以前将就这用，今天更新了下就莫名其妙的报错了！感觉是 task : `wiredep-include` 遍历html文件时候，有的文件没有引人 公用的 bower 文件引人引起的，抽时间解决下！\n\n  2. [如何在全职工作同时做一个自由职业者](http://yizaoyiwan.com/stories/23) 发现个好网站，一早一晚【未读】\n\n  3. [Promise 进阶核心](http://yizaoyiwan.com/stories/23)【未读】\n\n## 2016-05-16 16:11:59\n\n  1. [cooking](http://cookingjs.github.io/intro.html) 【改天试用下】\n    > 一个全局安装的命令行工具\n      一个包含了基本依赖（Babel + webpack + 基本 loader）和预配置的 webpack\n      一个配置和依赖都能通过插件扩展的构建工具\n\n## 2016-05-19 10:47:38\n\n  1. [Javascript Object.keys()用法](http://www.webhek.com/javascript-object-keys) obj.attrs 转换成 array\n\n  2. [互联网服务端技术——如何学（下B）](http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&mid=2650392056&idx=1&sn=0e0cd289b852d41567e475d911763e63&scene=0#wechat_redirect) 很通俗易懂，说明白了某个技术出现的需求原因！\n\n## 2016-05-24 16:57:25\n\n  1. [Win下必备神器之Cmder](https://segmentfault.com/a/1190000004408436)\n  >Chocolatey软件包管理系统 'choco install' 安装软件\n\n## 2016-05-27 13:54:30\n\n  ","slug":"readList","published":1,"updated":"2022-01-20T04:12:09.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo13000s7uo00ymycd72","content":"<p>五月份 工作中遇到问题汇总</p>\n<span id=\"more\"></span>\n\n\n<ol>\n<li><a href=\"http://blog.csdn.net/kongjiea/article/details/38614695\">css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件</a></li>\n</ol>\n<h2 id=\"2016-05-06-21-14\"><a href=\"#2016-05-06-21-14\" class=\"headerlink\" title=\"2016-05-06 21:14\"></a>2016-05-06 21:14</h2><h3 id=\"1-介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\"><a href=\"#1-介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\" class=\"headerlink\" title=\"1. 介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\"></a>1. <a href=\"http://www.css88.com/archives/5393\">介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color</a></h3><blockquote>\n<p><code>-webkit-touch-callout</code> 当你触摸并按住触摸目标时候，禁止或显示系统默认菜单</p>\n<blockquote>\n<p><code>-webkit-tap-highlight-color</code> 当用户点击iOS的Safari浏览器中的链接或JavaScript的可点击的元素时，覆盖显示的高亮颜色。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"2016-05-09-18-38\"><a href=\"#2016-05-09-18-38\" class=\"headerlink\" title=\"2016-05-09 18:38\"></a>2016-05-09 18:38</h2><ol>\n<li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs.html\">Node.js学习系列总索引</a></li>\n</ol>\n<h2 id=\"2016-05-10-20-00-05\"><a href=\"#2016-05-10-20-00-05\" class=\"headerlink\" title=\"2016-05-10 20:00:05\"></a>2016-05-10 20:00:05</h2><ol>\n<li><a href=\"http://i5ting.github.io/stuq-gulp/\">Gulp实战和原理解析</a> 【未读】</li>\n</ol>\n<p>  参考下重写下 generator-kmapp， 以前将就这用，今天更新了下就莫名其妙的报错了！感觉是 task : <code>wiredep-include</code> 遍历html文件时候，有的文件没有引人 公用的 bower 文件引人引起的，抽时间解决下！</p>\n<ol start=\"2\">\n<li><p><a href=\"http://yizaoyiwan.com/stories/23\">如何在全职工作同时做一个自由职业者</a> 发现个好网站，一早一晚【未读】</p>\n</li>\n<li><p><a href=\"http://yizaoyiwan.com/stories/23\">Promise 进阶核心</a>【未读】</p>\n</li>\n</ol>\n<h2 id=\"2016-05-16-16-11-59\"><a href=\"#2016-05-16-16-11-59\" class=\"headerlink\" title=\"2016-05-16 16:11:59\"></a>2016-05-16 16:11:59</h2><ol>\n<li><a href=\"http://cookingjs.github.io/intro.html\">cooking</a> 【改天试用下】<blockquote>\n<p>一个全局安装的命令行工具<br> 一个包含了基本依赖（Babel + webpack + 基本 loader）和预配置的 webpack<br> 一个配置和依赖都能通过插件扩展的构建工具</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2016-05-19-10-47-38\"><a href=\"#2016-05-19-10-47-38\" class=\"headerlink\" title=\"2016-05-19 10:47:38\"></a>2016-05-19 10:47:38</h2><ol>\n<li><p><a href=\"http://www.webhek.com/javascript-object-keys\">Javascript Object.keys()用法</a> obj.attrs 转换成 array</p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&mid=2650392056&idx=1&sn=0e0cd289b852d41567e475d911763e63&scene=0#wechat_redirect\">互联网服务端技术——如何学（下B）</a> 很通俗易懂，说明白了某个技术出现的需求原因！</p>\n</li>\n</ol>\n<h2 id=\"2016-05-24-16-57-25\"><a href=\"#2016-05-24-16-57-25\" class=\"headerlink\" title=\"2016-05-24 16:57:25\"></a>2016-05-24 16:57:25</h2><ol>\n<li><a href=\"https://segmentfault.com/a/1190000004408436\">Win下必备神器之Cmder</a><blockquote>\n<p>Chocolatey软件包管理系统 ‘choco install’ 安装软件</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2016-05-27-13-54-30\"><a href=\"#2016-05-27-13-54-30\" class=\"headerlink\" title=\"2016-05-27 13:54:30\"></a>2016-05-27 13:54:30</h2>","site":{"data":{}},"excerpt":"<p>五月份 工作中遇到问题汇总</p>","more":"<ol>\n<li><a href=\"http://blog.csdn.net/kongjiea/article/details/38614695\">css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件</a></li>\n</ol>\n<h2 id=\"2016-05-06-21-14\"><a href=\"#2016-05-06-21-14\" class=\"headerlink\" title=\"2016-05-06 21:14\"></a>2016-05-06 21:14</h2><h3 id=\"1-介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\"><a href=\"#1-介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\" class=\"headerlink\" title=\"1. 介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color\"></a>1. <a href=\"http://www.css88.com/archives/5393\">介绍两个移动端使用的WebKit私有属性-webkit-touch-callout和-webkit-tap-highlight-color</a></h3><blockquote>\n<p><code>-webkit-touch-callout</code> 当你触摸并按住触摸目标时候，禁止或显示系统默认菜单</p>\n<blockquote>\n<p><code>-webkit-tap-highlight-color</code> 当用户点击iOS的Safari浏览器中的链接或JavaScript的可点击的元素时，覆盖显示的高亮颜色。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"2016-05-09-18-38\"><a href=\"#2016-05-09-18-38\" class=\"headerlink\" title=\"2016-05-09 18:38\"></a>2016-05-09 18:38</h2><ol>\n<li><a href=\"http://www.cnblogs.com/zhongweiv/p/nodejs.html\">Node.js学习系列总索引</a></li>\n</ol>\n<h2 id=\"2016-05-10-20-00-05\"><a href=\"#2016-05-10-20-00-05\" class=\"headerlink\" title=\"2016-05-10 20:00:05\"></a>2016-05-10 20:00:05</h2><ol>\n<li><a href=\"http://i5ting.github.io/stuq-gulp/\">Gulp实战和原理解析</a> 【未读】</li>\n</ol>\n<p>  参考下重写下 generator-kmapp， 以前将就这用，今天更新了下就莫名其妙的报错了！感觉是 task : <code>wiredep-include</code> 遍历html文件时候，有的文件没有引人 公用的 bower 文件引人引起的，抽时间解决下！</p>\n<ol start=\"2\">\n<li><p><a href=\"http://yizaoyiwan.com/stories/23\">如何在全职工作同时做一个自由职业者</a> 发现个好网站，一早一晚【未读】</p>\n</li>\n<li><p><a href=\"http://yizaoyiwan.com/stories/23\">Promise 进阶核心</a>【未读】</p>\n</li>\n</ol>\n<h2 id=\"2016-05-16-16-11-59\"><a href=\"#2016-05-16-16-11-59\" class=\"headerlink\" title=\"2016-05-16 16:11:59\"></a>2016-05-16 16:11:59</h2><ol>\n<li><a href=\"http://cookingjs.github.io/intro.html\">cooking</a> 【改天试用下】<blockquote>\n<p>一个全局安装的命令行工具<br> 一个包含了基本依赖（Babel + webpack + 基本 loader）和预配置的 webpack<br> 一个配置和依赖都能通过插件扩展的构建工具</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2016-05-19-10-47-38\"><a href=\"#2016-05-19-10-47-38\" class=\"headerlink\" title=\"2016-05-19 10:47:38\"></a>2016-05-19 10:47:38</h2><ol>\n<li><p><a href=\"http://www.webhek.com/javascript-object-keys\">Javascript Object.keys()用法</a> obj.attrs 转换成 array</p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&mid=2650392056&idx=1&sn=0e0cd289b852d41567e475d911763e63&scene=0#wechat_redirect\">互联网服务端技术——如何学（下B）</a> 很通俗易懂，说明白了某个技术出现的需求原因！</p>\n</li>\n</ol>\n<h2 id=\"2016-05-24-16-57-25\"><a href=\"#2016-05-24-16-57-25\" class=\"headerlink\" title=\"2016-05-24 16:57:25\"></a>2016-05-24 16:57:25</h2><ol>\n<li><a href=\"https://segmentfault.com/a/1190000004408436\">Win下必备神器之Cmder</a><blockquote>\n<p>Chocolatey软件包管理系统 ‘choco install’ 安装软件</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2016-05-27-13-54-30\"><a href=\"#2016-05-27-13-54-30\" class=\"headerlink\" title=\"2016-05-27 13:54:30\"></a>2016-05-27 13:54:30</h2>"},{"title":"three.js beginer","date":"2016-04-28T09:34:00.000Z","_content":"three.js 相关的收集资料\n<!-- more -->\n## 2016-04-28 17:36\n\n1. [Three.js入门指南](http://www.ituring.com.cn/minibook/792) 【未读】\n2. [Intro to WebGL with Three.js](https://github.com/davidlyons/frontporch) \n\n  > 有demo 很详尽\n\n3. [http://threejs.org/](http://threejs.org/) 【官网】","source":"_posts/three-js-beginer.md","raw":"---\ntitle: three.js beginer\ndate: 2016-04-28 17:34:00\ntags: [canvas, three.js, webGL]\ncategories: [F2E, three.js]\n---\nthree.js 相关的收集资料\n<!-- more -->\n## 2016-04-28 17:36\n\n1. [Three.js入门指南](http://www.ituring.com.cn/minibook/792) 【未读】\n2. [Intro to WebGL with Three.js](https://github.com/davidlyons/frontporch) \n\n  > 有demo 很详尽\n\n3. [http://threejs.org/](http://threejs.org/) 【官网】","slug":"three-js-beginer","published":1,"updated":"2022-01-20T04:12:09.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo14000u7uo0cfwnd1ea","content":"<p>three.js 相关的收集资料</p>\n<span id=\"more\"></span>\n<h2 id=\"2016-04-28-17-36\"><a href=\"#2016-04-28-17-36\" class=\"headerlink\" title=\"2016-04-28 17:36\"></a>2016-04-28 17:36</h2><ol>\n<li><a href=\"http://www.ituring.com.cn/minibook/792\">Three.js入门指南</a> 【未读】</li>\n<li><a href=\"https://github.com/davidlyons/frontporch\">Intro to WebGL with Three.js</a> </li>\n</ol>\n<blockquote>\n<p>有demo 很详尽</p>\n</blockquote>\n<ol start=\"3\">\n<li><a href=\"http://threejs.org/\">http://threejs.org/</a> 【官网】</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>three.js 相关的收集资料</p>","more":"<h2 id=\"2016-04-28-17-36\"><a href=\"#2016-04-28-17-36\" class=\"headerlink\" title=\"2016-04-28 17:36\"></a>2016-04-28 17:36</h2><ol>\n<li><a href=\"http://www.ituring.com.cn/minibook/792\">Three.js入门指南</a> 【未读】</li>\n<li><a href=\"https://github.com/davidlyons/frontporch\">Intro to WebGL with Three.js</a> </li>\n</ol>\n<blockquote>\n<p>有demo 很详尽</p>\n</blockquote>\n<ol start=\"3\">\n<li><a href=\"http://threejs.org/\">http://threejs.org/</a> 【官网】</li>\n</ol>"},{"title":"web storage api","date":"2016-02-24T02:14:24.000Z","_content":"项目中想加入 webStorage 减小网络开销，提高加载速度，增强用户体验，想系统的看下 web storage方面的文章！\n<!-- more -->\n\n## Web Storage API\n\n### 参考文章\n\n早上在几个前端同事的桌子上翻到的 [HTML5高级程序设计](http://book.douban.com/subject/5402708/) 相关的基础知识看第9章补充的。然后搜索下网络知识：\n\n  1. [HTML5 localStorage本地存储实际应用举例](http://www.zhangxinxu.com/wordpress/2011/09/html5-localstorage%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/)\n\n  2. [localStorage、sessionStorage用法总结](http://adamed.iteye.com/blog/1698740)\n\n    >不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n\n  3. [本博客零散优化点汇总](https://imququ.com/post/summary-of-my-blog-optimization.html)\n\n  4. [使用 SRI 增强 localStorage 代码安全](https://imququ.com/post/enhance-security-for-ls-code.html)\n\n  5. [Web移动端使用localStorage缓存Js和css文件](http://blog.csdn.net/a497785609/article/details/48321405)   _\n_\n 推荐 _\n_\n\n\n  6. [基于 postMessage 和 localStorage 的跨域本地存储方案](http://www.w3ctech.com/topic/284)\n\n  7. [【译】在本地存储中保存图片和文件](http://www.w3ctech.com/topic/767)   _\n_\n 推荐 _\n_\n\n\n  8. [基于 postMessage 和 localStorage 的跨域本地存储方案](http://www.w3ctech.com/topic/284)\n\n  9. [Storing images and files in IndexedDB](https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/)\n\n  10. [Saving images and files in localStorage](https://hacks.mozilla.org/2012/02/saving-images-and-files-in-localstorage/)\n\n\n\n### 实践\n\n  参考 上面的文章 5 对 所有的js 和 css 进行localStorage 缓存，每个缓存文件的链接可以通过v=new Date().getTime() 进行细化的版本控制，需要更新的添加 参数，不需要的不更新\n\n\n#### Next\n\n  1. localStorage 本地存储 的require('js') 模式的调用\n\n##### 20160401 更新\n  1. [“高三”笔记之动态JS、动态样式](http://www.famanoder.com/bokes/56fd271ad20b0ffc34ae5983)\n\n## 关于 application manifest\n\n  1. [manifest 和 application cache](http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html)\n\n  2. [HTML5 离线存储实战之manifest（附缓存整个文件夹的方法）](http://www.jnecw.com/p/490)\n\n  3. [MDN 使用应用缓存](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache) 够详尽！\n\n\n##### 2016-04-18\n\n  1. [手机百度localstorage细粒度缓存介绍](http://js8.in/2015/12/06/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6localstorage%E7%BB%86%E7%B2%92%E5%BA%A6%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D/)\n\n  2. [手机百度前端工程化之路](http://js8.in/2014/05/28/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E8%B7%AF/)\n\n### 疑问\n##### 1. application cache 数据量的大小？\n不像localStorage 多数资料给出明确的大小是 5M, 查询的资料中很少提及 application cache 的大小，目前找到的文章中形成了两张说法：\n\n  1. [应用缓存初级使用指南](http://www.html5rocks.com/zh/tutorials/appcache/beginner/)\n\n     > 网站的缓存数据量不得超过 5 MB。不过，如果您要编写的是针对 Chrome 网上应用店的应用，可使用 unlimitedStorage 取消该限制\n\n  2. [[HTML5]Application Cache使用中需要注意的事项](http://blog.csdn.net/spring21st/article/details/7222390)\n\n     >  Safari桌面浏览器(Mac以及 Windows)没有限制\n        Mobile Safari限制为10MB\n        Chrome限制为5MB\n        Android浏览器对应用程序缓存大小没有限制\n        Firefox桌面版有无限的应用程序缓存大小\n        Opera的应用程序缓存大小可以由用户管理，但有一个默认大小50MB\n\n    各种浏览器的的 数据量的大小是不一样的。查看 html5 [Application cache API 官方的文件](https://www.w3.org/TR/2011/WD-html5-20110405/offline.html#disk-space)，也是支持各个浏览器自己定义的 允许的disk space 大小，甚至允许用户管理。\n\n  _\n_\n 最终的方案 ：通用的application cache disk space 限制在5M _\n_\n\n\n  _\n_\n tip: _\n_\n [chrome://appcache-internals/](chrome://appcache-internals/) 可以查看chorme 中 application cache 的使用大小，亲自证实不止 5M\n\n\n##### 2. 想缓存的文件太多了，手写很麻烦，怎么办呢？\n\n  1. [详解HTML5中的manifest缓存使用](http://www.jb51.net/html5/376884.html) 中使用 [grunt-manifest](https://www.npmjs.com/package/grunt-manifest)自动生成manifest文件。因为我的构建工具使用的是gulp 所以去npmjs 搜索了[gulp-manifest](https://www.npmjs.com/package/gulp-manifest)，感兴趣的看官方文档吧，很详尽！\n\n\n#### 3. js控制 缓存文件的更新\n\n  参考：[应用缓存初级使用指南](http://www.html5rocks.com/zh/tutorials/appcache/beginner/)\n  ``` Javascript\n    // Check if a new cache is available on page load.\n    window.addEventListener('load', function(e) {\n\n      window.applicationCache.addEventListener('updateready', function(e) {\n        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n          // Browser downloaded a new app cache.\n          // Swap it in and reload the page to get the new hotness.\n          window.applicationCache.swapCache();\n          if (confirm('A new version of this site is available. Load it?')) {\n            window.location.reload();\n          }\n        } else {\n          // Manifest didn't changed. Nothing new to server.\n        }\n      }, false);\n\n    }, false);\n\n  ```\n\n\n##### 4. 注意事项\n\n  1. [ HTML5 使用application cache 接口实现离线数据缓存](http://blog.csdn.net/fdipzone/article/details/12718945)\n\n  > 1. 站点离线存储的容量限制是5M\n    2. 如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器继续全部使用老的缓存\n    3. 引用manifest的html必须与manifest文件同源，在同一个域下\n    4. 在manifest中使用的相对路径，相对参照物为manifest文件\n    5. CACHE MANIFEST字符串应在第一行，且必不可少\n    6. 系统会自动缓存引用清单文件的 HTML 文件\n    7. manifest文件中CACHE则与NETWORK，FALLBACK的位置顺序没有关系，如果是隐式声明需要在最前面\n    8. FALLBACK中的资源必须和manifest文件同源\n    9. 当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n    10. 站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问\n    11. 当manifest文件发生改变时，资源请求本身也会触发更新\n\n  2. [manifest 和 application cache](http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html)\n\n  >  1. 备用项如果发生命中,则也会被缓存.\n\n  >  2. 明示项和备用项优先级高于白名单.\n\n  >  3. 白名单使用通配符\"_\n\". 则会进入白名单的open状态. 这种状态下.所有不在相关Cache区域出现的url都默认使用HTTP相关缓存头策略.\n\n  >  4. 白名单使用具体的前缀匹配或更具体的URL,则都属于blocking状态.这种状态下,白名单所匹配的,非Cache区域出现的URL,与open的_\n匹配的结果一致,但是不在白名单中,又不在整个manifest的资源,会block.也就是访问，加载不能.\n\n\n## 阅读列表 [2015.02.22 - 2015.02.28]\n\n#### 1. npm构建工具\n\n  1. [我为何放弃Gulp与Grunt，转投npm scripts 上](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1),\n  2. [我为何放弃Gulp与Grunt，转投npm scripts 中](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part2),\n  3. [我为何放弃Gulp与Grunt，转投npm scripts 下](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3)\n\n  > 使用的gulp 的项目构建工具，有时间可以试下直接npm 构建。webpack 中可以使用npm 管理js 包依赖管理\n\n  微博上的相关讨论： [入口](http://weibo.com/1746173800/Dji2uysKB?type=comment#_rnd1456298199966)\n\n#### 2. WebRTC\n\n  1. [实现WebRTC的几个想法](http://www.infoq.com/cn/articles/webrtc-implementation-ideas)\n","source":"_posts/web-storage-api.md","raw":"---\ntitle: web storage api\ndate: 2016-02-24 10:14:24\ntags: [F2E, sessionStorage, localStorage, web storage api]\ncategories: [F2E]\n---\n项目中想加入 webStorage 减小网络开销，提高加载速度，增强用户体验，想系统的看下 web storage方面的文章！\n<!-- more -->\n\n## Web Storage API\n\n### 参考文章\n\n早上在几个前端同事的桌子上翻到的 [HTML5高级程序设计](http://book.douban.com/subject/5402708/) 相关的基础知识看第9章补充的。然后搜索下网络知识：\n\n  1. [HTML5 localStorage本地存储实际应用举例](http://www.zhangxinxu.com/wordpress/2011/09/html5-localstorage%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/)\n\n  2. [localStorage、sessionStorage用法总结](http://adamed.iteye.com/blog/1698740)\n\n    >不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n\n  3. [本博客零散优化点汇总](https://imququ.com/post/summary-of-my-blog-optimization.html)\n\n  4. [使用 SRI 增强 localStorage 代码安全](https://imququ.com/post/enhance-security-for-ls-code.html)\n\n  5. [Web移动端使用localStorage缓存Js和css文件](http://blog.csdn.net/a497785609/article/details/48321405)   _\n_\n 推荐 _\n_\n\n\n  6. [基于 postMessage 和 localStorage 的跨域本地存储方案](http://www.w3ctech.com/topic/284)\n\n  7. [【译】在本地存储中保存图片和文件](http://www.w3ctech.com/topic/767)   _\n_\n 推荐 _\n_\n\n\n  8. [基于 postMessage 和 localStorage 的跨域本地存储方案](http://www.w3ctech.com/topic/284)\n\n  9. [Storing images and files in IndexedDB](https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/)\n\n  10. [Saving images and files in localStorage](https://hacks.mozilla.org/2012/02/saving-images-and-files-in-localstorage/)\n\n\n\n### 实践\n\n  参考 上面的文章 5 对 所有的js 和 css 进行localStorage 缓存，每个缓存文件的链接可以通过v=new Date().getTime() 进行细化的版本控制，需要更新的添加 参数，不需要的不更新\n\n\n#### Next\n\n  1. localStorage 本地存储 的require('js') 模式的调用\n\n##### 20160401 更新\n  1. [“高三”笔记之动态JS、动态样式](http://www.famanoder.com/bokes/56fd271ad20b0ffc34ae5983)\n\n## 关于 application manifest\n\n  1. [manifest 和 application cache](http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html)\n\n  2. [HTML5 离线存储实战之manifest（附缓存整个文件夹的方法）](http://www.jnecw.com/p/490)\n\n  3. [MDN 使用应用缓存](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache) 够详尽！\n\n\n##### 2016-04-18\n\n  1. [手机百度localstorage细粒度缓存介绍](http://js8.in/2015/12/06/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6localstorage%E7%BB%86%E7%B2%92%E5%BA%A6%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D/)\n\n  2. [手机百度前端工程化之路](http://js8.in/2014/05/28/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E8%B7%AF/)\n\n### 疑问\n##### 1. application cache 数据量的大小？\n不像localStorage 多数资料给出明确的大小是 5M, 查询的资料中很少提及 application cache 的大小，目前找到的文章中形成了两张说法：\n\n  1. [应用缓存初级使用指南](http://www.html5rocks.com/zh/tutorials/appcache/beginner/)\n\n     > 网站的缓存数据量不得超过 5 MB。不过，如果您要编写的是针对 Chrome 网上应用店的应用，可使用 unlimitedStorage 取消该限制\n\n  2. [[HTML5]Application Cache使用中需要注意的事项](http://blog.csdn.net/spring21st/article/details/7222390)\n\n     >  Safari桌面浏览器(Mac以及 Windows)没有限制\n        Mobile Safari限制为10MB\n        Chrome限制为5MB\n        Android浏览器对应用程序缓存大小没有限制\n        Firefox桌面版有无限的应用程序缓存大小\n        Opera的应用程序缓存大小可以由用户管理，但有一个默认大小50MB\n\n    各种浏览器的的 数据量的大小是不一样的。查看 html5 [Application cache API 官方的文件](https://www.w3.org/TR/2011/WD-html5-20110405/offline.html#disk-space)，也是支持各个浏览器自己定义的 允许的disk space 大小，甚至允许用户管理。\n\n  _\n_\n 最终的方案 ：通用的application cache disk space 限制在5M _\n_\n\n\n  _\n_\n tip: _\n_\n [chrome://appcache-internals/](chrome://appcache-internals/) 可以查看chorme 中 application cache 的使用大小，亲自证实不止 5M\n\n\n##### 2. 想缓存的文件太多了，手写很麻烦，怎么办呢？\n\n  1. [详解HTML5中的manifest缓存使用](http://www.jb51.net/html5/376884.html) 中使用 [grunt-manifest](https://www.npmjs.com/package/grunt-manifest)自动生成manifest文件。因为我的构建工具使用的是gulp 所以去npmjs 搜索了[gulp-manifest](https://www.npmjs.com/package/gulp-manifest)，感兴趣的看官方文档吧，很详尽！\n\n\n#### 3. js控制 缓存文件的更新\n\n  参考：[应用缓存初级使用指南](http://www.html5rocks.com/zh/tutorials/appcache/beginner/)\n  ``` Javascript\n    // Check if a new cache is available on page load.\n    window.addEventListener('load', function(e) {\n\n      window.applicationCache.addEventListener('updateready', function(e) {\n        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n          // Browser downloaded a new app cache.\n          // Swap it in and reload the page to get the new hotness.\n          window.applicationCache.swapCache();\n          if (confirm('A new version of this site is available. Load it?')) {\n            window.location.reload();\n          }\n        } else {\n          // Manifest didn't changed. Nothing new to server.\n        }\n      }, false);\n\n    }, false);\n\n  ```\n\n\n##### 4. 注意事项\n\n  1. [ HTML5 使用application cache 接口实现离线数据缓存](http://blog.csdn.net/fdipzone/article/details/12718945)\n\n  > 1. 站点离线存储的容量限制是5M\n    2. 如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器继续全部使用老的缓存\n    3. 引用manifest的html必须与manifest文件同源，在同一个域下\n    4. 在manifest中使用的相对路径，相对参照物为manifest文件\n    5. CACHE MANIFEST字符串应在第一行，且必不可少\n    6. 系统会自动缓存引用清单文件的 HTML 文件\n    7. manifest文件中CACHE则与NETWORK，FALLBACK的位置顺序没有关系，如果是隐式声明需要在最前面\n    8. FALLBACK中的资源必须和manifest文件同源\n    9. 当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n    10. 站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问\n    11. 当manifest文件发生改变时，资源请求本身也会触发更新\n\n  2. [manifest 和 application cache](http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html)\n\n  >  1. 备用项如果发生命中,则也会被缓存.\n\n  >  2. 明示项和备用项优先级高于白名单.\n\n  >  3. 白名单使用通配符\"_\n\". 则会进入白名单的open状态. 这种状态下.所有不在相关Cache区域出现的url都默认使用HTTP相关缓存头策略.\n\n  >  4. 白名单使用具体的前缀匹配或更具体的URL,则都属于blocking状态.这种状态下,白名单所匹配的,非Cache区域出现的URL,与open的_\n匹配的结果一致,但是不在白名单中,又不在整个manifest的资源,会block.也就是访问，加载不能.\n\n\n## 阅读列表 [2015.02.22 - 2015.02.28]\n\n#### 1. npm构建工具\n\n  1. [我为何放弃Gulp与Grunt，转投npm scripts 上](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1),\n  2. [我为何放弃Gulp与Grunt，转投npm scripts 中](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part2),\n  3. [我为何放弃Gulp与Grunt，转投npm scripts 下](http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3)\n\n  > 使用的gulp 的项目构建工具，有时间可以试下直接npm 构建。webpack 中可以使用npm 管理js 包依赖管理\n\n  微博上的相关讨论： [入口](http://weibo.com/1746173800/Dji2uysKB?type=comment#_rnd1456298199966)\n\n#### 2. WebRTC\n\n  1. [实现WebRTC的几个想法](http://www.infoq.com/cn/articles/webrtc-implementation-ideas)\n","slug":"web-storage-api","published":1,"updated":"2022-01-20T04:12:09.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo16000y7uo0b8ubec38","content":"<p>项目中想加入 webStorage 减小网络开销，提高加载速度，增强用户体验，想系统的看下 web storage方面的文章！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Web-Storage-API\"><a href=\"#Web-Storage-API\" class=\"headerlink\" title=\"Web Storage API\"></a>Web Storage API</h2><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>早上在几个前端同事的桌子上翻到的 <a href=\"http://book.douban.com/subject/5402708/\">HTML5高级程序设计</a> 相关的基础知识看第9章补充的。然后搜索下网络知识：</p>\n<ol>\n<li><p><a href=\"http://www.zhangxinxu.com/wordpress/2011/09/html5-localstorage%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/\">HTML5 localStorage本地存储实际应用举例</a></p>\n</li>\n<li><p><a href=\"http://adamed.iteye.com/blog/1698740\">localStorage、sessionStorage用法总结</a></p>\n</li>\n</ol>\n<pre><code>&gt;不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n</code></pre>\n<ol start=\"3\">\n<li><p><a href=\"https://imququ.com/post/summary-of-my-blog-optimization.html\">本博客零散优化点汇总</a></p>\n</li>\n<li><p><a href=\"https://imququ.com/post/enhance-security-for-ls-code.html\">使用 SRI 增强 localStorage 代码安全</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/a497785609/article/details/48321405\">Web移动端使用localStorage缓存Js和css文件</a>   _<br>_<br>推荐 _<br>_</p>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><a href=\"http://www.w3ctech.com/topic/284\">基于 postMessage 和 localStorage 的跨域本地存储方案</a></p>\n</li>\n<li><p><a href=\"http://www.w3ctech.com/topic/767\">【译】在本地存储中保存图片和文件</a>   _<br>_<br>推荐 _<br>_</p>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p><a href=\"http://www.w3ctech.com/topic/284\">基于 postMessage 和 localStorage 的跨域本地存储方案</a></p>\n</li>\n<li><p><a href=\"https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/\">Storing images and files in IndexedDB</a></p>\n</li>\n<li><p><a href=\"https://hacks.mozilla.org/2012/02/saving-images-and-files-in-localstorage/\">Saving images and files in localStorage</a></p>\n</li>\n</ol>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>  参考 上面的文章 5 对 所有的js 和 css 进行localStorage 缓存，每个缓存文件的链接可以通过v=new Date().getTime() 进行细化的版本控制，需要更新的添加 参数，不需要的不更新</p>\n<h4 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h4><ol>\n<li>localStorage 本地存储 的require(‘js’) 模式的调用</li>\n</ol>\n<h5 id=\"20160401-更新\"><a href=\"#20160401-更新\" class=\"headerlink\" title=\"20160401 更新\"></a>20160401 更新</h5><ol>\n<li><a href=\"http://www.famanoder.com/bokes/56fd271ad20b0ffc34ae5983\">“高三”笔记之动态JS、动态样式</a></li>\n</ol>\n<h2 id=\"关于-application-manifest\"><a href=\"#关于-application-manifest\" class=\"headerlink\" title=\"关于 application manifest\"></a>关于 application manifest</h2><ol>\n<li><p><a href=\"http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html\">manifest 和 application cache</a></p>\n</li>\n<li><p><a href=\"http://www.jnecw.com/p/490\">HTML5 离线存储实战之manifest（附缓存整个文件夹的方法）</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\">MDN 使用应用缓存</a> 够详尽！</p>\n</li>\n</ol>\n<h5 id=\"2016-04-18\"><a href=\"#2016-04-18\" class=\"headerlink\" title=\"2016-04-18\"></a>2016-04-18</h5><ol>\n<li><p><a href=\"http://js8.in/2015/12/06/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6localstorage%E7%BB%86%E7%B2%92%E5%BA%A6%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D/\">手机百度localstorage细粒度缓存介绍</a></p>\n</li>\n<li><p><a href=\"http://js8.in/2014/05/28/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E8%B7%AF/\">手机百度前端工程化之路</a></p>\n</li>\n</ol>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><h5 id=\"1-application-cache-数据量的大小？\"><a href=\"#1-application-cache-数据量的大小？\" class=\"headerlink\" title=\"1. application cache 数据量的大小？\"></a>1. application cache 数据量的大小？</h5><p>不像localStorage 多数资料给出明确的大小是 5M, 查询的资料中很少提及 application cache 的大小，目前找到的文章中形成了两张说法：</p>\n<ol>\n<li><p><a href=\"http://www.html5rocks.com/zh/tutorials/appcache/beginner/\">应用缓存初级使用指南</a></p>\n<blockquote>\n<p>网站的缓存数据量不得超过 5 MB。不过，如果您要编写的是针对 Chrome 网上应用店的应用，可使用 unlimitedStorage 取消该限制</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://blog.csdn.net/spring21st/article/details/7222390\">[HTML5]Application Cache使用中需要注意的事项</a></p>\n<blockquote>\n<p> Safari桌面浏览器(Mac以及 Windows)没有限制<br>   Mobile Safari限制为10MB<br>   Chrome限制为5MB<br>   Android浏览器对应用程序缓存大小没有限制<br>   Firefox桌面版有无限的应用程序缓存大小<br>   Opera的应用程序缓存大小可以由用户管理，但有一个默认大小50MB</p>\n</blockquote>\n</li>\n</ol>\n<pre><code>各种浏览器的的 数据量的大小是不一样的。查看 html5 [Application cache API 官方的文件](https://www.w3.org/TR/2011/WD-html5-20110405/offline.html#disk-space)，也是支持各个浏览器自己定义的 允许的disk space 大小，甚至允许用户管理。\n</code></pre>\n<p>  _<br>_<br> 最终的方案 ：通用的application cache disk space 限制在5M _<br>_</p>\n<p>  _<br>_<br> tip: _<br>_<br> <a href=\"chrome://appcache-internals/\">chrome://appcache-internals/</a> 可以查看chorme 中 application cache 的使用大小，亲自证实不止 5M</p>\n<h5 id=\"2-想缓存的文件太多了，手写很麻烦，怎么办呢？\"><a href=\"#2-想缓存的文件太多了，手写很麻烦，怎么办呢？\" class=\"headerlink\" title=\"2. 想缓存的文件太多了，手写很麻烦，怎么办呢？\"></a>2. 想缓存的文件太多了，手写很麻烦，怎么办呢？</h5><ol>\n<li><a href=\"http://www.jb51.net/html5/376884.html\">详解HTML5中的manifest缓存使用</a> 中使用 <a href=\"https://www.npmjs.com/package/grunt-manifest\">grunt-manifest</a>自动生成manifest文件。因为我的构建工具使用的是gulp 所以去npmjs 搜索了<a href=\"https://www.npmjs.com/package/gulp-manifest\">gulp-manifest</a>，感兴趣的看官方文档吧，很详尽！</li>\n</ol>\n<h4 id=\"3-js控制-缓存文件的更新\"><a href=\"#3-js控制-缓存文件的更新\" class=\"headerlink\" title=\"3. js控制 缓存文件的更新\"></a>3. js控制 缓存文件的更新</h4><p>  参考：<a href=\"http://www.html5rocks.com/zh/tutorials/appcache/beginner/\">应用缓存初级使用指南</a><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// Check if a new cache is available on page load.</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;<br><br>  <span class=\"hljs-built_in\">window</span>.applicationCache.addEventListener(<span class=\"hljs-string\">&#x27;updateready&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.applicationCache.status == <span class=\"hljs-built_in\">window</span>.applicationCache.UPDATEREADY) &#123;<br>      <span class=\"hljs-comment\">// Browser downloaded a new app cache.</span><br>      <span class=\"hljs-comment\">// Swap it in and reload the page to get the new hotness.</span><br>      <span class=\"hljs-built_in\">window</span>.applicationCache.swapCache();<br>      <span class=\"hljs-keyword\">if</span> (confirm(<span class=\"hljs-string\">&#x27;A new version of this site is available. Load it?&#x27;</span>)) &#123;<br>        <span class=\"hljs-built_in\">window</span>.location.reload();<br>      &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-comment\">// Manifest didn&#x27;t changed. Nothing new to server.</span><br>    &#125;<br>  &#125;, <span class=\"hljs-literal\">false</span>);<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br><br></code></pre></td></tr></table></figure></p>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h5><ol>\n<li><a href=\"http://blog.csdn.net/fdipzone/article/details/12718945\"> HTML5 使用application cache 接口实现离线数据缓存</a></li>\n</ol>\n<blockquote>\n<ol>\n<li>站点离线存储的容量限制是5M<ol start=\"2\">\n<li>如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器继续全部使用老的缓存</li>\n<li>引用manifest的html必须与manifest文件同源，在同一个域下</li>\n<li>在manifest中使用的相对路径，相对参照物为manifest文件</li>\n<li>CACHE MANIFEST字符串应在第一行，且必不可少</li>\n<li>系统会自动缓存引用清单文件的 HTML 文件</li>\n<li>manifest文件中CACHE则与NETWORK，FALLBACK的位置顺序没有关系，如果是隐式声明需要在最前面</li>\n<li>FALLBACK中的资源必须和manifest文件同源</li>\n<li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li>\n<li>站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问</li>\n<li>当manifest文件发生改变时，资源请求本身也会触发更新</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><a href=\"http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html\">manifest 和 application cache</a></li>\n</ol>\n<blockquote>\n<ol>\n<li>备用项如果发生命中,则也会被缓存.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>明示项和备用项优先级高于白名单.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>白名单使用通配符”_<br>“. 则会进入白名单的open状态. 这种状态下.所有不在相关Cache区域出现的url都默认使用HTTP相关缓存头策略.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>白名单使用具体的前缀匹配或更具体的URL,则都属于blocking状态.这种状态下,白名单所匹配的,非Cache区域出现的URL,与open的_<br>匹配的结果一致,但是不在白名单中,又不在整个manifest的资源,会block.也就是访问，加载不能.</li>\n</ol>\n</blockquote>\n<h2 id=\"阅读列表-2015-02-22-2015-02-28\"><a href=\"#阅读列表-2015-02-22-2015-02-28\" class=\"headerlink\" title=\"阅读列表 [2015.02.22 - 2015.02.28]\"></a>阅读列表 [2015.02.22 - 2015.02.28]</h2><h4 id=\"1-npm构建工具\"><a href=\"#1-npm构建工具\" class=\"headerlink\" title=\"1. npm构建工具\"></a>1. npm构建工具</h4><ol>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1\">我为何放弃Gulp与Grunt，转投npm scripts 上</a>,</li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part2\">我为何放弃Gulp与Grunt，转投npm scripts 中</a>,</li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3\">我为何放弃Gulp与Grunt，转投npm scripts 下</a></li>\n</ol>\n<blockquote>\n<p>使用的gulp 的项目构建工具，有时间可以试下直接npm 构建。webpack 中可以使用npm 管理js 包依赖管理</p>\n</blockquote>\n<p>  微博上的相关讨论： <a href=\"http://weibo.com/1746173800/Dji2uysKB?type=comment#_rnd1456298199966\">入口</a></p>\n<h4 id=\"2-WebRTC\"><a href=\"#2-WebRTC\" class=\"headerlink\" title=\"2. WebRTC\"></a>2. WebRTC</h4><ol>\n<li><a href=\"http://www.infoq.com/cn/articles/webrtc-implementation-ideas\">实现WebRTC的几个想法</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>项目中想加入 webStorage 减小网络开销，提高加载速度，增强用户体验，想系统的看下 web storage方面的文章！</p>","more":"<h2 id=\"Web-Storage-API\"><a href=\"#Web-Storage-API\" class=\"headerlink\" title=\"Web Storage API\"></a>Web Storage API</h2><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>早上在几个前端同事的桌子上翻到的 <a href=\"http://book.douban.com/subject/5402708/\">HTML5高级程序设计</a> 相关的基础知识看第9章补充的。然后搜索下网络知识：</p>\n<ol>\n<li><p><a href=\"http://www.zhangxinxu.com/wordpress/2011/09/html5-localstorage%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/\">HTML5 localStorage本地存储实际应用举例</a></p>\n</li>\n<li><p><a href=\"http://adamed.iteye.com/blog/1698740\">localStorage、sessionStorage用法总结</a></p>\n</li>\n</ol>\n<pre><code>&gt;不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n</code></pre>\n<ol start=\"3\">\n<li><p><a href=\"https://imququ.com/post/summary-of-my-blog-optimization.html\">本博客零散优化点汇总</a></p>\n</li>\n<li><p><a href=\"https://imququ.com/post/enhance-security-for-ls-code.html\">使用 SRI 增强 localStorage 代码安全</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/a497785609/article/details/48321405\">Web移动端使用localStorage缓存Js和css文件</a>   _<br>_<br>推荐 _<br>_</p>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><a href=\"http://www.w3ctech.com/topic/284\">基于 postMessage 和 localStorage 的跨域本地存储方案</a></p>\n</li>\n<li><p><a href=\"http://www.w3ctech.com/topic/767\">【译】在本地存储中保存图片和文件</a>   _<br>_<br>推荐 _<br>_</p>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p><a href=\"http://www.w3ctech.com/topic/284\">基于 postMessage 和 localStorage 的跨域本地存储方案</a></p>\n</li>\n<li><p><a href=\"https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/\">Storing images and files in IndexedDB</a></p>\n</li>\n<li><p><a href=\"https://hacks.mozilla.org/2012/02/saving-images-and-files-in-localstorage/\">Saving images and files in localStorage</a></p>\n</li>\n</ol>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>  参考 上面的文章 5 对 所有的js 和 css 进行localStorage 缓存，每个缓存文件的链接可以通过v=new Date().getTime() 进行细化的版本控制，需要更新的添加 参数，不需要的不更新</p>\n<h4 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h4><ol>\n<li>localStorage 本地存储 的require(‘js’) 模式的调用</li>\n</ol>\n<h5 id=\"20160401-更新\"><a href=\"#20160401-更新\" class=\"headerlink\" title=\"20160401 更新\"></a>20160401 更新</h5><ol>\n<li><a href=\"http://www.famanoder.com/bokes/56fd271ad20b0ffc34ae5983\">“高三”笔记之动态JS、动态样式</a></li>\n</ol>\n<h2 id=\"关于-application-manifest\"><a href=\"#关于-application-manifest\" class=\"headerlink\" title=\"关于 application manifest\"></a>关于 application manifest</h2><ol>\n<li><p><a href=\"http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html\">manifest 和 application cache</a></p>\n</li>\n<li><p><a href=\"http://www.jnecw.com/p/490\">HTML5 离线存储实战之manifest（附缓存整个文件夹的方法）</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\">MDN 使用应用缓存</a> 够详尽！</p>\n</li>\n</ol>\n<h5 id=\"2016-04-18\"><a href=\"#2016-04-18\" class=\"headerlink\" title=\"2016-04-18\"></a>2016-04-18</h5><ol>\n<li><p><a href=\"http://js8.in/2015/12/06/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6localstorage%E7%BB%86%E7%B2%92%E5%BA%A6%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D/\">手机百度localstorage细粒度缓存介绍</a></p>\n</li>\n<li><p><a href=\"http://js8.in/2014/05/28/%E6%89%8B%E6%9C%BA%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E4%B9%8B%E8%B7%AF/\">手机百度前端工程化之路</a></p>\n</li>\n</ol>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><h5 id=\"1-application-cache-数据量的大小？\"><a href=\"#1-application-cache-数据量的大小？\" class=\"headerlink\" title=\"1. application cache 数据量的大小？\"></a>1. application cache 数据量的大小？</h5><p>不像localStorage 多数资料给出明确的大小是 5M, 查询的资料中很少提及 application cache 的大小，目前找到的文章中形成了两张说法：</p>\n<ol>\n<li><p><a href=\"http://www.html5rocks.com/zh/tutorials/appcache/beginner/\">应用缓存初级使用指南</a></p>\n<blockquote>\n<p>网站的缓存数据量不得超过 5 MB。不过，如果您要编写的是针对 Chrome 网上应用店的应用，可使用 unlimitedStorage 取消该限制</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://blog.csdn.net/spring21st/article/details/7222390\">[HTML5]Application Cache使用中需要注意的事项</a></p>\n<blockquote>\n<p> Safari桌面浏览器(Mac以及 Windows)没有限制<br>   Mobile Safari限制为10MB<br>   Chrome限制为5MB<br>   Android浏览器对应用程序缓存大小没有限制<br>   Firefox桌面版有无限的应用程序缓存大小<br>   Opera的应用程序缓存大小可以由用户管理，但有一个默认大小50MB</p>\n</blockquote>\n</li>\n</ol>\n<pre><code>各种浏览器的的 数据量的大小是不一样的。查看 html5 [Application cache API 官方的文件](https://www.w3.org/TR/2011/WD-html5-20110405/offline.html#disk-space)，也是支持各个浏览器自己定义的 允许的disk space 大小，甚至允许用户管理。\n</code></pre>\n<p>  _<br>_<br> 最终的方案 ：通用的application cache disk space 限制在5M _<br>_</p>\n<p>  _<br>_<br> tip: _<br>_<br> <a href=\"chrome://appcache-internals/\">chrome://appcache-internals/</a> 可以查看chorme 中 application cache 的使用大小，亲自证实不止 5M</p>\n<h5 id=\"2-想缓存的文件太多了，手写很麻烦，怎么办呢？\"><a href=\"#2-想缓存的文件太多了，手写很麻烦，怎么办呢？\" class=\"headerlink\" title=\"2. 想缓存的文件太多了，手写很麻烦，怎么办呢？\"></a>2. 想缓存的文件太多了，手写很麻烦，怎么办呢？</h5><ol>\n<li><a href=\"http://www.jb51.net/html5/376884.html\">详解HTML5中的manifest缓存使用</a> 中使用 <a href=\"https://www.npmjs.com/package/grunt-manifest\">grunt-manifest</a>自动生成manifest文件。因为我的构建工具使用的是gulp 所以去npmjs 搜索了<a href=\"https://www.npmjs.com/package/gulp-manifest\">gulp-manifest</a>，感兴趣的看官方文档吧，很详尽！</li>\n</ol>\n<h4 id=\"3-js控制-缓存文件的更新\"><a href=\"#3-js控制-缓存文件的更新\" class=\"headerlink\" title=\"3. js控制 缓存文件的更新\"></a>3. js控制 缓存文件的更新</h4><p>  参考：<a href=\"http://www.html5rocks.com/zh/tutorials/appcache/beginner/\">应用缓存初级使用指南</a><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// Check if a new cache is available on page load.</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;<br><br>  <span class=\"hljs-built_in\">window</span>.applicationCache.addEventListener(<span class=\"hljs-string\">&#x27;updateready&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.applicationCache.status == <span class=\"hljs-built_in\">window</span>.applicationCache.UPDATEREADY) &#123;<br>      <span class=\"hljs-comment\">// Browser downloaded a new app cache.</span><br>      <span class=\"hljs-comment\">// Swap it in and reload the page to get the new hotness.</span><br>      <span class=\"hljs-built_in\">window</span>.applicationCache.swapCache();<br>      <span class=\"hljs-keyword\">if</span> (confirm(<span class=\"hljs-string\">&#x27;A new version of this site is available. Load it?&#x27;</span>)) &#123;<br>        <span class=\"hljs-built_in\">window</span>.location.reload();<br>      &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-comment\">// Manifest didn&#x27;t changed. Nothing new to server.</span><br>    &#125;<br>  &#125;, <span class=\"hljs-literal\">false</span>);<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br><br></code></pre></td></tr></table></figure></p>\n<h5 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h5><ol>\n<li><a href=\"http://blog.csdn.net/fdipzone/article/details/12718945\"> HTML5 使用application cache 接口实现离线数据缓存</a></li>\n</ol>\n<blockquote>\n<ol>\n<li>站点离线存储的容量限制是5M<ol start=\"2\">\n<li>如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器继续全部使用老的缓存</li>\n<li>引用manifest的html必须与manifest文件同源，在同一个域下</li>\n<li>在manifest中使用的相对路径，相对参照物为manifest文件</li>\n<li>CACHE MANIFEST字符串应在第一行，且必不可少</li>\n<li>系统会自动缓存引用清单文件的 HTML 文件</li>\n<li>manifest文件中CACHE则与NETWORK，FALLBACK的位置顺序没有关系，如果是隐式声明需要在最前面</li>\n<li>FALLBACK中的资源必须和manifest文件同源</li>\n<li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li>\n<li>站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问</li>\n<li>当manifest文件发生改变时，资源请求本身也会触发更新</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><a href=\"http://www.cnblogs.com/_franky/archive/2012/11/23/2783947.html\">manifest 和 application cache</a></li>\n</ol>\n<blockquote>\n<ol>\n<li>备用项如果发生命中,则也会被缓存.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>明示项和备用项优先级高于白名单.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>白名单使用通配符”_<br>“. 则会进入白名单的open状态. 这种状态下.所有不在相关Cache区域出现的url都默认使用HTTP相关缓存头策略.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>白名单使用具体的前缀匹配或更具体的URL,则都属于blocking状态.这种状态下,白名单所匹配的,非Cache区域出现的URL,与open的_<br>匹配的结果一致,但是不在白名单中,又不在整个manifest的资源,会block.也就是访问，加载不能.</li>\n</ol>\n</blockquote>\n<h2 id=\"阅读列表-2015-02-22-2015-02-28\"><a href=\"#阅读列表-2015-02-22-2015-02-28\" class=\"headerlink\" title=\"阅读列表 [2015.02.22 - 2015.02.28]\"></a>阅读列表 [2015.02.22 - 2015.02.28]</h2><h4 id=\"1-npm构建工具\"><a href=\"#1-npm构建工具\" class=\"headerlink\" title=\"1. npm构建工具\"></a>1. npm构建工具</h4><ol>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1\">我为何放弃Gulp与Grunt，转投npm scripts 上</a>,</li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part2\">我为何放弃Gulp与Grunt，转投npm scripts 中</a>,</li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3\">我为何放弃Gulp与Grunt，转投npm scripts 下</a></li>\n</ol>\n<blockquote>\n<p>使用的gulp 的项目构建工具，有时间可以试下直接npm 构建。webpack 中可以使用npm 管理js 包依赖管理</p>\n</blockquote>\n<p>  微博上的相关讨论： <a href=\"http://weibo.com/1746173800/Dji2uysKB?type=comment#_rnd1456298199966\">入口</a></p>\n<h4 id=\"2-WebRTC\"><a href=\"#2-WebRTC\" class=\"headerlink\" title=\"2. WebRTC\"></a>2. WebRTC</h4><ol>\n<li><a href=\"http://www.infoq.com/cn/articles/webrtc-implementation-ideas\">实现WebRTC的几个想法</a></li>\n</ol>"},{"title":"webuploader","date":"2016-03-25T10:57:27.000Z","_content":"很早就听说[webuploader](http://fex.baidu.com/webuploader/)上传插件了，当时看到演示，感觉很惊艳，这次遇到的项目有上传图片的核心需求，就建议后端配合用下，比较Demo里的后端实现是通过PHP实现的，前端折腾下体验效果\n<!-- more -->\n\n# Dove Wedding 使用中遇到的问题\n\n1. 请柬 webuploader 中多次选取图片bug，第一二次可以，第三次无法选取，同一文件不无法重复选择\n\n  > duplicate {Boolean} [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.\n\n  默认情况下是选取相同文件的时候不会触发 'fileQueued' 事件 只有设置 '为非零' 时候才会触发 'fileQueued' 一直以为要设置为 'true' or 'false', 很坑的参数！翻了好久的 [issues](https://github.com/fex-team/webuploader/issues/71)\n\n  _\n_\n 上面解决了无法选取同一文件的问题 _\n_\n\n","source":"_posts/webuploader.md","raw":"---\ntitle: webuploader\ndate: 2016-03-25 18:57:27\ntags: [webuploader, F2E, upload]\ncategories: [F2E]\n---\n很早就听说[webuploader](http://fex.baidu.com/webuploader/)上传插件了，当时看到演示，感觉很惊艳，这次遇到的项目有上传图片的核心需求，就建议后端配合用下，比较Demo里的后端实现是通过PHP实现的，前端折腾下体验效果\n<!-- more -->\n\n# Dove Wedding 使用中遇到的问题\n\n1. 请柬 webuploader 中多次选取图片bug，第一二次可以，第三次无法选取，同一文件不无法重复选择\n\n  > duplicate {Boolean} [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.\n\n  默认情况下是选取相同文件的时候不会触发 'fileQueued' 事件 只有设置 '为非零' 时候才会触发 'fileQueued' 一直以为要设置为 'true' or 'false', 很坑的参数！翻了好久的 [issues](https://github.com/fex-team/webuploader/issues/71)\n\n  _\n_\n 上面解决了无法选取同一文件的问题 _\n_\n\n","slug":"webuploader","published":1,"updated":"2022-01-20T04:12:09.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo17000z7uo08x6r5naw","content":"<p>很早就听说<a href=\"http://fex.baidu.com/webuploader/\">webuploader</a>上传插件了，当时看到演示，感觉很惊艳，这次遇到的项目有上传图片的核心需求，就建议后端配合用下，比较Demo里的后端实现是通过PHP实现的，前端折腾下体验效果</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Dove-Wedding-使用中遇到的问题\"><a href=\"#Dove-Wedding-使用中遇到的问题\" class=\"headerlink\" title=\"Dove Wedding 使用中遇到的问题\"></a>Dove Wedding 使用中遇到的问题</h1><ol>\n<li>请柬 webuploader 中多次选取图片bug，第一二次可以，第三次无法选取，同一文件不无法重复选择</li>\n</ol>\n<blockquote>\n<p>duplicate {Boolean} [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</p>\n</blockquote>\n<p>  默认情况下是选取相同文件的时候不会触发 ‘fileQueued’ 事件 只有设置 ‘为非零’ 时候才会触发 ‘fileQueued’ 一直以为要设置为 ‘true’ or ‘false’, 很坑的参数！翻了好久的 <a href=\"https://github.com/fex-team/webuploader/issues/71\">issues</a></p>\n<p>  _<br>_<br> 上面解决了无法选取同一文件的问题 _<br>_</p>\n","site":{"data":{}},"excerpt":"<p>很早就听说<a href=\"http://fex.baidu.com/webuploader/\">webuploader</a>上传插件了，当时看到演示，感觉很惊艳，这次遇到的项目有上传图片的核心需求，就建议后端配合用下，比较Demo里的后端实现是通过PHP实现的，前端折腾下体验效果</p>","more":"<h1 id=\"Dove-Wedding-使用中遇到的问题\"><a href=\"#Dove-Wedding-使用中遇到的问题\" class=\"headerlink\" title=\"Dove Wedding 使用中遇到的问题\"></a>Dove Wedding 使用中遇到的问题</h1><ol>\n<li>请柬 webuploader 中多次选取图片bug，第一二次可以，第三次无法选取，同一文件不无法重复选择</li>\n</ol>\n<blockquote>\n<p>duplicate {Boolean} [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</p>\n</blockquote>\n<p>  默认情况下是选取相同文件的时候不会触发 ‘fileQueued’ 事件 只有设置 ‘为非零’ 时候才会触发 ‘fileQueued’ 一直以为要设置为 ‘true’ or ‘false’, 很坑的参数！翻了好久的 <a href=\"https://github.com/fex-team/webuploader/issues/71\">issues</a></p>\n<p>  _<br>_<br> 上面解决了无法选取同一文件的问题 _<br>_</p>"},{"title":"小程序","date":"2017-01-10T10:01:48.000Z","_content":"\n昨天小程序正式上线了，上俩月来了各种折腾 react 相关的项目，现在有时间来看看了！\n\n<!-- more -->\n\n## 2017-01-10\n\n开始的工作资料看吧，微信出品被各种热捧，没正式发布前就各种小程序的资料了，不过还是要看各种官方资料啊\n\n### 官方资料列表\n\n1. [张小龙:小程序将于 1 月 9 日上线](http://daxue.qq.com/content/content/id/3109)\n\n   > 大神对小程序的理念的解读，能更好的列举小程序的应用场景！\n\n2. **官方教程** [简易教程 · 小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715)\n\n3. [微信小程序开发教程手册文档](http://www.w3cschool.cn/weixinapp/9wou1q8j.html)\n\n## 2017-01-11\n\n### 开发工具 （工欲善其事必先利其器吗！）\n\n1. [开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715)\n\n> **官方**\n\n2. [微信小程序 web 端实时运行工具](https://chemzqm.github.io/wept/)\n\n> 支持热更新，可以生成二维码到手机上预览，作者的本意是：`因为 WEPT 只是调试 UI 用的，而不是组件库` 做 UI 的调试工作\n\n3. [用 vscode 开发微信小程序](https://segmentfault.com/a/1190000007132719)\n\n> 还不成熟吧，支持代码提示，预览功能 [vscode-wechat](https://marketplace.visualstudio.com/items?itemName=qinjia.vscode-wechat), 希望以后能有更多功能！\n\n## 2017-01-13\n\n### 开发工具\n\n1. [微信小程序模块化开发框架](https://github.com/maichong/labrador)\n\n> 对复杂项目的支持 ES7\n\n## 2017-02-27\n\n1. [微信小程序快速开发，两周内从创意到上线](http://www.jianshu.com/p/e7fd6ae1429b) (5 好评)\n","source":"_posts/小程序.md","raw":"---\ntitle: 小程序\ndate: 2017-01-10 18:01:48\ntags: [f2e, F2E, 小程序]\ncategories: [F2E]\n---\n\n昨天小程序正式上线了，上俩月来了各种折腾 react 相关的项目，现在有时间来看看了！\n\n<!-- more -->\n\n## 2017-01-10\n\n开始的工作资料看吧，微信出品被各种热捧，没正式发布前就各种小程序的资料了，不过还是要看各种官方资料啊\n\n### 官方资料列表\n\n1. [张小龙:小程序将于 1 月 9 日上线](http://daxue.qq.com/content/content/id/3109)\n\n   > 大神对小程序的理念的解读，能更好的列举小程序的应用场景！\n\n2. **官方教程** [简易教程 · 小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715)\n\n3. [微信小程序开发教程手册文档](http://www.w3cschool.cn/weixinapp/9wou1q8j.html)\n\n## 2017-01-11\n\n### 开发工具 （工欲善其事必先利其器吗！）\n\n1. [开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715)\n\n> **官方**\n\n2. [微信小程序 web 端实时运行工具](https://chemzqm.github.io/wept/)\n\n> 支持热更新，可以生成二维码到手机上预览，作者的本意是：`因为 WEPT 只是调试 UI 用的，而不是组件库` 做 UI 的调试工作\n\n3. [用 vscode 开发微信小程序](https://segmentfault.com/a/1190000007132719)\n\n> 还不成熟吧，支持代码提示，预览功能 [vscode-wechat](https://marketplace.visualstudio.com/items?itemName=qinjia.vscode-wechat), 希望以后能有更多功能！\n\n## 2017-01-13\n\n### 开发工具\n\n1. [微信小程序模块化开发框架](https://github.com/maichong/labrador)\n\n> 对复杂项目的支持 ES7\n\n## 2017-02-27\n\n1. [微信小程序快速开发，两周内从创意到上线](http://www.jianshu.com/p/e7fd6ae1429b) (5 好评)\n","slug":"小程序","published":1,"updated":"2022-01-20T04:12:09.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo1900127uo0ax9ybu8n","content":"<p>昨天小程序正式上线了，上俩月来了各种折腾 react 相关的项目，现在有时间来看看了！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2017-01-10\"><a href=\"#2017-01-10\" class=\"headerlink\" title=\"2017-01-10\"></a>2017-01-10</h2><p>开始的工作资料看吧，微信出品被各种热捧，没正式发布前就各种小程序的资料了，不过还是要看各种官方资料啊</p>\n<h3 id=\"官方资料列表\"><a href=\"#官方资料列表\" class=\"headerlink\" title=\"官方资料列表\"></a>官方资料列表</h3><ol>\n<li><p><a href=\"http://daxue.qq.com/content/content/id/3109\">张小龙:小程序将于 1 月 9 日上线</a></p>\n<blockquote>\n<p>大神对小程序的理念的解读，能更好的列举小程序的应用场景！</p>\n</blockquote>\n</li>\n<li><p><strong>官方教程</strong> <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715\">简易教程 · 小程序</a></p>\n</li>\n<li><p><a href=\"http://www.w3cschool.cn/weixinapp/9wou1q8j.html\">微信小程序开发教程手册文档</a></p>\n</li>\n</ol>\n<h2 id=\"2017-01-11\"><a href=\"#2017-01-11\" class=\"headerlink\" title=\"2017-01-11\"></a>2017-01-11</h2><h3 id=\"开发工具-（工欲善其事必先利其器吗！）\"><a href=\"#开发工具-（工欲善其事必先利其器吗！）\" class=\"headerlink\" title=\"开发工具 （工欲善其事必先利其器吗！）\"></a>开发工具 （工欲善其事必先利其器吗！）</h3><ol>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715\">开发者工具</a></li>\n</ol>\n<blockquote>\n<p><strong>官方</strong></p>\n</blockquote>\n<ol start=\"2\">\n<li><a href=\"https://chemzqm.github.io/wept/\">微信小程序 web 端实时运行工具</a></li>\n</ol>\n<blockquote>\n<p>支持热更新，可以生成二维码到手机上预览，作者的本意是：<code>因为 WEPT 只是调试 UI 用的，而不是组件库</code> 做 UI 的调试工作</p>\n</blockquote>\n<ol start=\"3\">\n<li><a href=\"https://segmentfault.com/a/1190000007132719\">用 vscode 开发微信小程序</a></li>\n</ol>\n<blockquote>\n<p>还不成熟吧，支持代码提示，预览功能 <a href=\"https://marketplace.visualstudio.com/items?itemName=qinjia.vscode-wechat\">vscode-wechat</a>, 希望以后能有更多功能！</p>\n</blockquote>\n<h2 id=\"2017-01-13\"><a href=\"#2017-01-13\" class=\"headerlink\" title=\"2017-01-13\"></a>2017-01-13</h2><h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><ol>\n<li><a href=\"https://github.com/maichong/labrador\">微信小程序模块化开发框架</a></li>\n</ol>\n<blockquote>\n<p>对复杂项目的支持 ES7</p>\n</blockquote>\n<h2 id=\"2017-02-27\"><a href=\"#2017-02-27\" class=\"headerlink\" title=\"2017-02-27\"></a>2017-02-27</h2><ol>\n<li><a href=\"http://www.jianshu.com/p/e7fd6ae1429b\">微信小程序快速开发，两周内从创意到上线</a> (5 好评)</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>昨天小程序正式上线了，上俩月来了各种折腾 react 相关的项目，现在有时间来看看了！</p>","more":"<h2 id=\"2017-01-10\"><a href=\"#2017-01-10\" class=\"headerlink\" title=\"2017-01-10\"></a>2017-01-10</h2><p>开始的工作资料看吧，微信出品被各种热捧，没正式发布前就各种小程序的资料了，不过还是要看各种官方资料啊</p>\n<h3 id=\"官方资料列表\"><a href=\"#官方资料列表\" class=\"headerlink\" title=\"官方资料列表\"></a>官方资料列表</h3><ol>\n<li><p><a href=\"http://daxue.qq.com/content/content/id/3109\">张小龙:小程序将于 1 月 9 日上线</a></p>\n<blockquote>\n<p>大神对小程序的理念的解读，能更好的列举小程序的应用场景！</p>\n</blockquote>\n</li>\n<li><p><strong>官方教程</strong> <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715\">简易教程 · 小程序</a></p>\n</li>\n<li><p><a href=\"http://www.w3cschool.cn/weixinapp/9wou1q8j.html\">微信小程序开发教程手册文档</a></p>\n</li>\n</ol>\n<h2 id=\"2017-01-11\"><a href=\"#2017-01-11\" class=\"headerlink\" title=\"2017-01-11\"></a>2017-01-11</h2><h3 id=\"开发工具-（工欲善其事必先利其器吗！）\"><a href=\"#开发工具-（工欲善其事必先利其器吗！）\" class=\"headerlink\" title=\"开发工具 （工欲善其事必先利其器吗！）\"></a>开发工具 （工欲善其事必先利其器吗！）</h3><ol>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715\">开发者工具</a></li>\n</ol>\n<blockquote>\n<p><strong>官方</strong></p>\n</blockquote>\n<ol start=\"2\">\n<li><a href=\"https://chemzqm.github.io/wept/\">微信小程序 web 端实时运行工具</a></li>\n</ol>\n<blockquote>\n<p>支持热更新，可以生成二维码到手机上预览，作者的本意是：<code>因为 WEPT 只是调试 UI 用的，而不是组件库</code> 做 UI 的调试工作</p>\n</blockquote>\n<ol start=\"3\">\n<li><a href=\"https://segmentfault.com/a/1190000007132719\">用 vscode 开发微信小程序</a></li>\n</ol>\n<blockquote>\n<p>还不成熟吧，支持代码提示，预览功能 <a href=\"https://marketplace.visualstudio.com/items?itemName=qinjia.vscode-wechat\">vscode-wechat</a>, 希望以后能有更多功能！</p>\n</blockquote>\n<h2 id=\"2017-01-13\"><a href=\"#2017-01-13\" class=\"headerlink\" title=\"2017-01-13\"></a>2017-01-13</h2><h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><ol>\n<li><a href=\"https://github.com/maichong/labrador\">微信小程序模块化开发框架</a></li>\n</ol>\n<blockquote>\n<p>对复杂项目的支持 ES7</p>\n</blockquote>\n<h2 id=\"2017-02-27\"><a href=\"#2017-02-27\" class=\"headerlink\" title=\"2017-02-27\"></a>2017-02-27</h2><ol>\n<li><a href=\"http://www.jianshu.com/p/e7fd6ae1429b\">微信小程序快速开发，两周内从创意到上线</a> (5 好评)</li>\n</ol>"},{"title":"移动端Web上传图片","date":"2016-04-06T10:04:42.000Z","_content":"最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 [Cropper](http://fengyuanchen.github.io/cropper/) 还可以，看来有些交互要自己思考设计！\n<!-- more -->\n### 2016-04-14 【文件格式的转换，Base64 & Blob & File】\n\n1. [javascript将base64编码的图片数据转换为file并提交](http://www.blogjava.net/jidebingfeng/articles/406171.html)\n  > 测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：\n  ```javascript\n    convertBase64UrlToBlob: function (urlData, type){\n        contentType = type || '';\n        var bytes=window.atob(urlData.split(',')[1]);        //去掉url的头，并转换为byte\n        //处理异常,将ascii码小于0的转换为大于0\n        var ab = new ArrayBuffer(bytes.length);\n        var ia = new Uint8Array(ab);\n        for (var i = 0; i < bytes.length; i++) {\n            ia[i] = bytes.charCodeAt(i);\n        }\n\n        return new Blob( [ab] , {type : contentType});\n    }\n  ```\n2. [Creating a Blob from a base64 string in JavaScript](http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript)\n  ``` javascript\n    function b64toBlob(b64Data, contentType, sliceSize) {\n      contentType = contentType || '';\n      sliceSize = sliceSize || 512;\n\n      var byteCharacters = atob(b64Data);\n      var byteArrays = [];\n\n      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        var byteNumbers = new Array(slice.length);\n        for (var i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n\n        byteArrays.push(byteArray);\n      }\n\n      var blob = new Blob(byteArrays, {type: contentType});\n      return blob;\n    }\n  ```\n  > 结合第一段代码可以发现，window.atob(b64Data.split(',')[1]), 要去掉url的头，而且代码看起来更健壮！\n\n### 2016-04-20 20:17 ###\n\n#### 修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\n\n  1. [Higher DPI graphics with HTML5 canvas](http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas)\n  2. [HTMLCanvasElement.toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n  3. [High DPI Canvas](http://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n\n### 2016-06-02 14:05:01\n\n  1. [移动端图片上传的实践](http://qiutc.me/post/uploading-image-file-in-mobile-fe.html) 总结的挺详细的\n\n\n## 参考链接\n1. [移动端Web上传图片实践](https://github.com/xiangpaopao/blog/issues/7)\n2. [Canvas实例教程：图像移动、大小调整和裁剪](http://blog.csdn.net/iefreer/article/details/40740465)\n\n## 参考库\n\n1. [canvasResize](https://github.com/gokercebeci/canvasResize)\n2. [cropperjs](https://github.com/fengyuanchen/cropperjs)\n\n    > without jQuery, 很强大的，API很清楚\n\n\n","source":"_posts/移动端Web上传图片.md","raw":"---\ntitle: 移动端Web上传图片\ndate: 2016-04-06 18:04:42\ntags:\ncategories: [F2E]\n---\n最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 [Cropper](http://fengyuanchen.github.io/cropper/) 还可以，看来有些交互要自己思考设计！\n<!-- more -->\n### 2016-04-14 【文件格式的转换，Base64 & Blob & File】\n\n1. [javascript将base64编码的图片数据转换为file并提交](http://www.blogjava.net/jidebingfeng/articles/406171.html)\n  > 测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：\n  ```javascript\n    convertBase64UrlToBlob: function (urlData, type){\n        contentType = type || '';\n        var bytes=window.atob(urlData.split(',')[1]);        //去掉url的头，并转换为byte\n        //处理异常,将ascii码小于0的转换为大于0\n        var ab = new ArrayBuffer(bytes.length);\n        var ia = new Uint8Array(ab);\n        for (var i = 0; i < bytes.length; i++) {\n            ia[i] = bytes.charCodeAt(i);\n        }\n\n        return new Blob( [ab] , {type : contentType});\n    }\n  ```\n2. [Creating a Blob from a base64 string in JavaScript](http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript)\n  ``` javascript\n    function b64toBlob(b64Data, contentType, sliceSize) {\n      contentType = contentType || '';\n      sliceSize = sliceSize || 512;\n\n      var byteCharacters = atob(b64Data);\n      var byteArrays = [];\n\n      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        var byteNumbers = new Array(slice.length);\n        for (var i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n\n        byteArrays.push(byteArray);\n      }\n\n      var blob = new Blob(byteArrays, {type: contentType});\n      return blob;\n    }\n  ```\n  > 结合第一段代码可以发现，window.atob(b64Data.split(',')[1]), 要去掉url的头，而且代码看起来更健壮！\n\n### 2016-04-20 20:17 ###\n\n#### 修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\n\n  1. [Higher DPI graphics with HTML5 canvas](http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas)\n  2. [HTMLCanvasElement.toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n  3. [High DPI Canvas](http://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n\n### 2016-06-02 14:05:01\n\n  1. [移动端图片上传的实践](http://qiutc.me/post/uploading-image-file-in-mobile-fe.html) 总结的挺详细的\n\n\n## 参考链接\n1. [移动端Web上传图片实践](https://github.com/xiangpaopao/blog/issues/7)\n2. [Canvas实例教程：图像移动、大小调整和裁剪](http://blog.csdn.net/iefreer/article/details/40740465)\n\n## 参考库\n\n1. [canvasResize](https://github.com/gokercebeci/canvasResize)\n2. [cropperjs](https://github.com/fengyuanchen/cropperjs)\n\n    > without jQuery, 很强大的，API很清楚\n\n\n","slug":"移动端Web上传图片","published":1,"updated":"2022-01-20T04:12:09.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo1a00167uo0d7stc4lv","content":"<p>最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 <a href=\"http://fengyuanchen.github.io/cropper/\">Cropper</a> 还可以，看来有些交互要自己思考设计！</p>\n<span id=\"more\"></span>\n<h3 id=\"2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\"><a href=\"#2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\" class=\"headerlink\" title=\"2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】\"></a>2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-20-20-17\"><a href=\"#2016-04-20-20-17\" class=\"headerlink\" title=\"2016-04-20 20:17\"></a>2016-04-20 20:17</h3><h4 id=\"修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\"><a href=\"#修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\" class=\"headerlink\" title=\"修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\"></a>修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi</h4><ol>\n<li><a href=\"http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas\">Higher DPI graphics with HTML5 canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\">HTMLCanvasElement.toDataURL()</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">High DPI Canvas</a></li>\n</ol>\n<h3 id=\"2016-06-02-14-05-01\"><a href=\"#2016-06-02-14-05-01\" class=\"headerlink\" title=\"2016-06-02 14:05:01\"></a>2016-06-02 14:05:01</h3><ol>\n<li><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a> 总结的挺详细的</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/xiangpaopao/blog/issues/7\">移动端Web上传图片实践</a></li>\n<li><a href=\"http://blog.csdn.net/iefreer/article/details/40740465\">Canvas实例教程：图像移动、大小调整和裁剪</a></li>\n</ol>\n<h2 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h2><ol>\n<li><p><a href=\"https://github.com/gokercebeci/canvasResize\">canvasResize</a></p>\n</li>\n<li><p><a href=\"https://github.com/fengyuanchen/cropperjs\">cropperjs</a></p>\n<blockquote>\n<p>without jQuery, 很强大的，API很清楚</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 <a href=\"http://fengyuanchen.github.io/cropper/\">Cropper</a> 还可以，看来有些交互要自己思考设计！</p>","more":"<h3 id=\"2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\"><a href=\"#2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\" class=\"headerlink\" title=\"2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】\"></a>2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-20-20-17\"><a href=\"#2016-04-20-20-17\" class=\"headerlink\" title=\"2016-04-20 20:17\"></a>2016-04-20 20:17</h3><h4 id=\"修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\"><a href=\"#修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\" class=\"headerlink\" title=\"修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\"></a>修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi</h4><ol>\n<li><a href=\"http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas\">Higher DPI graphics with HTML5 canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\">HTMLCanvasElement.toDataURL()</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">High DPI Canvas</a></li>\n</ol>\n<h3 id=\"2016-06-02-14-05-01\"><a href=\"#2016-06-02-14-05-01\" class=\"headerlink\" title=\"2016-06-02 14:05:01\"></a>2016-06-02 14:05:01</h3><ol>\n<li><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a> 总结的挺详细的</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/xiangpaopao/blog/issues/7\">移动端Web上传图片实践</a></li>\n<li><a href=\"http://blog.csdn.net/iefreer/article/details/40740465\">Canvas实例教程：图像移动、大小调整和裁剪</a></li>\n</ol>\n<h2 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h2><ol>\n<li><p><a href=\"https://github.com/gokercebeci/canvasResize\">canvasResize</a></p>\n</li>\n<li><p><a href=\"https://github.com/fengyuanchen/cropperjs\">cropperjs</a></p>\n<blockquote>\n<p>without jQuery, 很强大的，API很清楚</p>\n</blockquote>\n</li>\n</ol>"},{"title":"自定义Yeoman生成器","date":"2016-04-02T23:51:23.000Z","_content":"\n年前整理的一篇文章：[自定义Yeoman生成器 —— JSCON-简时空](http://www.jscon.co/coding/frontend/yeoman_generator.html), 因为原链接的可读性太差，就通过MarkDown语法重新整理了下，根据该文章 构建了自己的yeoman generator ：[generator-kmapp](https://github.com/sumaolin/generator-kmapp), 只是简单的实现了模板复制，安装bower , 和npm 依赖模块的功能，这样实现一键构建业务中的开发环境：本地服务器，自动刷新，less自动编译，接口转发等功能。\n<!-- more -->\n\n\n## 1 Getting Started\n### 1.1、设置Node模块\nYeoman提供了generator-generator方便快速编写自己的生成器。\n> 安装: npm install -g generator-generator\n\n> 运行: yo generator\n\n* 创建一个名为generator-name的文件夹（name为你的生成器名）;【important】\n* 创建package.json文件，这是NodeJS模块的“信息图”，可以手动或者使用命令npm init生成\n\n```  javascript\n    {\n      \"name\": \"generator-name\",\n      \"version\": \"0.1.0\",\n      \"description\": \"\",\n      \"keywords\": [\"yeoman-generator\"],\n      \"dependencies\": {\n        \"yeoman-generator\": \"^0.17.3\"\n      }\n    }\n```\n> name属性必须要有generator-前缀；keywords属性必须包含yeoman-generator，务必确保是最新的，可运行命令npm install --save yeoman-generator完成更新/安装\n\n### 1.2、文件树结构\n\n1. 当调用yo name命令时，默认调用的是app生成器，对于的逻辑放置在app/文件夹下\n2. 当调用yo name:subcommand命令时，必须要有对于的subcommand/文件夹\n\n如果文件结构如下，则该生成器暴露yo name和yo name:router两个命令\n\n``` javascript\n├───package.json\n├───app/\n│   └───index.js\n└───router/\n    └───index.js\n```\n\n如果你不想把所有代码都放在根目录下，Yeoman提供了另外的一种方式：可以放在generators/目录下\n\n``` javascript\n├───package.json\n└───generators/\n    ├───app/\n    │   └───index.js\n    └───router/\n        └───index.js\n```\n\n### 1.3、继承generator\n\n结构写好了，需要开始写实际的逻辑代码。Yeoman提供了基础生成器供你继承，这些基础生成器提供了很多方便的方法供你调用。基本写法：\n\n``` javascript\nvar generators = require('yeoman-generator');\nmodule.exports = generators.Base.extend();\n```\n\n如果你的生成器需要name参数（比如yo name:router foo中的foo），想将它赋给this.name的话：\n\n``` javascript\nvar generators = require('yeoman-generator');\nmodule.exports = generators.NamedBase.extend();\n```\n> 上面两种方式都能用于创建app生成器或者子生成器，Base多用于app生成器，NamedBase多用于需要指定文件名的子生成器\n\n### 1.4、重写构造函数\n有些方法只能在constructor方法中调用，常用于状态控制；可以传入构造函数重写默认的构造函数：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // The name `constructor` is important here\n  constructor: function () {\n    // Calling the super constructor is important so our generator is correctly set up\n    generators.Base.apply(this, arguments);\n\n    // Next, add your custom code\n    this.option('coffee'); // This method adds support for a `--coffee` flag\n  }\n});\n```\n### 1.5、添加方法\n一般给原型添加的方法是按顺序执行的，不过后面我们会看到一些特殊的方法会触发不同的执行顺序：\n``` javascript\nmodule.exports = generators.Base.extend({\n  method1: function () {\n    console.log('method 1 just ran');\n  },\n  method2: function () {\n    console.log('method 2 just ran');\n  }\n});\n```\n### 1.6、运行生成器\n到了这一步，你已经拥有一个可以运行的生成器了。下一步就是检验生成器是否按自己的逻辑运行。由于是在本地开发生成器，在全局npm模块中并不存在，需要手动链接。进入generator-name/文件夹，运行：\n```\nnpm link\n```\n这将自动安装工程依赖包，同时将本地文件链接进全局模块；运行完毕之后，你就可以调用yo name并看到之前定义的console.log信息。\n\n至此，恭喜你完成了简单的生成器！\n\n### 1.7、找到工程根目录\n当运行一个生成器，Yeoman将计算当前的文件目录信息。最为关键的是，Yeoman将.yo-rc.json所在的目录作为工程的根目录，之后Yeoman将当前文件目录跳转到根目录下运行请求的生成器。这个.yo-rc.json文件是由Storage模块创建的，在生成器内部调用this.config.save()方法就会创建它。所以，如果你发现你的生成器不是在你当前工作目录下运行，请确保。yo-rc.json不存在你目录的其他层级中\n\n## 2、运行上下文\n### 2.1、静态方法都是Action\n如果一个函数直接作为生成器的原型（prototype）的属性，则会当做action自动（按顺序）执行。如何声明不会自动执行的辅助函数以及私有函数呢？有三种方法：\n1. 给方法前面添加前缀（例如：_method）\n2. 使用实例函数声明（this.mehtod）\n``` javascript\ngenerators.Base.extend({\n  init: function () {\n    this.helperMethod = function () {\n      console.log('won\\'t be called automatically');\n    };\n  }\n});\n```\n3. 继承自父类生成器\n``` javascript\nvar MyBase = generators.Base.extend({\n  helper: function () {\n    console.log('won\\'t be called automatically');\n  }\n});\n\nmodule.exports = MyBase.extend({\n  exec: function () {\n    this.helper();\n  }\n});\n```\n### 2.2、运行顺序\nYeoman是按照优先级顺序依次执行所定义的方法。当你定义的函数名字是Yeoman定义的优先级函数名时，会自动将该函数列入到所在优先级队列中，否则就会列入到default优先层级队列中。\n\n依次执行的方法名称为：\n1. **initializing** - 你的初始化方法（检测当前目录状态，获取配置等）\n2. **prompting** – 给用户展示选项提示（调用this.prompt()）\n3. **configuring** – 保存用户配置项，同时配置工程（创建.editorconfig文件或者其他metadata文件）\n4. **default**\n5. **writing** – 用于生成和生成器相关的文件（比如routes,controllers等）\n6. **conflicts** – 用于处理冲突异常（内部使用）\n7. **install** – 用于安装相关库 (npm, bower)\n8. **end** – 最后调用，常用于清理、道别等\n\n## 3、UI\nYeoman默认是跑在终端的，但不限于终端。因此记住，不要使用console.log()或者process.stdout.write()向用户反馈信息，应当使用generator.log方法。\n\n### 3.1、提示框\nYeoman中最为主要的UI交互就是提示框，由Inquirer.js组件提供。使用下列方式调用：\n``` javascript\nmodule.exports = generators.Base.extend({\n  prompting: function () {\n    var done = this.async();\n    this.prompt({\n      type    : 'input',\n      name    : 'name',\n      message : 'Your project name',\n      default : this.appname // Default to current folder name\n    }, function (answers) {\n      this.log(answers.name);\n      done();\n    }.bind(this));\n  }\n})\n```\n> 这里我们使用promoting的优先层级 。由于咨询用户是一个异步的过程，会卡住命令逻辑的运行，所以需要调用yo的异步方法：`var cb = this.async();`\n\n### 3.2、记住用户偏好\n当用户运行你的生成器时，很多时候会输入相同的答案；Yeoman扩展了Inquirer.js的API，额外增加了store的属性表示用户可以将之前填写过的答案作为后续的默认答案：\n``` javascript\nthis.prompt({\n  type    : 'input',\n  name    : 'username',\n  message : 'What\\'s your Github username',\n  store   : true\n}, callback);\n```\n> 提供默认答案时，程序会强制用户输入\n\n### 3.3、命令行参数\n可以直接像在命令中传入参数：\n``` bash\nyo webapp my-project\n```\n在这里，my-project作为第一个参数。为了提示系统我们期望用户传入参数，需要调用generator.argument()方法，该方法接受name作为参数，以及额外的限制条件。\n>  该argument方法必须在构造器中调用。这些条件是（key/value型）：\n``` javascript\n  'desc'： //Description for the argument\n  'required'： // Boolean whether it is required\n  'optional'： //Boolean whether it is optional\n  'type'： // String, Number, Array, or Object\n  'defaults'： //Default value for this argument\n  'banner':  //String to show on usage notes (this one is provided by default)\n```\n示例代码：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // note: arguments and options should be defined in the constructor.\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n\n    // This makes `appname` a required argument.\n    this.argument('appname', { type: String, required: true });\n    // And you can then access it later on this way; e.g. CamelCased\n    this.appname = this._.camelize(this.appname);\n  }\n});\n```\n\n### 3.4、选项\n选项看上去像参数，不过它前面多了两短横杠（flags）：\n``` bash\nyo webapp --coffee\n```\n> 使用generator.option()方法获取选项值，该方法也有可选的限制属性（key/value型）：\n``` javascript\n'desc'： // Description for the option\n'type' ：// Either Boolean, String or Number\n'defaults'： // Default value\n'hide'： //Boolean whether to hide from help\n```\n举例：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // note: arguments and options should be defined in the constructor.\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n\n    // This method adds support for a `--coffee` flag\n    this.option('coffee');\n    // And you can then access it later on this way; e.g.\n    this.scriptSuffix = (this.options.coffee ? \".coffee\": \".js\");\n  }\n});\n```\n\n## 4、处理依赖\n在运行生成器时，经常会伴随着npm和bower命令去安装依赖文件，Yeoman已经将这些功能抽离出来方便用户使用\n### 4.1、npm\n使用generator.npmInstall()运行npm安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次\n``` javascript\ngenerators.Base.extend({\n  installingLodash: function() {\n    var done = this.async();\n    this.npmInstall(['lodash'], { 'saveDev': true }, done);\n  }\n}):\n```\n上面的代码等价于命令行：\n``` bash\nnpm install lodash --save-dev\n```\n### 4.2、bower\n使用generator.bowerInstall()运行bower安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次\n``` javascript\ngenerators.Base.extend({\n  end: function () {\n    this.spawnCommand('composer', ['install']);\n  }\n});\n```\n> 记得在end队列中调用spawnCommand命令,否则用户没有耐心等那么久的。\n\n## 5、文件系统\n方便文件流的输入输出，Yeoman使用两种位置环境： **destination context**  和 **template context**\n\n### 5.1、destination contex 目标位置上下文\ndestination context 目标位置上下文，这里的“目标”是指你想架构应用的位置。这个位置要么是当前文件夹，要么就是文件.yo-rc.json所在的父文件夹位置；\n> 该.yo-rc.json文件确保所有的终端用户都以同样的方式方法生成器所在的子文件（夹）\n\n使用`generator.destinationRoot()`获取目标位置上下文；也可以手动传参重新设置，当然没有人愿意那么做的；用`generator.destinationPath('sub/path')`拼接所需要的路径字符串。示例：\n``` javascript\n// Given destination root is ~/projects\ngenerators.Base.extend({\n  paths: function () {\n    this.destinationRoot();\n    // returns '~/projects'\n\n    this.destinationPath('index.js');\n    // returns '~/projects/index.js'\n  }\n});\n```\n### 5.2、template context 模板位置上下文\ntemplate context 模板位置上下文 ：就是你模板文件所在的文件夹位置，这个文件夹基本上是你读取并拷贝文件的地方。默认的template context是`./templates/`，你可以通过`generator.sourceRoot('new/template/path')`指定新的模板文件夹位置；与上面类似，可使用`generator.sourceRoot()`获取模板位置，使用`generator.templatePath('app/index.js')`拼接路径。示例：\n``` javascript\ngenerators.Base.extend({\n  paths: function () {\n    this.sourceRoot();\n    // returns './templates'\n\n    this.templatePath('index.js');\n    // returns '~/templates/index.js'\n  }\n});\n```\n### 5.3、文件操作API\nYeoman把所有的文件方法都放在this.fs中了，它是[mem-fs-editor](https://github.com/sboudrias/mem-fs-editor)的一个示例对象，可自行查看API接口。\n**示例：拷贝模板文件**\n假如。、templates/index.html文件内容为：\n``` vbscript-html\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n</html>\n```\n我们使用copyTpl方法拷贝模板：（更多参看[Lodash template syntax](https://lodash.com/docs#template)）\n``` javascript\ngenerators.Base.extend({\n  writing: function () {\n    this.fs.copyTpl(\n      this.templatePath('index.html'),\n      this.destinationPath('public/index.html'),\n      { title: 'Templating with Yeoman' }\n    );\n  }\n});\n```\n一旦生成器运行完成，我们就会获得public/index.html\n``` bash\nTemplating with Yeoman\n```\n> Yeoman仍保留了旧的文件API，可参看 [API documentation](http://yeoman.github.io/generator/actions.html) 。旧的文件API总是假设文件来自template context，写文件总是在destination context中，所以它们不要求你传入文件路径信息，程序会自动处理\n\n**建议**：尽可能使用新的`fs`API，它的使用起来比较清晰\n\n## 6、储存用户设置\n常常需要存储用户的设置项并在子生成器中使用，比如用户使用什么编程语言（比如使用CoffeeScript？）等这些配置项都存储在.yo-rc.json中（使用 [Yeoman Storage API](http://yeoman.github.io/generator/Storage.html).）,可以通过`generator.config`对象获取API方法。\n\n### 6.1、常用方法\n\n1. `generator.config.save()`\n保存配置项到文件.yo-rc.json文件中（若文件不存在将自动 创建），由于该文件决定工程的根目录，因而一个最佳实践就是：就算什么也没有也应当调用save方法。\n   > 每次设置配置项都会自动调用save方法，因此你可以不用显示调用\n\n2. `generator.config.set(key,val)`\n\n    ``` javascript\n      \"Name\": \"用于存储的键\",\n      \"val\" : \"任何JSON类型的值（String，Number, Array, Object）\"\n    ```\n\n3. `generator.config.get()`\n  根据键获得配置项\n\n4. `generator.config.getAll()`\n  获取可用的所有配置信息；主要返回值不是按引用返回的，所以要更改里面的配置项还是需要调用set方法。\n\n5. `generator.config.delete()`\n  删除某个键值（及其值）\n\n6. `generator.config.defaults()`\n  将对象作为默认的配置信息，采用不覆盖原则\n\n### 6.2、.yo-rc.json 文件结构\n\n该文件可存储多个生成器的信息，每个生成器依据名字划分命名空间防止冲突，这也意味着每个生成器的配置项只能被子生成器读取到，不同生成器间的配置信息不能通过 Yeoman Storage API.访问。（使用命令行参数或者选项在不同构造器间传递参数。\n\n文件样本：\n``` javascript\n{\n  \"generator-backbone\": {\n    \"requirejs\": true,\n    \"coffee\": true\n  },\n  \"generator-gruntfile\": {\n    \"compass\": false\n  }\n}\n```\n\n##  参考文档\n1. [WRITING YOUR OWN YEOMAN GENERATOR](http://yeoman.io/authoring/)\n2. [学习Bower -- 前端开发包管理工具](http://www.html-js.com/article/1732)\n>    原文的2个链接失效了，不放上来了\n\n## 整理文档\n1. [自定义Yeoman生成器 —— JSCON-简时空](http://www.jscon.co/coding/frontend/yeoman_generator.html)","source":"_posts/自定义Yeoman生成器.md","raw":"---\ntitle: 自定义Yeoman生成器\ndate: 2016-04-03 07:51:23\ntags: [f2e, F2E, node, yeoman, kmapp, generator]\ncategories: [node]\n---\n\n年前整理的一篇文章：[自定义Yeoman生成器 —— JSCON-简时空](http://www.jscon.co/coding/frontend/yeoman_generator.html), 因为原链接的可读性太差，就通过MarkDown语法重新整理了下，根据该文章 构建了自己的yeoman generator ：[generator-kmapp](https://github.com/sumaolin/generator-kmapp), 只是简单的实现了模板复制，安装bower , 和npm 依赖模块的功能，这样实现一键构建业务中的开发环境：本地服务器，自动刷新，less自动编译，接口转发等功能。\n<!-- more -->\n\n\n## 1 Getting Started\n### 1.1、设置Node模块\nYeoman提供了generator-generator方便快速编写自己的生成器。\n> 安装: npm install -g generator-generator\n\n> 运行: yo generator\n\n* 创建一个名为generator-name的文件夹（name为你的生成器名）;【important】\n* 创建package.json文件，这是NodeJS模块的“信息图”，可以手动或者使用命令npm init生成\n\n```  javascript\n    {\n      \"name\": \"generator-name\",\n      \"version\": \"0.1.0\",\n      \"description\": \"\",\n      \"keywords\": [\"yeoman-generator\"],\n      \"dependencies\": {\n        \"yeoman-generator\": \"^0.17.3\"\n      }\n    }\n```\n> name属性必须要有generator-前缀；keywords属性必须包含yeoman-generator，务必确保是最新的，可运行命令npm install --save yeoman-generator完成更新/安装\n\n### 1.2、文件树结构\n\n1. 当调用yo name命令时，默认调用的是app生成器，对于的逻辑放置在app/文件夹下\n2. 当调用yo name:subcommand命令时，必须要有对于的subcommand/文件夹\n\n如果文件结构如下，则该生成器暴露yo name和yo name:router两个命令\n\n``` javascript\n├───package.json\n├───app/\n│   └───index.js\n└───router/\n    └───index.js\n```\n\n如果你不想把所有代码都放在根目录下，Yeoman提供了另外的一种方式：可以放在generators/目录下\n\n``` javascript\n├───package.json\n└───generators/\n    ├───app/\n    │   └───index.js\n    └───router/\n        └───index.js\n```\n\n### 1.3、继承generator\n\n结构写好了，需要开始写实际的逻辑代码。Yeoman提供了基础生成器供你继承，这些基础生成器提供了很多方便的方法供你调用。基本写法：\n\n``` javascript\nvar generators = require('yeoman-generator');\nmodule.exports = generators.Base.extend();\n```\n\n如果你的生成器需要name参数（比如yo name:router foo中的foo），想将它赋给this.name的话：\n\n``` javascript\nvar generators = require('yeoman-generator');\nmodule.exports = generators.NamedBase.extend();\n```\n> 上面两种方式都能用于创建app生成器或者子生成器，Base多用于app生成器，NamedBase多用于需要指定文件名的子生成器\n\n### 1.4、重写构造函数\n有些方法只能在constructor方法中调用，常用于状态控制；可以传入构造函数重写默认的构造函数：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // The name `constructor` is important here\n  constructor: function () {\n    // Calling the super constructor is important so our generator is correctly set up\n    generators.Base.apply(this, arguments);\n\n    // Next, add your custom code\n    this.option('coffee'); // This method adds support for a `--coffee` flag\n  }\n});\n```\n### 1.5、添加方法\n一般给原型添加的方法是按顺序执行的，不过后面我们会看到一些特殊的方法会触发不同的执行顺序：\n``` javascript\nmodule.exports = generators.Base.extend({\n  method1: function () {\n    console.log('method 1 just ran');\n  },\n  method2: function () {\n    console.log('method 2 just ran');\n  }\n});\n```\n### 1.6、运行生成器\n到了这一步，你已经拥有一个可以运行的生成器了。下一步就是检验生成器是否按自己的逻辑运行。由于是在本地开发生成器，在全局npm模块中并不存在，需要手动链接。进入generator-name/文件夹，运行：\n```\nnpm link\n```\n这将自动安装工程依赖包，同时将本地文件链接进全局模块；运行完毕之后，你就可以调用yo name并看到之前定义的console.log信息。\n\n至此，恭喜你完成了简单的生成器！\n\n### 1.7、找到工程根目录\n当运行一个生成器，Yeoman将计算当前的文件目录信息。最为关键的是，Yeoman将.yo-rc.json所在的目录作为工程的根目录，之后Yeoman将当前文件目录跳转到根目录下运行请求的生成器。这个.yo-rc.json文件是由Storage模块创建的，在生成器内部调用this.config.save()方法就会创建它。所以，如果你发现你的生成器不是在你当前工作目录下运行，请确保。yo-rc.json不存在你目录的其他层级中\n\n## 2、运行上下文\n### 2.1、静态方法都是Action\n如果一个函数直接作为生成器的原型（prototype）的属性，则会当做action自动（按顺序）执行。如何声明不会自动执行的辅助函数以及私有函数呢？有三种方法：\n1. 给方法前面添加前缀（例如：_method）\n2. 使用实例函数声明（this.mehtod）\n``` javascript\ngenerators.Base.extend({\n  init: function () {\n    this.helperMethod = function () {\n      console.log('won\\'t be called automatically');\n    };\n  }\n});\n```\n3. 继承自父类生成器\n``` javascript\nvar MyBase = generators.Base.extend({\n  helper: function () {\n    console.log('won\\'t be called automatically');\n  }\n});\n\nmodule.exports = MyBase.extend({\n  exec: function () {\n    this.helper();\n  }\n});\n```\n### 2.2、运行顺序\nYeoman是按照优先级顺序依次执行所定义的方法。当你定义的函数名字是Yeoman定义的优先级函数名时，会自动将该函数列入到所在优先级队列中，否则就会列入到default优先层级队列中。\n\n依次执行的方法名称为：\n1. **initializing** - 你的初始化方法（检测当前目录状态，获取配置等）\n2. **prompting** – 给用户展示选项提示（调用this.prompt()）\n3. **configuring** – 保存用户配置项，同时配置工程（创建.editorconfig文件或者其他metadata文件）\n4. **default**\n5. **writing** – 用于生成和生成器相关的文件（比如routes,controllers等）\n6. **conflicts** – 用于处理冲突异常（内部使用）\n7. **install** – 用于安装相关库 (npm, bower)\n8. **end** – 最后调用，常用于清理、道别等\n\n## 3、UI\nYeoman默认是跑在终端的，但不限于终端。因此记住，不要使用console.log()或者process.stdout.write()向用户反馈信息，应当使用generator.log方法。\n\n### 3.1、提示框\nYeoman中最为主要的UI交互就是提示框，由Inquirer.js组件提供。使用下列方式调用：\n``` javascript\nmodule.exports = generators.Base.extend({\n  prompting: function () {\n    var done = this.async();\n    this.prompt({\n      type    : 'input',\n      name    : 'name',\n      message : 'Your project name',\n      default : this.appname // Default to current folder name\n    }, function (answers) {\n      this.log(answers.name);\n      done();\n    }.bind(this));\n  }\n})\n```\n> 这里我们使用promoting的优先层级 。由于咨询用户是一个异步的过程，会卡住命令逻辑的运行，所以需要调用yo的异步方法：`var cb = this.async();`\n\n### 3.2、记住用户偏好\n当用户运行你的生成器时，很多时候会输入相同的答案；Yeoman扩展了Inquirer.js的API，额外增加了store的属性表示用户可以将之前填写过的答案作为后续的默认答案：\n``` javascript\nthis.prompt({\n  type    : 'input',\n  name    : 'username',\n  message : 'What\\'s your Github username',\n  store   : true\n}, callback);\n```\n> 提供默认答案时，程序会强制用户输入\n\n### 3.3、命令行参数\n可以直接像在命令中传入参数：\n``` bash\nyo webapp my-project\n```\n在这里，my-project作为第一个参数。为了提示系统我们期望用户传入参数，需要调用generator.argument()方法，该方法接受name作为参数，以及额外的限制条件。\n>  该argument方法必须在构造器中调用。这些条件是（key/value型）：\n``` javascript\n  'desc'： //Description for the argument\n  'required'： // Boolean whether it is required\n  'optional'： //Boolean whether it is optional\n  'type'： // String, Number, Array, or Object\n  'defaults'： //Default value for this argument\n  'banner':  //String to show on usage notes (this one is provided by default)\n```\n示例代码：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // note: arguments and options should be defined in the constructor.\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n\n    // This makes `appname` a required argument.\n    this.argument('appname', { type: String, required: true });\n    // And you can then access it later on this way; e.g. CamelCased\n    this.appname = this._.camelize(this.appname);\n  }\n});\n```\n\n### 3.4、选项\n选项看上去像参数，不过它前面多了两短横杠（flags）：\n``` bash\nyo webapp --coffee\n```\n> 使用generator.option()方法获取选项值，该方法也有可选的限制属性（key/value型）：\n``` javascript\n'desc'： // Description for the option\n'type' ：// Either Boolean, String or Number\n'defaults'： // Default value\n'hide'： //Boolean whether to hide from help\n```\n举例：\n``` javascript\nmodule.exports = generators.Base.extend({\n  // note: arguments and options should be defined in the constructor.\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n\n    // This method adds support for a `--coffee` flag\n    this.option('coffee');\n    // And you can then access it later on this way; e.g.\n    this.scriptSuffix = (this.options.coffee ? \".coffee\": \".js\");\n  }\n});\n```\n\n## 4、处理依赖\n在运行生成器时，经常会伴随着npm和bower命令去安装依赖文件，Yeoman已经将这些功能抽离出来方便用户使用\n### 4.1、npm\n使用generator.npmInstall()运行npm安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次\n``` javascript\ngenerators.Base.extend({\n  installingLodash: function() {\n    var done = this.async();\n    this.npmInstall(['lodash'], { 'saveDev': true }, done);\n  }\n}):\n```\n上面的代码等价于命令行：\n``` bash\nnpm install lodash --save-dev\n```\n### 4.2、bower\n使用generator.bowerInstall()运行bower安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次\n``` javascript\ngenerators.Base.extend({\n  end: function () {\n    this.spawnCommand('composer', ['install']);\n  }\n});\n```\n> 记得在end队列中调用spawnCommand命令,否则用户没有耐心等那么久的。\n\n## 5、文件系统\n方便文件流的输入输出，Yeoman使用两种位置环境： **destination context**  和 **template context**\n\n### 5.1、destination contex 目标位置上下文\ndestination context 目标位置上下文，这里的“目标”是指你想架构应用的位置。这个位置要么是当前文件夹，要么就是文件.yo-rc.json所在的父文件夹位置；\n> 该.yo-rc.json文件确保所有的终端用户都以同样的方式方法生成器所在的子文件（夹）\n\n使用`generator.destinationRoot()`获取目标位置上下文；也可以手动传参重新设置，当然没有人愿意那么做的；用`generator.destinationPath('sub/path')`拼接所需要的路径字符串。示例：\n``` javascript\n// Given destination root is ~/projects\ngenerators.Base.extend({\n  paths: function () {\n    this.destinationRoot();\n    // returns '~/projects'\n\n    this.destinationPath('index.js');\n    // returns '~/projects/index.js'\n  }\n});\n```\n### 5.2、template context 模板位置上下文\ntemplate context 模板位置上下文 ：就是你模板文件所在的文件夹位置，这个文件夹基本上是你读取并拷贝文件的地方。默认的template context是`./templates/`，你可以通过`generator.sourceRoot('new/template/path')`指定新的模板文件夹位置；与上面类似，可使用`generator.sourceRoot()`获取模板位置，使用`generator.templatePath('app/index.js')`拼接路径。示例：\n``` javascript\ngenerators.Base.extend({\n  paths: function () {\n    this.sourceRoot();\n    // returns './templates'\n\n    this.templatePath('index.js');\n    // returns '~/templates/index.js'\n  }\n});\n```\n### 5.3、文件操作API\nYeoman把所有的文件方法都放在this.fs中了，它是[mem-fs-editor](https://github.com/sboudrias/mem-fs-editor)的一个示例对象，可自行查看API接口。\n**示例：拷贝模板文件**\n假如。、templates/index.html文件内容为：\n``` vbscript-html\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n</html>\n```\n我们使用copyTpl方法拷贝模板：（更多参看[Lodash template syntax](https://lodash.com/docs#template)）\n``` javascript\ngenerators.Base.extend({\n  writing: function () {\n    this.fs.copyTpl(\n      this.templatePath('index.html'),\n      this.destinationPath('public/index.html'),\n      { title: 'Templating with Yeoman' }\n    );\n  }\n});\n```\n一旦生成器运行完成，我们就会获得public/index.html\n``` bash\nTemplating with Yeoman\n```\n> Yeoman仍保留了旧的文件API，可参看 [API documentation](http://yeoman.github.io/generator/actions.html) 。旧的文件API总是假设文件来自template context，写文件总是在destination context中，所以它们不要求你传入文件路径信息，程序会自动处理\n\n**建议**：尽可能使用新的`fs`API，它的使用起来比较清晰\n\n## 6、储存用户设置\n常常需要存储用户的设置项并在子生成器中使用，比如用户使用什么编程语言（比如使用CoffeeScript？）等这些配置项都存储在.yo-rc.json中（使用 [Yeoman Storage API](http://yeoman.github.io/generator/Storage.html).）,可以通过`generator.config`对象获取API方法。\n\n### 6.1、常用方法\n\n1. `generator.config.save()`\n保存配置项到文件.yo-rc.json文件中（若文件不存在将自动 创建），由于该文件决定工程的根目录，因而一个最佳实践就是：就算什么也没有也应当调用save方法。\n   > 每次设置配置项都会自动调用save方法，因此你可以不用显示调用\n\n2. `generator.config.set(key,val)`\n\n    ``` javascript\n      \"Name\": \"用于存储的键\",\n      \"val\" : \"任何JSON类型的值（String，Number, Array, Object）\"\n    ```\n\n3. `generator.config.get()`\n  根据键获得配置项\n\n4. `generator.config.getAll()`\n  获取可用的所有配置信息；主要返回值不是按引用返回的，所以要更改里面的配置项还是需要调用set方法。\n\n5. `generator.config.delete()`\n  删除某个键值（及其值）\n\n6. `generator.config.defaults()`\n  将对象作为默认的配置信息，采用不覆盖原则\n\n### 6.2、.yo-rc.json 文件结构\n\n该文件可存储多个生成器的信息，每个生成器依据名字划分命名空间防止冲突，这也意味着每个生成器的配置项只能被子生成器读取到，不同生成器间的配置信息不能通过 Yeoman Storage API.访问。（使用命令行参数或者选项在不同构造器间传递参数。\n\n文件样本：\n``` javascript\n{\n  \"generator-backbone\": {\n    \"requirejs\": true,\n    \"coffee\": true\n  },\n  \"generator-gruntfile\": {\n    \"compass\": false\n  }\n}\n```\n\n##  参考文档\n1. [WRITING YOUR OWN YEOMAN GENERATOR](http://yeoman.io/authoring/)\n2. [学习Bower -- 前端开发包管理工具](http://www.html-js.com/article/1732)\n>    原文的2个链接失效了，不放上来了\n\n## 整理文档\n1. [自定义Yeoman生成器 —— JSCON-简时空](http://www.jscon.co/coding/frontend/yeoman_generator.html)","slug":"自定义Yeoman生成器","published":1,"updated":"2022-01-20T04:12:09.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckymlwo1c00197uo0cvgzcfgd","content":"<p>年前整理的一篇文章：<a href=\"http://www.jscon.co/coding/frontend/yeoman_generator.html\">自定义Yeoman生成器 —— JSCON-简时空</a>, 因为原链接的可读性太差，就通过MarkDown语法重新整理了下，根据该文章 构建了自己的yeoman generator ：<a href=\"https://github.com/sumaolin/generator-kmapp\">generator-kmapp</a>, 只是简单的实现了模板复制，安装bower , 和npm 依赖模块的功能，这样实现一键构建业务中的开发环境：本地服务器，自动刷新，less自动编译，接口转发等功能。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"1-Getting-Started\"><a href=\"#1-Getting-Started\" class=\"headerlink\" title=\"1 Getting Started\"></a>1 Getting Started</h2><h3 id=\"1-1、设置Node模块\"><a href=\"#1-1、设置Node模块\" class=\"headerlink\" title=\"1.1、设置Node模块\"></a>1.1、设置Node模块</h3><p>Yeoman提供了generator-generator方便快速编写自己的生成器。</p>\n<blockquote>\n<p>安装: npm install -g generator-generator</p>\n</blockquote>\n<blockquote>\n<p>运行: yo generator</p>\n</blockquote>\n<ul>\n<li>创建一个名为generator-name的文件夹（name为你的生成器名）;【important】</li>\n<li>创建package.json文件，这是NodeJS模块的“信息图”，可以手动或者使用命令npm init生成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;generator-name&quot;</span>,<br>  <span class=\"hljs-string\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.1.0&quot;</span>,<br>  <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-string\">&quot;keywords&quot;</span>: [<span class=\"hljs-string\">&quot;yeoman-generator&quot;</span>],<br>  <span class=\"hljs-string\">&quot;dependencies&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;yeoman-generator&quot;</span>: <span class=\"hljs-string\">&quot;^0.17.3&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>name属性必须要有generator-前缀；keywords属性必须包含yeoman-generator，务必确保是最新的，可运行命令npm install –save yeoman-generator完成更新/安装</p>\n</blockquote>\n<h3 id=\"1-2、文件树结构\"><a href=\"#1-2、文件树结构\" class=\"headerlink\" title=\"1.2、文件树结构\"></a>1.2、文件树结构</h3><ol>\n<li>当调用yo name命令时，默认调用的是app生成器，对于的逻辑放置在app/文件夹下</li>\n<li>当调用yo name:subcommand命令时，必须要有对于的subcommand/文件夹</li>\n</ol>\n<p>如果文件结构如下，则该生成器暴露yo name和yo name:router两个命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">├───package.json<br>├───app/<br>│   └───index.js<br>└───router/<br>    └───index.js<br></code></pre></td></tr></table></figure>\n\n<p>如果你不想把所有代码都放在根目录下，Yeoman提供了另外的一种方式：可以放在generators/目录下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">├───package.json<br>└───generators/<br>    ├───app/<br>    │   └───index.js<br>    └───router/<br>        └───index.js<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-3、继承generator\"><a href=\"#1-3、继承generator\" class=\"headerlink\" title=\"1.3、继承generator\"></a>1.3、继承generator</h3><p>结构写好了，需要开始写实际的逻辑代码。Yeoman提供了基础生成器供你继承，这些基础生成器提供了很多方便的方法供你调用。基本写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> generators = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yeoman-generator&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend();<br></code></pre></td></tr></table></figure>\n\n<p>如果你的生成器需要name参数（比如yo name:router foo中的foo），想将它赋给this.name的话：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> generators = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yeoman-generator&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports = generators.NamedBase.extend();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>上面两种方式都能用于创建app生成器或者子生成器，Base多用于app生成器，NamedBase多用于需要指定文件名的子生成器</p>\n</blockquote>\n<h3 id=\"1-4、重写构造函数\"><a href=\"#1-4、重写构造函数\" class=\"headerlink\" title=\"1.4、重写构造函数\"></a>1.4、重写构造函数</h3><p>有些方法只能在constructor方法中调用，常用于状态控制；可以传入构造函数重写默认的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// The name `constructor` is important here</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// Calling the super constructor is important so our generator is correctly set up</span><br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// Next, add your custom code</span><br>    <span class=\"hljs-built_in\">this</span>.option(<span class=\"hljs-string\">&#x27;coffee&#x27;</span>); <span class=\"hljs-comment\">// This method adds support for a `--coffee` flag</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-5、添加方法\"><a href=\"#1-5、添加方法\" class=\"headerlink\" title=\"1.5、添加方法\"></a>1.5、添加方法</h3><p>一般给原型添加的方法是按顺序执行的，不过后面我们会看到一些特殊的方法会触发不同的执行顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">method1</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;method 1 just ran&#x27;</span>);<br>  &#125;,<br>  <span class=\"hljs-attr\">method2</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;method 2 just ran&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-6、运行生成器\"><a href=\"#1-6、运行生成器\" class=\"headerlink\" title=\"1.6、运行生成器\"></a>1.6、运行生成器</h3><p>到了这一步，你已经拥有一个可以运行的生成器了。下一步就是检验生成器是否按自己的逻辑运行。由于是在本地开发生成器，在全局npm模块中并不存在，需要手动链接。进入generator-name/文件夹，运行：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">npm</span> link<br></code></pre></td></tr></table></figure>\n<p>这将自动安装工程依赖包，同时将本地文件链接进全局模块；运行完毕之后，你就可以调用yo name并看到之前定义的console.log信息。</p>\n<p>至此，恭喜你完成了简单的生成器！</p>\n<h3 id=\"1-7、找到工程根目录\"><a href=\"#1-7、找到工程根目录\" class=\"headerlink\" title=\"1.7、找到工程根目录\"></a>1.7、找到工程根目录</h3><p>当运行一个生成器，Yeoman将计算当前的文件目录信息。最为关键的是，Yeoman将.yo-rc.json所在的目录作为工程的根目录，之后Yeoman将当前文件目录跳转到根目录下运行请求的生成器。这个.yo-rc.json文件是由Storage模块创建的，在生成器内部调用this.config.save()方法就会创建它。所以，如果你发现你的生成器不是在你当前工作目录下运行，请确保。yo-rc.json不存在你目录的其他层级中</p>\n<h2 id=\"2、运行上下文\"><a href=\"#2、运行上下文\" class=\"headerlink\" title=\"2、运行上下文\"></a>2、运行上下文</h2><h3 id=\"2-1、静态方法都是Action\"><a href=\"#2-1、静态方法都是Action\" class=\"headerlink\" title=\"2.1、静态方法都是Action\"></a>2.1、静态方法都是Action</h3><p>如果一个函数直接作为生成器的原型（prototype）的属性，则会当做action自动（按顺序）执行。如何声明不会自动执行的辅助函数以及私有函数呢？有三种方法：</p>\n<ol>\n<li>给方法前面添加前缀（例如：_method）</li>\n<li>使用实例函数声明（this.mehtod）<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">init</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.helperMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;won\\&#x27;t be called automatically&#x27;</span>);<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li>继承自父类生成器<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> MyBase = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">helper</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;won\\&#x27;t be called automatically&#x27;</span>);<br>  &#125;<br>&#125;);<br><br><span class=\"hljs-built_in\">module</span>.exports = MyBase.extend(&#123;<br>  <span class=\"hljs-attr\">exec</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.helper();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-2、运行顺序\"><a href=\"#2-2、运行顺序\" class=\"headerlink\" title=\"2.2、运行顺序\"></a>2.2、运行顺序</h3>Yeoman是按照优先级顺序依次执行所定义的方法。当你定义的函数名字是Yeoman定义的优先级函数名时，会自动将该函数列入到所在优先级队列中，否则就会列入到default优先层级队列中。</li>\n</ol>\n<p>依次执行的方法名称为：</p>\n<ol>\n<li><strong>initializing</strong> - 你的初始化方法（检测当前目录状态，获取配置等）</li>\n<li><strong>prompting</strong> – 给用户展示选项提示（调用this.prompt()）</li>\n<li><strong>configuring</strong> – 保存用户配置项，同时配置工程（创建.editorconfig文件或者其他metadata文件）</li>\n<li><strong>default</strong></li>\n<li><strong>writing</strong> – 用于生成和生成器相关的文件（比如routes,controllers等）</li>\n<li><strong>conflicts</strong> – 用于处理冲突异常（内部使用）</li>\n<li><strong>install</strong> – 用于安装相关库 (npm, bower)</li>\n<li><strong>end</strong> – 最后调用，常用于清理、道别等</li>\n</ol>\n<h2 id=\"3、UI\"><a href=\"#3、UI\" class=\"headerlink\" title=\"3、UI\"></a>3、UI</h2><p>Yeoman默认是跑在终端的，但不限于终端。因此记住，不要使用console.log()或者process.stdout.write()向用户反馈信息，应当使用generator.log方法。</p>\n<h3 id=\"3-1、提示框\"><a href=\"#3-1、提示框\" class=\"headerlink\" title=\"3.1、提示框\"></a>3.1、提示框</h3><p>Yeoman中最为主要的UI交互就是提示框，由Inquirer.js组件提供。使用下列方式调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">prompting</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-built_in\">this</span>.async();<br>    <span class=\"hljs-built_in\">this</span>.prompt(&#123;<br>      <span class=\"hljs-attr\">type</span>    : <span class=\"hljs-string\">&#x27;input&#x27;</span>,<br>      <span class=\"hljs-attr\">name</span>    : <span class=\"hljs-string\">&#x27;name&#x27;</span>,<br>      <span class=\"hljs-attr\">message</span> : <span class=\"hljs-string\">&#x27;Your project name&#x27;</span>,<br>      <span class=\"hljs-attr\">default</span> : <span class=\"hljs-built_in\">this</span>.appname <span class=\"hljs-comment\">// Default to current folder name</span><br>    &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">answers</span>) </span>&#123;<br>      <span class=\"hljs-built_in\">this</span>.log(answers.name);<br>      done();<br>    &#125;.bind(<span class=\"hljs-built_in\">this</span>));<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们使用promoting的优先层级 。由于咨询用户是一个异步的过程，会卡住命令逻辑的运行，所以需要调用yo的异步方法：<code>var cb = this.async();</code></p>\n</blockquote>\n<h3 id=\"3-2、记住用户偏好\"><a href=\"#3-2、记住用户偏好\" class=\"headerlink\" title=\"3.2、记住用户偏好\"></a>3.2、记住用户偏好</h3><p>当用户运行你的生成器时，很多时候会输入相同的答案；Yeoman扩展了Inquirer.js的API，额外增加了store的属性表示用户可以将之前填写过的答案作为后续的默认答案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>.prompt(&#123;<br>  <span class=\"hljs-attr\">type</span>    : <span class=\"hljs-string\">&#x27;input&#x27;</span>,<br>  <span class=\"hljs-attr\">name</span>    : <span class=\"hljs-string\">&#x27;username&#x27;</span>,<br>  <span class=\"hljs-attr\">message</span> : <span class=\"hljs-string\">&#x27;What\\&#x27;s your Github username&#x27;</span>,<br>  <span class=\"hljs-attr\">store</span>   : <span class=\"hljs-literal\">true</span><br>&#125;, callback);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>提供默认答案时，程序会强制用户输入</p>\n</blockquote>\n<h3 id=\"3-3、命令行参数\"><a href=\"#3-3、命令行参数\" class=\"headerlink\" title=\"3.3、命令行参数\"></a>3.3、命令行参数</h3><p>可以直接像在命令中传入参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yo webapp my-project<br></code></pre></td></tr></table></figure>\n<p>在这里，my-project作为第一个参数。为了提示系统我们期望用户传入参数，需要调用generator.argument()方法，该方法接受name作为参数，以及额外的限制条件。</p>\n<blockquote>\n<p> 该argument方法必须在构造器中调用。这些条件是（key/value型）：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;desc&#x27;</span>： <span class=\"hljs-comment\">//Description for the argument</span><br><span class=\"hljs-string\">&#x27;required&#x27;</span>： <span class=\"hljs-comment\">// Boolean whether it is required</span><br><span class=\"hljs-string\">&#x27;optional&#x27;</span>： <span class=\"hljs-comment\">//Boolean whether it is optional</span><br><span class=\"hljs-string\">&#x27;type&#x27;</span>： <span class=\"hljs-comment\">// String, Number, Array, or Object</span><br><span class=\"hljs-string\">&#x27;defaults&#x27;</span>： <span class=\"hljs-comment\">//Default value for this argument</span><br><span class=\"hljs-string\">&#x27;banner&#x27;</span>:  <span class=\"hljs-comment\">//String to show on usage notes (this one is provided by default)</span><br></code></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// note: arguments and options should be defined in the constructor.</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// This makes `appname` a required argument.</span><br>    <span class=\"hljs-built_in\">this</span>.argument(<span class=\"hljs-string\">&#x27;appname&#x27;</span>, &#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> &#125;);<br>    <span class=\"hljs-comment\">// And you can then access it later on this way; e.g. CamelCased</span><br>    <span class=\"hljs-built_in\">this</span>.appname = <span class=\"hljs-built_in\">this</span>._.camelize(<span class=\"hljs-built_in\">this</span>.appname);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-4、选项\"><a href=\"#3-4、选项\" class=\"headerlink\" title=\"3.4、选项\"></a>3.4、选项</h3><p>选项看上去像参数，不过它前面多了两短横杠（flags）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yo webapp --coffee<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>使用generator.option()方法获取选项值，该方法也有可选的限制属性（key/value型）：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;desc&#x27;</span>： <span class=\"hljs-comment\">// Description for the option</span><br><span class=\"hljs-string\">&#x27;type&#x27;</span> ：<span class=\"hljs-comment\">// Either Boolean, String or Number</span><br><span class=\"hljs-string\">&#x27;defaults&#x27;</span>： <span class=\"hljs-comment\">// Default value</span><br><span class=\"hljs-string\">&#x27;hide&#x27;</span>： <span class=\"hljs-comment\">//Boolean whether to hide from help</span><br></code></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// note: arguments and options should be defined in the constructor.</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// This method adds support for a `--coffee` flag</span><br>    <span class=\"hljs-built_in\">this</span>.option(<span class=\"hljs-string\">&#x27;coffee&#x27;</span>);<br>    <span class=\"hljs-comment\">// And you can then access it later on this way; e.g.</span><br>    <span class=\"hljs-built_in\">this</span>.scriptSuffix = (<span class=\"hljs-built_in\">this</span>.options.coffee ? <span class=\"hljs-string\">&quot;.coffee&quot;</span>: <span class=\"hljs-string\">&quot;.js&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4、处理依赖\"><a href=\"#4、处理依赖\" class=\"headerlink\" title=\"4、处理依赖\"></a>4、处理依赖</h2><p>在运行生成器时，经常会伴随着npm和bower命令去安装依赖文件，Yeoman已经将这些功能抽离出来方便用户使用</p>\n<h3 id=\"4-1、npm\"><a href=\"#4-1、npm\" class=\"headerlink\" title=\"4.1、npm\"></a>4.1、npm</h3><p>使用generator.npmInstall()运行npm安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">installingLodash</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-built_in\">this</span>.async();<br>    <span class=\"hljs-built_in\">this</span>.npmInstall([<span class=\"hljs-string\">&#x27;lodash&#x27;</span>], &#123; <span class=\"hljs-string\">&#x27;saveDev&#x27;</span>: <span class=\"hljs-literal\">true</span> &#125;, done);<br>  &#125;<br>&#125;):<br></code></pre></td></tr></table></figure>\n<p>上面的代码等价于命令行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">npm install lodash --save-dev<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-2、bower\"><a href=\"#4-2、bower\" class=\"headerlink\" title=\"4.2、bower\"></a>4.2、bower</h3><p>使用generator.bowerInstall()运行bower安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.spawnCommand(<span class=\"hljs-string\">&#x27;composer&#x27;</span>, [<span class=\"hljs-string\">&#x27;install&#x27;</span>]);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>记得在end队列中调用spawnCommand命令,否则用户没有耐心等那么久的。</p>\n</blockquote>\n<h2 id=\"5、文件系统\"><a href=\"#5、文件系统\" class=\"headerlink\" title=\"5、文件系统\"></a>5、文件系统</h2><p>方便文件流的输入输出，Yeoman使用两种位置环境： <strong>destination context</strong>  和 <strong>template context</strong></p>\n<h3 id=\"5-1、destination-contex-目标位置上下文\"><a href=\"#5-1、destination-contex-目标位置上下文\" class=\"headerlink\" title=\"5.1、destination contex 目标位置上下文\"></a>5.1、destination contex 目标位置上下文</h3><p>destination context 目标位置上下文，这里的“目标”是指你想架构应用的位置。这个位置要么是当前文件夹，要么就是文件.yo-rc.json所在的父文件夹位置；</p>\n<blockquote>\n<p>该.yo-rc.json文件确保所有的终端用户都以同样的方式方法生成器所在的子文件（夹）</p>\n</blockquote>\n<p>使用<code>generator.destinationRoot()</code>获取目标位置上下文；也可以手动传参重新设置，当然没有人愿意那么做的；用<code>generator.destinationPath(&#39;sub/path&#39;)</code>拼接所需要的路径字符串。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Given destination root is ~/projects</span><br>generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">paths</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.destinationRoot();<br>    <span class=\"hljs-comment\">// returns &#x27;~/projects&#x27;</span><br><br>    <span class=\"hljs-built_in\">this</span>.destinationPath(<span class=\"hljs-string\">&#x27;index.js&#x27;</span>);<br>    <span class=\"hljs-comment\">// returns &#x27;~/projects/index.js&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-2、template-context-模板位置上下文\"><a href=\"#5-2、template-context-模板位置上下文\" class=\"headerlink\" title=\"5.2、template context 模板位置上下文\"></a>5.2、template context 模板位置上下文</h3><p>template context 模板位置上下文 ：就是你模板文件所在的文件夹位置，这个文件夹基本上是你读取并拷贝文件的地方。默认的template context是<code>./templates/</code>，你可以通过<code>generator.sourceRoot(&#39;new/template/path&#39;)</code>指定新的模板文件夹位置；与上面类似，可使用<code>generator.sourceRoot()</code>获取模板位置，使用<code>generator.templatePath(&#39;app/index.js&#39;)</code>拼接路径。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">paths</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.sourceRoot();<br>    <span class=\"hljs-comment\">// returns &#x27;./templates&#x27;</span><br><br>    <span class=\"hljs-built_in\">this</span>.templatePath(<span class=\"hljs-string\">&#x27;index.js&#x27;</span>);<br>    <span class=\"hljs-comment\">// returns &#x27;~/templates/index.js&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-3、文件操作API\"><a href=\"#5-3、文件操作API\" class=\"headerlink\" title=\"5.3、文件操作API\"></a>5.3、文件操作API</h3><p>Yeoman把所有的文件方法都放在this.fs中了，它是<a href=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs-editor</a>的一个示例对象，可自行查看API接口。<br><strong>示例：拷贝模板文件</strong><br>假如。、templates/index.html文件内容为：</p>\n<figure class=\"highlight vbscript-html\"><table><tr><td class=\"code\"><pre><code class=\"hljs vbscript-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span></span><span class=\"vbscript\">&lt;%= title %&gt;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<p>我们使用copyTpl方法拷贝模板：（更多参看<a href=\"https://lodash.com/docs#template\">Lodash template syntax</a>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">writing</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.fs.copyTpl(<br>      <span class=\"hljs-built_in\">this</span>.templatePath(<span class=\"hljs-string\">&#x27;index.html&#x27;</span>),<br>      <span class=\"hljs-built_in\">this</span>.destinationPath(<span class=\"hljs-string\">&#x27;public/index.html&#x27;</span>),<br>      &#123; <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Templating with Yeoman&#x27;</span> &#125;<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>一旦生成器运行完成，我们就会获得public/index.html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">Templating with Yeoman<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Yeoman仍保留了旧的文件API，可参看 <a href=\"http://yeoman.github.io/generator/actions.html\">API documentation</a> 。旧的文件API总是假设文件来自template context，写文件总是在destination context中，所以它们不要求你传入文件路径信息，程序会自动处理</p>\n</blockquote>\n<p><strong>建议</strong>：尽可能使用新的<code>fs</code>API，它的使用起来比较清晰</p>\n<h2 id=\"6、储存用户设置\"><a href=\"#6、储存用户设置\" class=\"headerlink\" title=\"6、储存用户设置\"></a>6、储存用户设置</h2><p>常常需要存储用户的设置项并在子生成器中使用，比如用户使用什么编程语言（比如使用CoffeeScript？）等这些配置项都存储在.yo-rc.json中（使用 <a href=\"http://yeoman.github.io/generator/Storage.html\">Yeoman Storage API</a>.）,可以通过<code>generator.config</code>对象获取API方法。</p>\n<h3 id=\"6-1、常用方法\"><a href=\"#6-1、常用方法\" class=\"headerlink\" title=\"6.1、常用方法\"></a>6.1、常用方法</h3><ol>\n<li><p><code>generator.config.save()</code><br>保存配置项到文件.yo-rc.json文件中（若文件不存在将自动 创建），由于该文件决定工程的根目录，因而一个最佳实践就是：就算什么也没有也应当调用save方法。</p>\n<blockquote>\n<p>每次设置配置项都会自动调用save方法，因此你可以不用显示调用</p>\n</blockquote>\n</li>\n<li><p><code>generator.config.set(key,val)</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&quot;Name&quot;</span>: <span class=\"hljs-string\">&quot;用于存储的键&quot;</span>,<br><span class=\"hljs-string\">&quot;val&quot;</span> : <span class=\"hljs-string\">&quot;任何JSON类型的值（String，Number, Array, Object）&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li><p><code>generator.config.get()</code><br>根据键获得配置项</p>\n</li>\n<li><p><code>generator.config.getAll()</code><br>获取可用的所有配置信息；主要返回值不是按引用返回的，所以要更改里面的配置项还是需要调用set方法。</p>\n</li>\n<li><p><code>generator.config.delete()</code><br>删除某个键值（及其值）</p>\n</li>\n<li><p><code>generator.config.defaults()</code><br>将对象作为默认的配置信息，采用不覆盖原则</p>\n</li>\n</ol>\n<h3 id=\"6-2、-yo-rc-json-文件结构\"><a href=\"#6-2、-yo-rc-json-文件结构\" class=\"headerlink\" title=\"6.2、.yo-rc.json 文件结构\"></a>6.2、.yo-rc.json 文件结构</h3><p>该文件可存储多个生成器的信息，每个生成器依据名字划分命名空间防止冲突，这也意味着每个生成器的配置项只能被子生成器读取到，不同生成器间的配置信息不能通过 Yeoman Storage API.访问。（使用命令行参数或者选项在不同构造器间传递参数。</p>\n<p>文件样本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;generator-backbone&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;requirejs&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-string\">&quot;coffee&quot;</span>: <span class=\"hljs-literal\">true</span><br>  &#125;,<br>  <span class=\"hljs-string\">&quot;generator-gruntfile&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;compass&quot;</span>: <span class=\"hljs-literal\">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"http://yeoman.io/authoring/\">WRITING YOUR OWN YEOMAN GENERATOR</a></li>\n<li><a href=\"http://www.html-js.com/article/1732\">学习Bower – 前端开发包管理工具</a><blockquote>\n<p>   原文的2个链接失效了，不放上来了</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"整理文档\"><a href=\"#整理文档\" class=\"headerlink\" title=\"整理文档\"></a>整理文档</h2><ol>\n<li><a href=\"http://www.jscon.co/coding/frontend/yeoman_generator.html\">自定义Yeoman生成器 —— JSCON-简时空</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>年前整理的一篇文章：<a href=\"http://www.jscon.co/coding/frontend/yeoman_generator.html\">自定义Yeoman生成器 —— JSCON-简时空</a>, 因为原链接的可读性太差，就通过MarkDown语法重新整理了下，根据该文章 构建了自己的yeoman generator ：<a href=\"https://github.com/sumaolin/generator-kmapp\">generator-kmapp</a>, 只是简单的实现了模板复制，安装bower , 和npm 依赖模块的功能，这样实现一键构建业务中的开发环境：本地服务器，自动刷新，less自动编译，接口转发等功能。</p>","more":"<h2 id=\"1-Getting-Started\"><a href=\"#1-Getting-Started\" class=\"headerlink\" title=\"1 Getting Started\"></a>1 Getting Started</h2><h3 id=\"1-1、设置Node模块\"><a href=\"#1-1、设置Node模块\" class=\"headerlink\" title=\"1.1、设置Node模块\"></a>1.1、设置Node模块</h3><p>Yeoman提供了generator-generator方便快速编写自己的生成器。</p>\n<blockquote>\n<p>安装: npm install -g generator-generator</p>\n</blockquote>\n<blockquote>\n<p>运行: yo generator</p>\n</blockquote>\n<ul>\n<li>创建一个名为generator-name的文件夹（name为你的生成器名）;【important】</li>\n<li>创建package.json文件，这是NodeJS模块的“信息图”，可以手动或者使用命令npm init生成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;generator-name&quot;</span>,<br>  <span class=\"hljs-string\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.1.0&quot;</span>,<br>  <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-string\">&quot;keywords&quot;</span>: [<span class=\"hljs-string\">&quot;yeoman-generator&quot;</span>],<br>  <span class=\"hljs-string\">&quot;dependencies&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;yeoman-generator&quot;</span>: <span class=\"hljs-string\">&quot;^0.17.3&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>name属性必须要有generator-前缀；keywords属性必须包含yeoman-generator，务必确保是最新的，可运行命令npm install –save yeoman-generator完成更新/安装</p>\n</blockquote>\n<h3 id=\"1-2、文件树结构\"><a href=\"#1-2、文件树结构\" class=\"headerlink\" title=\"1.2、文件树结构\"></a>1.2、文件树结构</h3><ol>\n<li>当调用yo name命令时，默认调用的是app生成器，对于的逻辑放置在app/文件夹下</li>\n<li>当调用yo name:subcommand命令时，必须要有对于的subcommand/文件夹</li>\n</ol>\n<p>如果文件结构如下，则该生成器暴露yo name和yo name:router两个命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">├───package.json<br>├───app/<br>│   └───index.js<br>└───router/<br>    └───index.js<br></code></pre></td></tr></table></figure>\n\n<p>如果你不想把所有代码都放在根目录下，Yeoman提供了另外的一种方式：可以放在generators/目录下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">├───package.json<br>└───generators/<br>    ├───app/<br>    │   └───index.js<br>    └───router/<br>        └───index.js<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-3、继承generator\"><a href=\"#1-3、继承generator\" class=\"headerlink\" title=\"1.3、继承generator\"></a>1.3、继承generator</h3><p>结构写好了，需要开始写实际的逻辑代码。Yeoman提供了基础生成器供你继承，这些基础生成器提供了很多方便的方法供你调用。基本写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> generators = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yeoman-generator&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend();<br></code></pre></td></tr></table></figure>\n\n<p>如果你的生成器需要name参数（比如yo name:router foo中的foo），想将它赋给this.name的话：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> generators = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yeoman-generator&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports = generators.NamedBase.extend();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>上面两种方式都能用于创建app生成器或者子生成器，Base多用于app生成器，NamedBase多用于需要指定文件名的子生成器</p>\n</blockquote>\n<h3 id=\"1-4、重写构造函数\"><a href=\"#1-4、重写构造函数\" class=\"headerlink\" title=\"1.4、重写构造函数\"></a>1.4、重写构造函数</h3><p>有些方法只能在constructor方法中调用，常用于状态控制；可以传入构造函数重写默认的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// The name `constructor` is important here</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// Calling the super constructor is important so our generator is correctly set up</span><br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// Next, add your custom code</span><br>    <span class=\"hljs-built_in\">this</span>.option(<span class=\"hljs-string\">&#x27;coffee&#x27;</span>); <span class=\"hljs-comment\">// This method adds support for a `--coffee` flag</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-5、添加方法\"><a href=\"#1-5、添加方法\" class=\"headerlink\" title=\"1.5、添加方法\"></a>1.5、添加方法</h3><p>一般给原型添加的方法是按顺序执行的，不过后面我们会看到一些特殊的方法会触发不同的执行顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">method1</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;method 1 just ran&#x27;</span>);<br>  &#125;,<br>  <span class=\"hljs-attr\">method2</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;method 2 just ran&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-6、运行生成器\"><a href=\"#1-6、运行生成器\" class=\"headerlink\" title=\"1.6、运行生成器\"></a>1.6、运行生成器</h3><p>到了这一步，你已经拥有一个可以运行的生成器了。下一步就是检验生成器是否按自己的逻辑运行。由于是在本地开发生成器，在全局npm模块中并不存在，需要手动链接。进入generator-name/文件夹，运行：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">npm</span> link<br></code></pre></td></tr></table></figure>\n<p>这将自动安装工程依赖包，同时将本地文件链接进全局模块；运行完毕之后，你就可以调用yo name并看到之前定义的console.log信息。</p>\n<p>至此，恭喜你完成了简单的生成器！</p>\n<h3 id=\"1-7、找到工程根目录\"><a href=\"#1-7、找到工程根目录\" class=\"headerlink\" title=\"1.7、找到工程根目录\"></a>1.7、找到工程根目录</h3><p>当运行一个生成器，Yeoman将计算当前的文件目录信息。最为关键的是，Yeoman将.yo-rc.json所在的目录作为工程的根目录，之后Yeoman将当前文件目录跳转到根目录下运行请求的生成器。这个.yo-rc.json文件是由Storage模块创建的，在生成器内部调用this.config.save()方法就会创建它。所以，如果你发现你的生成器不是在你当前工作目录下运行，请确保。yo-rc.json不存在你目录的其他层级中</p>\n<h2 id=\"2、运行上下文\"><a href=\"#2、运行上下文\" class=\"headerlink\" title=\"2、运行上下文\"></a>2、运行上下文</h2><h3 id=\"2-1、静态方法都是Action\"><a href=\"#2-1、静态方法都是Action\" class=\"headerlink\" title=\"2.1、静态方法都是Action\"></a>2.1、静态方法都是Action</h3><p>如果一个函数直接作为生成器的原型（prototype）的属性，则会当做action自动（按顺序）执行。如何声明不会自动执行的辅助函数以及私有函数呢？有三种方法：</p>\n<ol>\n<li>给方法前面添加前缀（例如：_method）</li>\n<li>使用实例函数声明（this.mehtod）<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">init</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.helperMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;won\\&#x27;t be called automatically&#x27;</span>);<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li>继承自父类生成器<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> MyBase = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">helper</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;won\\&#x27;t be called automatically&#x27;</span>);<br>  &#125;<br>&#125;);<br><br><span class=\"hljs-built_in\">module</span>.exports = MyBase.extend(&#123;<br>  <span class=\"hljs-attr\">exec</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.helper();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-2、运行顺序\"><a href=\"#2-2、运行顺序\" class=\"headerlink\" title=\"2.2、运行顺序\"></a>2.2、运行顺序</h3>Yeoman是按照优先级顺序依次执行所定义的方法。当你定义的函数名字是Yeoman定义的优先级函数名时，会自动将该函数列入到所在优先级队列中，否则就会列入到default优先层级队列中。</li>\n</ol>\n<p>依次执行的方法名称为：</p>\n<ol>\n<li><strong>initializing</strong> - 你的初始化方法（检测当前目录状态，获取配置等）</li>\n<li><strong>prompting</strong> – 给用户展示选项提示（调用this.prompt()）</li>\n<li><strong>configuring</strong> – 保存用户配置项，同时配置工程（创建.editorconfig文件或者其他metadata文件）</li>\n<li><strong>default</strong></li>\n<li><strong>writing</strong> – 用于生成和生成器相关的文件（比如routes,controllers等）</li>\n<li><strong>conflicts</strong> – 用于处理冲突异常（内部使用）</li>\n<li><strong>install</strong> – 用于安装相关库 (npm, bower)</li>\n<li><strong>end</strong> – 最后调用，常用于清理、道别等</li>\n</ol>\n<h2 id=\"3、UI\"><a href=\"#3、UI\" class=\"headerlink\" title=\"3、UI\"></a>3、UI</h2><p>Yeoman默认是跑在终端的，但不限于终端。因此记住，不要使用console.log()或者process.stdout.write()向用户反馈信息，应当使用generator.log方法。</p>\n<h3 id=\"3-1、提示框\"><a href=\"#3-1、提示框\" class=\"headerlink\" title=\"3.1、提示框\"></a>3.1、提示框</h3><p>Yeoman中最为主要的UI交互就是提示框，由Inquirer.js组件提供。使用下列方式调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">prompting</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-built_in\">this</span>.async();<br>    <span class=\"hljs-built_in\">this</span>.prompt(&#123;<br>      <span class=\"hljs-attr\">type</span>    : <span class=\"hljs-string\">&#x27;input&#x27;</span>,<br>      <span class=\"hljs-attr\">name</span>    : <span class=\"hljs-string\">&#x27;name&#x27;</span>,<br>      <span class=\"hljs-attr\">message</span> : <span class=\"hljs-string\">&#x27;Your project name&#x27;</span>,<br>      <span class=\"hljs-attr\">default</span> : <span class=\"hljs-built_in\">this</span>.appname <span class=\"hljs-comment\">// Default to current folder name</span><br>    &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">answers</span>) </span>&#123;<br>      <span class=\"hljs-built_in\">this</span>.log(answers.name);<br>      done();<br>    &#125;.bind(<span class=\"hljs-built_in\">this</span>));<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们使用promoting的优先层级 。由于咨询用户是一个异步的过程，会卡住命令逻辑的运行，所以需要调用yo的异步方法：<code>var cb = this.async();</code></p>\n</blockquote>\n<h3 id=\"3-2、记住用户偏好\"><a href=\"#3-2、记住用户偏好\" class=\"headerlink\" title=\"3.2、记住用户偏好\"></a>3.2、记住用户偏好</h3><p>当用户运行你的生成器时，很多时候会输入相同的答案；Yeoman扩展了Inquirer.js的API，额外增加了store的属性表示用户可以将之前填写过的答案作为后续的默认答案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>.prompt(&#123;<br>  <span class=\"hljs-attr\">type</span>    : <span class=\"hljs-string\">&#x27;input&#x27;</span>,<br>  <span class=\"hljs-attr\">name</span>    : <span class=\"hljs-string\">&#x27;username&#x27;</span>,<br>  <span class=\"hljs-attr\">message</span> : <span class=\"hljs-string\">&#x27;What\\&#x27;s your Github username&#x27;</span>,<br>  <span class=\"hljs-attr\">store</span>   : <span class=\"hljs-literal\">true</span><br>&#125;, callback);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>提供默认答案时，程序会强制用户输入</p>\n</blockquote>\n<h3 id=\"3-3、命令行参数\"><a href=\"#3-3、命令行参数\" class=\"headerlink\" title=\"3.3、命令行参数\"></a>3.3、命令行参数</h3><p>可以直接像在命令中传入参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yo webapp my-project<br></code></pre></td></tr></table></figure>\n<p>在这里，my-project作为第一个参数。为了提示系统我们期望用户传入参数，需要调用generator.argument()方法，该方法接受name作为参数，以及额外的限制条件。</p>\n<blockquote>\n<p> 该argument方法必须在构造器中调用。这些条件是（key/value型）：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;desc&#x27;</span>： <span class=\"hljs-comment\">//Description for the argument</span><br><span class=\"hljs-string\">&#x27;required&#x27;</span>： <span class=\"hljs-comment\">// Boolean whether it is required</span><br><span class=\"hljs-string\">&#x27;optional&#x27;</span>： <span class=\"hljs-comment\">//Boolean whether it is optional</span><br><span class=\"hljs-string\">&#x27;type&#x27;</span>： <span class=\"hljs-comment\">// String, Number, Array, or Object</span><br><span class=\"hljs-string\">&#x27;defaults&#x27;</span>： <span class=\"hljs-comment\">//Default value for this argument</span><br><span class=\"hljs-string\">&#x27;banner&#x27;</span>:  <span class=\"hljs-comment\">//String to show on usage notes (this one is provided by default)</span><br></code></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// note: arguments and options should be defined in the constructor.</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// This makes `appname` a required argument.</span><br>    <span class=\"hljs-built_in\">this</span>.argument(<span class=\"hljs-string\">&#x27;appname&#x27;</span>, &#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> &#125;);<br>    <span class=\"hljs-comment\">// And you can then access it later on this way; e.g. CamelCased</span><br>    <span class=\"hljs-built_in\">this</span>.appname = <span class=\"hljs-built_in\">this</span>._.camelize(<span class=\"hljs-built_in\">this</span>.appname);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-4、选项\"><a href=\"#3-4、选项\" class=\"headerlink\" title=\"3.4、选项\"></a>3.4、选项</h3><p>选项看上去像参数，不过它前面多了两短横杠（flags）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yo webapp --coffee<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>使用generator.option()方法获取选项值，该方法也有可选的限制属性（key/value型）：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;desc&#x27;</span>： <span class=\"hljs-comment\">// Description for the option</span><br><span class=\"hljs-string\">&#x27;type&#x27;</span> ：<span class=\"hljs-comment\">// Either Boolean, String or Number</span><br><span class=\"hljs-string\">&#x27;defaults&#x27;</span>： <span class=\"hljs-comment\">// Default value</span><br><span class=\"hljs-string\">&#x27;hide&#x27;</span>： <span class=\"hljs-comment\">//Boolean whether to hide from help</span><br></code></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = generators.Base.extend(&#123;<br>  <span class=\"hljs-comment\">// note: arguments and options should be defined in the constructor.</span><br>  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    generators.Base.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>);<br><br>    <span class=\"hljs-comment\">// This method adds support for a `--coffee` flag</span><br>    <span class=\"hljs-built_in\">this</span>.option(<span class=\"hljs-string\">&#x27;coffee&#x27;</span>);<br>    <span class=\"hljs-comment\">// And you can then access it later on this way; e.g.</span><br>    <span class=\"hljs-built_in\">this</span>.scriptSuffix = (<span class=\"hljs-built_in\">this</span>.options.coffee ? <span class=\"hljs-string\">&quot;.coffee&quot;</span>: <span class=\"hljs-string\">&quot;.js&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4、处理依赖\"><a href=\"#4、处理依赖\" class=\"headerlink\" title=\"4、处理依赖\"></a>4、处理依赖</h2><p>在运行生成器时，经常会伴随着npm和bower命令去安装依赖文件，Yeoman已经将这些功能抽离出来方便用户使用</p>\n<h3 id=\"4-1、npm\"><a href=\"#4-1、npm\" class=\"headerlink\" title=\"4.1、npm\"></a>4.1、npm</h3><p>使用generator.npmInstall()运行npm安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">installingLodash</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-built_in\">this</span>.async();<br>    <span class=\"hljs-built_in\">this</span>.npmInstall([<span class=\"hljs-string\">&#x27;lodash&#x27;</span>], &#123; <span class=\"hljs-string\">&#x27;saveDev&#x27;</span>: <span class=\"hljs-literal\">true</span> &#125;, done);<br>  &#125;<br>&#125;):<br></code></pre></td></tr></table></figure>\n<p>上面的代码等价于命令行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">npm install lodash --save-dev<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-2、bower\"><a href=\"#4-2、bower\" class=\"headerlink\" title=\"4.2、bower\"></a>4.2、bower</h3><p>使用generator.bowerInstall()运行bower安装命令，无论你调用多少次，Yeoman会确保该命令只执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">end</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.spawnCommand(<span class=\"hljs-string\">&#x27;composer&#x27;</span>, [<span class=\"hljs-string\">&#x27;install&#x27;</span>]);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>记得在end队列中调用spawnCommand命令,否则用户没有耐心等那么久的。</p>\n</blockquote>\n<h2 id=\"5、文件系统\"><a href=\"#5、文件系统\" class=\"headerlink\" title=\"5、文件系统\"></a>5、文件系统</h2><p>方便文件流的输入输出，Yeoman使用两种位置环境： <strong>destination context</strong>  和 <strong>template context</strong></p>\n<h3 id=\"5-1、destination-contex-目标位置上下文\"><a href=\"#5-1、destination-contex-目标位置上下文\" class=\"headerlink\" title=\"5.1、destination contex 目标位置上下文\"></a>5.1、destination contex 目标位置上下文</h3><p>destination context 目标位置上下文，这里的“目标”是指你想架构应用的位置。这个位置要么是当前文件夹，要么就是文件.yo-rc.json所在的父文件夹位置；</p>\n<blockquote>\n<p>该.yo-rc.json文件确保所有的终端用户都以同样的方式方法生成器所在的子文件（夹）</p>\n</blockquote>\n<p>使用<code>generator.destinationRoot()</code>获取目标位置上下文；也可以手动传参重新设置，当然没有人愿意那么做的；用<code>generator.destinationPath(&#39;sub/path&#39;)</code>拼接所需要的路径字符串。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Given destination root is ~/projects</span><br>generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">paths</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.destinationRoot();<br>    <span class=\"hljs-comment\">// returns &#x27;~/projects&#x27;</span><br><br>    <span class=\"hljs-built_in\">this</span>.destinationPath(<span class=\"hljs-string\">&#x27;index.js&#x27;</span>);<br>    <span class=\"hljs-comment\">// returns &#x27;~/projects/index.js&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-2、template-context-模板位置上下文\"><a href=\"#5-2、template-context-模板位置上下文\" class=\"headerlink\" title=\"5.2、template context 模板位置上下文\"></a>5.2、template context 模板位置上下文</h3><p>template context 模板位置上下文 ：就是你模板文件所在的文件夹位置，这个文件夹基本上是你读取并拷贝文件的地方。默认的template context是<code>./templates/</code>，你可以通过<code>generator.sourceRoot(&#39;new/template/path&#39;)</code>指定新的模板文件夹位置；与上面类似，可使用<code>generator.sourceRoot()</code>获取模板位置，使用<code>generator.templatePath(&#39;app/index.js&#39;)</code>拼接路径。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">paths</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.sourceRoot();<br>    <span class=\"hljs-comment\">// returns &#x27;./templates&#x27;</span><br><br>    <span class=\"hljs-built_in\">this</span>.templatePath(<span class=\"hljs-string\">&#x27;index.js&#x27;</span>);<br>    <span class=\"hljs-comment\">// returns &#x27;~/templates/index.js&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-3、文件操作API\"><a href=\"#5-3、文件操作API\" class=\"headerlink\" title=\"5.3、文件操作API\"></a>5.3、文件操作API</h3><p>Yeoman把所有的文件方法都放在this.fs中了，它是<a href=\"https://github.com/sboudrias/mem-fs-editor\">mem-fs-editor</a>的一个示例对象，可自行查看API接口。<br><strong>示例：拷贝模板文件</strong><br>假如。、templates/index.html文件内容为：</p>\n<figure class=\"highlight vbscript-html\"><table><tr><td class=\"code\"><pre><code class=\"hljs vbscript-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span></span><span class=\"vbscript\">&lt;%= title %&gt;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<p>我们使用copyTpl方法拷贝模板：（更多参看<a href=\"https://lodash.com/docs#template\">Lodash template syntax</a>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">generators.Base.extend(&#123;<br>  <span class=\"hljs-attr\">writing</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.fs.copyTpl(<br>      <span class=\"hljs-built_in\">this</span>.templatePath(<span class=\"hljs-string\">&#x27;index.html&#x27;</span>),<br>      <span class=\"hljs-built_in\">this</span>.destinationPath(<span class=\"hljs-string\">&#x27;public/index.html&#x27;</span>),<br>      &#123; <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Templating with Yeoman&#x27;</span> &#125;<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>一旦生成器运行完成，我们就会获得public/index.html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">Templating with Yeoman<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Yeoman仍保留了旧的文件API，可参看 <a href=\"http://yeoman.github.io/generator/actions.html\">API documentation</a> 。旧的文件API总是假设文件来自template context，写文件总是在destination context中，所以它们不要求你传入文件路径信息，程序会自动处理</p>\n</blockquote>\n<p><strong>建议</strong>：尽可能使用新的<code>fs</code>API，它的使用起来比较清晰</p>\n<h2 id=\"6、储存用户设置\"><a href=\"#6、储存用户设置\" class=\"headerlink\" title=\"6、储存用户设置\"></a>6、储存用户设置</h2><p>常常需要存储用户的设置项并在子生成器中使用，比如用户使用什么编程语言（比如使用CoffeeScript？）等这些配置项都存储在.yo-rc.json中（使用 <a href=\"http://yeoman.github.io/generator/Storage.html\">Yeoman Storage API</a>.）,可以通过<code>generator.config</code>对象获取API方法。</p>\n<h3 id=\"6-1、常用方法\"><a href=\"#6-1、常用方法\" class=\"headerlink\" title=\"6.1、常用方法\"></a>6.1、常用方法</h3><ol>\n<li><p><code>generator.config.save()</code><br>保存配置项到文件.yo-rc.json文件中（若文件不存在将自动 创建），由于该文件决定工程的根目录，因而一个最佳实践就是：就算什么也没有也应当调用save方法。</p>\n<blockquote>\n<p>每次设置配置项都会自动调用save方法，因此你可以不用显示调用</p>\n</blockquote>\n</li>\n<li><p><code>generator.config.set(key,val)</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&quot;Name&quot;</span>: <span class=\"hljs-string\">&quot;用于存储的键&quot;</span>,<br><span class=\"hljs-string\">&quot;val&quot;</span> : <span class=\"hljs-string\">&quot;任何JSON类型的值（String，Number, Array, Object）&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li><p><code>generator.config.get()</code><br>根据键获得配置项</p>\n</li>\n<li><p><code>generator.config.getAll()</code><br>获取可用的所有配置信息；主要返回值不是按引用返回的，所以要更改里面的配置项还是需要调用set方法。</p>\n</li>\n<li><p><code>generator.config.delete()</code><br>删除某个键值（及其值）</p>\n</li>\n<li><p><code>generator.config.defaults()</code><br>将对象作为默认的配置信息，采用不覆盖原则</p>\n</li>\n</ol>\n<h3 id=\"6-2、-yo-rc-json-文件结构\"><a href=\"#6-2、-yo-rc-json-文件结构\" class=\"headerlink\" title=\"6.2、.yo-rc.json 文件结构\"></a>6.2、.yo-rc.json 文件结构</h3><p>该文件可存储多个生成器的信息，每个生成器依据名字划分命名空间防止冲突，这也意味着每个生成器的配置项只能被子生成器读取到，不同生成器间的配置信息不能通过 Yeoman Storage API.访问。（使用命令行参数或者选项在不同构造器间传递参数。</p>\n<p>文件样本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-string\">&quot;generator-backbone&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;requirejs&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-string\">&quot;coffee&quot;</span>: <span class=\"hljs-literal\">true</span><br>  &#125;,<br>  <span class=\"hljs-string\">&quot;generator-gruntfile&quot;</span>: &#123;<br>    <span class=\"hljs-string\">&quot;compass&quot;</span>: <span class=\"hljs-literal\">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"http://yeoman.io/authoring/\">WRITING YOUR OWN YEOMAN GENERATOR</a></li>\n<li><a href=\"http://www.html-js.com/article/1732\">学习Bower – 前端开发包管理工具</a><blockquote>\n<p>   原文的2个链接失效了，不放上来了</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"整理文档\"><a href=\"#整理文档\" class=\"headerlink\" title=\"整理文档\"></a>整理文档</h2><ol>\n<li><a href=\"http://www.jscon.co/coding/frontend/yeoman_generator.html\">自定义Yeoman生成器 —— JSCON-简时空</a></li>\n</ol>"},{"title":"MacBook_Pro_2015硬盘扩容升级","date":"2022-07-10T08:58:10.000Z","_content":"\nB 站看了个 自己动手拆卸 MacBook 笔记本换固态硬盘的的视频，看到手边自己的 MacBook Pro 2015 手痒难耐了，下单配件：SSD 固态硬盘，硬盘接口转接卡，笔记本电池等！开工\n\n<!-- more -->\n\n电脑硬件配置：[MacBook Pro (Retina 显示屏 13 英寸, 2015 年初) - 技术规格 (中国) (apple.com)](https://support.apple.com/kb/SP715?viewlocale=zh_CN&locale=zh_CN)\n\n### 安装硬盘\n\n1. [MacBook Pro 2013-2015 款 15 英寸更换 SSD 固态硬盘\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1HE411M7z2/)\n\n2. [【DIY】2013 - 2015 MacBook Pro NVMe SSD 升级详细教程\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1Va4y1v7oP/?spm_id_from=autoNext) **推荐**\n\n   1. Mac 系统的安装盘制作\n   2. 需要准备的转接头\n   3. 提到了更换后 SSD 的速度可以打到 1000M，更换前是 600M，性能提升不错\n\n   晚上开电脑看下配置，买个 SSD 来试试\n\n3. [【DIY】如何把丐版 MacBook Pro 变高配\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1D54y1D78z?spm_id_from=333.999.0.0)\n\n   这个要买主板更换了，感觉不合适还是买 SSD 硬盘更换吧\n\n4. 选硬盘：[2020 之 Macbook Pro DIY 升级 SSD 及 Time Machine 数据恢复 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/125702799)\n\n#### 预想的配件\n\n1. SSD 硬盘：[【三星 980】三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 980（MZ-V8V1T0BW）【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100018768506.html) 799\n2. 转接口：[NVMe PCIe M.2 转苹果 2013 2014 2015 款 Macbook Air Pro SSD 转接卡-淘宝网 (taobao.com)](https://item.taobao.com/item.htm?spm=a230r.1.14.217.20ad9190VqoSsd&id=586085643504&ns=1&abbucket=16#detail) 15\n3. 硬盘盒子：[【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100024210022.html#crumb-wrap) 99\n\n### 电池更换\n\n1. [缝缝补补再三年：MacBook Pro 13 寸 2015 款更换电池【保姆级教程】*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/a992k5ep/)\n2. [给步入老年的 macbook pro 做个大手术，换个“肾”（电池更换）*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/awxlmrwk/)\n3. [电池起鼓如同炸弹！Macbook Pro 更换电池详解及苹果官方使用建议*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/awxl4xl4/)\n4. [MacbookPro 2015 原装电池鼓了包，自己动手换电池 *电池*什么值得买 (smzdm.com)](https://post.smzdm.com/p/a78zn859/)\n\n选的电池： [京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)](https://item.jd.com/55306988976.html) 328\n\n### 回顾\n\n09 号开始上班了，前面三天在家开始收到了快递来的电池，SSD 固态硬盘，硬盘盒子。没有固态硬盘转接卡，所以只能先换电池了，结果换好电池后，触摸板和键盘失灵了，咨询了电池商家的客服，说是触摸板的排线因为换电池时候弯折过度失灵了，重新淘宝下单了触摸板排线，只能等硬盘接口转接卡和触摸板排线了。中间看买的固态硬盘价格降价了，没法保价就退了。重新思考了下，选了 512G 的固态和 2T 的机械硬盘，机械硬盘用来 TimeMachine 备份系统，这样不用重装系统了，直接用 TimeMachine 恢复就可以了。\n\n周五把 Mac Pro 也带回家了，可以备份系统，直接把这边高版本的系统恢复到 MacBook Pro 上去\n\n周六先收到了触摸板排线，就开始折腾替换排线，按电池的客服指导断开电池连接后更换了排线，电源链接那块扣的太紧，要通过卡片插入到缝隙中把三面往上撬开才容易扣出来，直接扣很费劲。更换排线后，重新安装电池链接，开机重试后键盘还不起作用，电池的客服小哥又指导重新安装下键盘排线的连接，就可以了，这时候就剩硬盘接口转接卡和两个硬盘了\n\n周日上午来硬盘先送到了，所以就先备份了 Mac Pro 和 MacBook Pro 两台机器上的系统，机械硬盘格式化分区后，选择一个分区为 TimeMachine 的备份分区，开始备份就好了，就是时间挺长的，MacBook Pro 的 110G 系统备份 2-3 个小时，Mac Pro 系统 220G 吧也备份了三个多小时（估计不准，经历了第一个时间备份后就没有在意了玩游戏去了）\n\n下午硬盘接口转接卡来了，谨慎起见还是先断开了电源链接，通过转接卡把新固态硬盘安装上去了，重新链接电源接口，开机启动都 OK，安装好后盖。插上备份系统的硬盘，按着 option 键 + 开机键，就进入恢复系统界面，可以选择从硬盘恢复系统，不过这时候找不到安装好的固态硬盘，是因为硬盘系统是没有格式化的，差点就重新拆机拿出来装到硬盘盒里去 Mac Pro 那边格式化去，还好恢复系统里面有硬盘管理工具，直接格式化加分区就好了，然后通过恢复到固态硬盘就好了。恢复时间也挺长的，不过恢复好了就是原来的环境设置了，不用重新安装需要的 APP 了\n\n从 06.04 看视频后，开始动心动念了，后续折腾了一周 到 06.12 才大体安装好，谢谢 买来电池的那家客服小哥，提供了后续的技术咨询服务！\n\n最终的更换配件列表\n\n1.  电池： [京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)](https://item.jd.com/55306988976.html) 价格：328\n1.  SSD 固态硬盘：[【雷克沙 NM620】雷克沙（Lexar）NM620 512G SSD 固态硬盘 M.2 接口（NVMe 协议）四通道高速 PCle 迅捷读写 办公游戏性能再升级【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100010130139.html) 319\n1.  转接口：[Acasis m.2 NVME 硬盘 SSD 转苹果笔记本 2013 2014 2015 2016 2017MacbookPro AIR 苹果硬盘转接卡固态转接头-tmall.com 天猫](https://detail.tmall.com/item.htm?id=631924720504&spm=a1z09.2.0.0.3b352e8dF3TKJt&_u=229svo2ce25) 11\n1.  机械硬盘：[【希捷（SEAGATE）酷鱼 2.5 英寸 SATA】希捷（SEAGATE） 笔记本硬盘 酷鱼机械硬盘一体机 2.5 英寸 SATA3.0 128MB 【ST2000LM015】2TB【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/10040776776977.html) 393\n1.  触摸板排线：[苹果原装拆触摸板排线 A1466A1502A1398A1706A1707A1708A1989A1990-淘宝网 (taobao.com)](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.3b352e8dF3TKJt&id=627952423568&_u=229svo289e0) 15\n1.  硬盘盒子：[【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100024210022.html#crumb-wrap) 83\n\n总计花费：1149 ，硬盘盒子原来是想替换下来的 SSD 按装进去当随身硬盘用的，发现接口不能用，看来还得买个转接卡才行了，弄完了月底使用来看没什么大问题，才开始感觉有点卡顿，后面就挺流畅的了\n","source":"_posts/MacBook-Pro-2015硬盘扩容升级.md","raw":"---\ntitle: MacBook_Pro_2015硬盘扩容升级\ndate: 2022-07-10 16:58:10\ntags: [Mac]\n---\n\nB 站看了个 自己动手拆卸 MacBook 笔记本换固态硬盘的的视频，看到手边自己的 MacBook Pro 2015 手痒难耐了，下单配件：SSD 固态硬盘，硬盘接口转接卡，笔记本电池等！开工\n\n<!-- more -->\n\n电脑硬件配置：[MacBook Pro (Retina 显示屏 13 英寸, 2015 年初) - 技术规格 (中国) (apple.com)](https://support.apple.com/kb/SP715?viewlocale=zh_CN&locale=zh_CN)\n\n### 安装硬盘\n\n1. [MacBook Pro 2013-2015 款 15 英寸更换 SSD 固态硬盘\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1HE411M7z2/)\n\n2. [【DIY】2013 - 2015 MacBook Pro NVMe SSD 升级详细教程\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1Va4y1v7oP/?spm_id_from=autoNext) **推荐**\n\n   1. Mac 系统的安装盘制作\n   2. 需要准备的转接头\n   3. 提到了更换后 SSD 的速度可以打到 1000M，更换前是 600M，性能提升不错\n\n   晚上开电脑看下配置，买个 SSD 来试试\n\n3. [【DIY】如何把丐版 MacBook Pro 变高配\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1D54y1D78z?spm_id_from=333.999.0.0)\n\n   这个要买主板更换了，感觉不合适还是买 SSD 硬盘更换吧\n\n4. 选硬盘：[2020 之 Macbook Pro DIY 升级 SSD 及 Time Machine 数据恢复 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/125702799)\n\n#### 预想的配件\n\n1. SSD 硬盘：[【三星 980】三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 980（MZ-V8V1T0BW）【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100018768506.html) 799\n2. 转接口：[NVMe PCIe M.2 转苹果 2013 2014 2015 款 Macbook Air Pro SSD 转接卡-淘宝网 (taobao.com)](https://item.taobao.com/item.htm?spm=a230r.1.14.217.20ad9190VqoSsd&id=586085643504&ns=1&abbucket=16#detail) 15\n3. 硬盘盒子：[【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100024210022.html#crumb-wrap) 99\n\n### 电池更换\n\n1. [缝缝补补再三年：MacBook Pro 13 寸 2015 款更换电池【保姆级教程】*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/a992k5ep/)\n2. [给步入老年的 macbook pro 做个大手术，换个“肾”（电池更换）*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/awxlmrwk/)\n3. [电池起鼓如同炸弹！Macbook Pro 更换电池详解及苹果官方使用建议*笔记本电脑*什么值得买 (smzdm.com)](https://post.smzdm.com/p/awxl4xl4/)\n4. [MacbookPro 2015 原装电池鼓了包，自己动手换电池 *电池*什么值得买 (smzdm.com)](https://post.smzdm.com/p/a78zn859/)\n\n选的电池： [京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)](https://item.jd.com/55306988976.html) 328\n\n### 回顾\n\n09 号开始上班了，前面三天在家开始收到了快递来的电池，SSD 固态硬盘，硬盘盒子。没有固态硬盘转接卡，所以只能先换电池了，结果换好电池后，触摸板和键盘失灵了，咨询了电池商家的客服，说是触摸板的排线因为换电池时候弯折过度失灵了，重新淘宝下单了触摸板排线，只能等硬盘接口转接卡和触摸板排线了。中间看买的固态硬盘价格降价了，没法保价就退了。重新思考了下，选了 512G 的固态和 2T 的机械硬盘，机械硬盘用来 TimeMachine 备份系统，这样不用重装系统了，直接用 TimeMachine 恢复就可以了。\n\n周五把 Mac Pro 也带回家了，可以备份系统，直接把这边高版本的系统恢复到 MacBook Pro 上去\n\n周六先收到了触摸板排线，就开始折腾替换排线，按电池的客服指导断开电池连接后更换了排线，电源链接那块扣的太紧，要通过卡片插入到缝隙中把三面往上撬开才容易扣出来，直接扣很费劲。更换排线后，重新安装电池链接，开机重试后键盘还不起作用，电池的客服小哥又指导重新安装下键盘排线的连接，就可以了，这时候就剩硬盘接口转接卡和两个硬盘了\n\n周日上午来硬盘先送到了，所以就先备份了 Mac Pro 和 MacBook Pro 两台机器上的系统，机械硬盘格式化分区后，选择一个分区为 TimeMachine 的备份分区，开始备份就好了，就是时间挺长的，MacBook Pro 的 110G 系统备份 2-3 个小时，Mac Pro 系统 220G 吧也备份了三个多小时（估计不准，经历了第一个时间备份后就没有在意了玩游戏去了）\n\n下午硬盘接口转接卡来了，谨慎起见还是先断开了电源链接，通过转接卡把新固态硬盘安装上去了，重新链接电源接口，开机启动都 OK，安装好后盖。插上备份系统的硬盘，按着 option 键 + 开机键，就进入恢复系统界面，可以选择从硬盘恢复系统，不过这时候找不到安装好的固态硬盘，是因为硬盘系统是没有格式化的，差点就重新拆机拿出来装到硬盘盒里去 Mac Pro 那边格式化去，还好恢复系统里面有硬盘管理工具，直接格式化加分区就好了，然后通过恢复到固态硬盘就好了。恢复时间也挺长的，不过恢复好了就是原来的环境设置了，不用重新安装需要的 APP 了\n\n从 06.04 看视频后，开始动心动念了，后续折腾了一周 到 06.12 才大体安装好，谢谢 买来电池的那家客服小哥，提供了后续的技术咨询服务！\n\n最终的更换配件列表\n\n1.  电池： [京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)](https://item.jd.com/55306988976.html) 价格：328\n1.  SSD 固态硬盘：[【雷克沙 NM620】雷克沙（Lexar）NM620 512G SSD 固态硬盘 M.2 接口（NVMe 协议）四通道高速 PCle 迅捷读写 办公游戏性能再升级【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100010130139.html) 319\n1.  转接口：[Acasis m.2 NVME 硬盘 SSD 转苹果笔记本 2013 2014 2015 2016 2017MacbookPro AIR 苹果硬盘转接卡固态转接头-tmall.com 天猫](https://detail.tmall.com/item.htm?id=631924720504&spm=a1z09.2.0.0.3b352e8dF3TKJt&_u=229svo2ce25) 11\n1.  机械硬盘：[【希捷（SEAGATE）酷鱼 2.5 英寸 SATA】希捷（SEAGATE） 笔记本硬盘 酷鱼机械硬盘一体机 2.5 英寸 SATA3.0 128MB 【ST2000LM015】2TB【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/10040776776977.html) 393\n1.  触摸板排线：[苹果原装拆触摸板排线 A1466A1502A1398A1706A1707A1708A1989A1990-淘宝网 (taobao.com)](https://item.taobao.com/item.htm?spm=a1z09.2.0.0.3b352e8dF3TKJt&id=627952423568&_u=229svo289e0) 15\n1.  硬盘盒子：[【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)](https://item.jd.com/100024210022.html#crumb-wrap) 83\n\n总计花费：1149 ，硬盘盒子原来是想替换下来的 SSD 按装进去当随身硬盘用的，发现接口不能用，看来还得买个转接卡才行了，弄完了月底使用来看没什么大问题，才开始感觉有点卡顿，后面就挺流畅的了\n","slug":"MacBook-Pro-2015硬盘扩容升级","published":1,"updated":"2022-07-10T09:41:49.000Z","_id":"cl5gh6gjk0000qfs6bycwhnfz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>B 站看了个 自己动手拆卸 MacBook 笔记本换固态硬盘的的视频，看到手边自己的 MacBook Pro 2015 手痒难耐了，下单配件：SSD 固态硬盘，硬盘接口转接卡，笔记本电池等！开工</p>\n<span id=\"more\"></span>\n\n<p>电脑硬件配置：<a href=\"https://support.apple.com/kb/SP715?viewlocale=zh_CN&locale=zh_CN\">MacBook Pro (Retina 显示屏 13 英寸, 2015 年初) - 技术规格 (中国) (apple.com)</a></p>\n<h3 id=\"安装硬盘\"><a href=\"#安装硬盘\" class=\"headerlink\" title=\"安装硬盘\"></a>安装硬盘</h3><ol>\n<li><p><a href=\"https://www.bilibili.com/video/BV1HE411M7z2/\">MacBook Pro 2013-2015 款 15 英寸更换 SSD 固态硬盘_哔哩哔哩_bilibili</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Va4y1v7oP/?spm_id_from=autoNext\">【DIY】2013 - 2015 MacBook Pro NVMe SSD 升级详细教程_哔哩哔哩_bilibili</a> <strong>推荐</strong></p>\n<ol>\n<li>Mac 系统的安装盘制作</li>\n<li>需要准备的转接头</li>\n<li>提到了更换后 SSD 的速度可以打到 1000M，更换前是 600M，性能提升不错</li>\n</ol>\n<p>晚上开电脑看下配置，买个 SSD 来试试</p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1D54y1D78z?spm_id_from=333.999.0.0\">【DIY】如何把丐版 MacBook Pro 变高配_哔哩哔哩_bilibili</a></p>\n<p>这个要买主板更换了，感觉不合适还是买 SSD 硬盘更换吧</p>\n</li>\n<li><p>选硬盘：<a href=\"https://zhuanlan.zhihu.com/p/125702799\">2020 之 Macbook Pro DIY 升级 SSD 及 Time Machine 数据恢复 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<h4 id=\"预想的配件\"><a href=\"#预想的配件\" class=\"headerlink\" title=\"预想的配件\"></a>预想的配件</h4><ol>\n<li>SSD 硬盘：<a href=\"https://item.jd.com/100018768506.html\">【三星 980】三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 980（MZ-V8V1T0BW）【行情 报价 价格 评测】-京东 (jd.com)</a> 799</li>\n<li>转接口：<a href=\"https://item.taobao.com/item.htm?spm=a230r.1.14.217.20ad9190VqoSsd&id=586085643504&ns=1&abbucket=16#detail\">NVMe PCIe M.2 转苹果 2013 2014 2015 款 Macbook Air Pro SSD 转接卡-淘宝网 (taobao.com)</a> 15</li>\n<li>硬盘盒子：<a href=\"https://item.jd.com/100024210022.html#crumb-wrap\">【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)</a> 99</li>\n</ol>\n<h3 id=\"电池更换\"><a href=\"#电池更换\" class=\"headerlink\" title=\"电池更换\"></a>电池更换</h3><ol>\n<li><a href=\"https://post.smzdm.com/p/a992k5ep/\">缝缝补补再三年：MacBook Pro 13 寸 2015 款更换电池【保姆级教程】<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/awxlmrwk/\">给步入老年的 macbook pro 做个大手术，换个“肾”（电池更换）<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/awxl4xl4/\">电池起鼓如同炸弹！Macbook Pro 更换电池详解及苹果官方使用建议<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/a78zn859/\">MacbookPro 2015 原装电池鼓了包，自己动手换电池 <em>电池</em>什么值得买 (smzdm.com)</a></li>\n</ol>\n<p>选的电池： <a href=\"https://item.jd.com/55306988976.html\">京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)</a> 328</p>\n<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>09 号开始上班了，前面三天在家开始收到了快递来的电池，SSD 固态硬盘，硬盘盒子。没有固态硬盘转接卡，所以只能先换电池了，结果换好电池后，触摸板和键盘失灵了，咨询了电池商家的客服，说是触摸板的排线因为换电池时候弯折过度失灵了，重新淘宝下单了触摸板排线，只能等硬盘接口转接卡和触摸板排线了。中间看买的固态硬盘价格降价了，没法保价就退了。重新思考了下，选了 512G 的固态和 2T 的机械硬盘，机械硬盘用来 TimeMachine 备份系统，这样不用重装系统了，直接用 TimeMachine 恢复就可以了。</p>\n<p>周五把 Mac Pro 也带回家了，可以备份系统，直接把这边高版本的系统恢复到 MacBook Pro 上去</p>\n<p>周六先收到了触摸板排线，就开始折腾替换排线，按电池的客服指导断开电池连接后更换了排线，电源链接那块扣的太紧，要通过卡片插入到缝隙中把三面往上撬开才容易扣出来，直接扣很费劲。更换排线后，重新安装电池链接，开机重试后键盘还不起作用，电池的客服小哥又指导重新安装下键盘排线的连接，就可以了，这时候就剩硬盘接口转接卡和两个硬盘了</p>\n<p>周日上午来硬盘先送到了，所以就先备份了 Mac Pro 和 MacBook Pro 两台机器上的系统，机械硬盘格式化分区后，选择一个分区为 TimeMachine 的备份分区，开始备份就好了，就是时间挺长的，MacBook Pro 的 110G 系统备份 2-3 个小时，Mac Pro 系统 220G 吧也备份了三个多小时（估计不准，经历了第一个时间备份后就没有在意了玩游戏去了）</p>\n<p>下午硬盘接口转接卡来了，谨慎起见还是先断开了电源链接，通过转接卡把新固态硬盘安装上去了，重新链接电源接口，开机启动都 OK，安装好后盖。插上备份系统的硬盘，按着 option 键 + 开机键，就进入恢复系统界面，可以选择从硬盘恢复系统，不过这时候找不到安装好的固态硬盘，是因为硬盘系统是没有格式化的，差点就重新拆机拿出来装到硬盘盒里去 Mac Pro 那边格式化去，还好恢复系统里面有硬盘管理工具，直接格式化加分区就好了，然后通过恢复到固态硬盘就好了。恢复时间也挺长的，不过恢复好了就是原来的环境设置了，不用重新安装需要的 APP 了</p>\n<p>从 06.04 看视频后，开始动心动念了，后续折腾了一周 到 06.12 才大体安装好，谢谢 买来电池的那家客服小哥，提供了后续的技术咨询服务！</p>\n<p>最终的更换配件列表</p>\n<ol>\n<li> 电池： <a href=\"https://item.jd.com/55306988976.html\">京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)</a> 价格：328</li>\n<li> SSD 固态硬盘：<a href=\"https://item.jd.com/100010130139.html\">【雷克沙 NM620】雷克沙（Lexar）NM620 512G SSD 固态硬盘 M.2 接口（NVMe 协议）四通道高速 PCle 迅捷读写 办公游戏性能再升级【行情 报价 价格 评测】-京东 (jd.com)</a> 319</li>\n<li> 转接口：<a href=\"https://detail.tmall.com/item.htm?id=631924720504&spm=a1z09.2.0.0.3b352e8dF3TKJt&_u=229svo2ce25\">Acasis m.2 NVME 硬盘 SSD 转苹果笔记本 2013 2014 2015 2016 2017MacbookPro AIR 苹果硬盘转接卡固态转接头-tmall.com 天猫</a> 11</li>\n<li> 机械硬盘：<a href=\"https://item.jd.com/10040776776977.html\">【希捷（SEAGATE）酷鱼 2.5 英寸 SATA】希捷（SEAGATE） 笔记本硬盘 酷鱼机械硬盘一体机 2.5 英寸 SATA3.0 128MB 【ST2000LM015】2TB【行情 报价 价格 评测】-京东 (jd.com)</a> 393</li>\n<li> 触摸板排线：<a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.3b352e8dF3TKJt&id=627952423568&_u=229svo289e0\">苹果原装拆触摸板排线 A1466A1502A1398A1706A1707A1708A1989A1990-淘宝网 (taobao.com)</a> 15</li>\n<li> 硬盘盒子：<a href=\"https://item.jd.com/100024210022.html#crumb-wrap\">【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)</a> 83</li>\n</ol>\n<p>总计花费：1149 ，硬盘盒子原来是想替换下来的 SSD 按装进去当随身硬盘用的，发现接口不能用，看来还得买个转接卡才行了，弄完了月底使用来看没什么大问题，才开始感觉有点卡顿，后面就挺流畅的了</p>\n","site":{"data":{}},"excerpt":"<p>B 站看了个 自己动手拆卸 MacBook 笔记本换固态硬盘的的视频，看到手边自己的 MacBook Pro 2015 手痒难耐了，下单配件：SSD 固态硬盘，硬盘接口转接卡，笔记本电池等！开工</p>","more":"<p>电脑硬件配置：<a href=\"https://support.apple.com/kb/SP715?viewlocale=zh_CN&locale=zh_CN\">MacBook Pro (Retina 显示屏 13 英寸, 2015 年初) - 技术规格 (中国) (apple.com)</a></p>\n<h3 id=\"安装硬盘\"><a href=\"#安装硬盘\" class=\"headerlink\" title=\"安装硬盘\"></a>安装硬盘</h3><ol>\n<li><p><a href=\"https://www.bilibili.com/video/BV1HE411M7z2/\">MacBook Pro 2013-2015 款 15 英寸更换 SSD 固态硬盘_哔哩哔哩_bilibili</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Va4y1v7oP/?spm_id_from=autoNext\">【DIY】2013 - 2015 MacBook Pro NVMe SSD 升级详细教程_哔哩哔哩_bilibili</a> <strong>推荐</strong></p>\n<ol>\n<li>Mac 系统的安装盘制作</li>\n<li>需要准备的转接头</li>\n<li>提到了更换后 SSD 的速度可以打到 1000M，更换前是 600M，性能提升不错</li>\n</ol>\n<p>晚上开电脑看下配置，买个 SSD 来试试</p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1D54y1D78z?spm_id_from=333.999.0.0\">【DIY】如何把丐版 MacBook Pro 变高配_哔哩哔哩_bilibili</a></p>\n<p>这个要买主板更换了，感觉不合适还是买 SSD 硬盘更换吧</p>\n</li>\n<li><p>选硬盘：<a href=\"https://zhuanlan.zhihu.com/p/125702799\">2020 之 Macbook Pro DIY 升级 SSD 及 Time Machine 数据恢复 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<h4 id=\"预想的配件\"><a href=\"#预想的配件\" class=\"headerlink\" title=\"预想的配件\"></a>预想的配件</h4><ol>\n<li>SSD 硬盘：<a href=\"https://item.jd.com/100018768506.html\">【三星 980】三星（SAMSUNG）1TB SSD 固态硬盘 M.2 接口(NVMe 协议) 980（MZ-V8V1T0BW）【行情 报价 价格 评测】-京东 (jd.com)</a> 799</li>\n<li>转接口：<a href=\"https://item.taobao.com/item.htm?spm=a230r.1.14.217.20ad9190VqoSsd&id=586085643504&ns=1&abbucket=16#detail\">NVMe PCIe M.2 转苹果 2013 2014 2015 款 Macbook Air Pro SSD 转接卡-淘宝网 (taobao.com)</a> 15</li>\n<li>硬盘盒子：<a href=\"https://item.jd.com/100024210022.html#crumb-wrap\">【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)</a> 99</li>\n</ol>\n<h3 id=\"电池更换\"><a href=\"#电池更换\" class=\"headerlink\" title=\"电池更换\"></a>电池更换</h3><ol>\n<li><a href=\"https://post.smzdm.com/p/a992k5ep/\">缝缝补补再三年：MacBook Pro 13 寸 2015 款更换电池【保姆级教程】<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/awxlmrwk/\">给步入老年的 macbook pro 做个大手术，换个“肾”（电池更换）<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/awxl4xl4/\">电池起鼓如同炸弹！Macbook Pro 更换电池详解及苹果官方使用建议<em>笔记本电脑</em>什么值得买 (smzdm.com)</a></li>\n<li><a href=\"https://post.smzdm.com/p/a78zn859/\">MacbookPro 2015 原装电池鼓了包，自己动手换电池 <em>电池</em>什么值得买 (smzdm.com)</a></li>\n</ol>\n<p>选的电池： <a href=\"https://item.jd.com/55306988976.html\">京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)</a> 328</p>\n<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>09 号开始上班了，前面三天在家开始收到了快递来的电池，SSD 固态硬盘，硬盘盒子。没有固态硬盘转接卡，所以只能先换电池了，结果换好电池后，触摸板和键盘失灵了，咨询了电池商家的客服，说是触摸板的排线因为换电池时候弯折过度失灵了，重新淘宝下单了触摸板排线，只能等硬盘接口转接卡和触摸板排线了。中间看买的固态硬盘价格降价了，没法保价就退了。重新思考了下，选了 512G 的固态和 2T 的机械硬盘，机械硬盘用来 TimeMachine 备份系统，这样不用重装系统了，直接用 TimeMachine 恢复就可以了。</p>\n<p>周五把 Mac Pro 也带回家了，可以备份系统，直接把这边高版本的系统恢复到 MacBook Pro 上去</p>\n<p>周六先收到了触摸板排线，就开始折腾替换排线，按电池的客服指导断开电池连接后更换了排线，电源链接那块扣的太紧，要通过卡片插入到缝隙中把三面往上撬开才容易扣出来，直接扣很费劲。更换排线后，重新安装电池链接，开机重试后键盘还不起作用，电池的客服小哥又指导重新安装下键盘排线的连接，就可以了，这时候就剩硬盘接口转接卡和两个硬盘了</p>\n<p>周日上午来硬盘先送到了，所以就先备份了 Mac Pro 和 MacBook Pro 两台机器上的系统，机械硬盘格式化分区后，选择一个分区为 TimeMachine 的备份分区，开始备份就好了，就是时间挺长的，MacBook Pro 的 110G 系统备份 2-3 个小时，Mac Pro 系统 220G 吧也备份了三个多小时（估计不准，经历了第一个时间备份后就没有在意了玩游戏去了）</p>\n<p>下午硬盘接口转接卡来了，谨慎起见还是先断开了电源链接，通过转接卡把新固态硬盘安装上去了，重新链接电源接口，开机启动都 OK，安装好后盖。插上备份系统的硬盘，按着 option 键 + 开机键，就进入恢复系统界面，可以选择从硬盘恢复系统，不过这时候找不到安装好的固态硬盘，是因为硬盘系统是没有格式化的，差点就重新拆机拿出来装到硬盘盒里去 Mac Pro 那边格式化去，还好恢复系统里面有硬盘管理工具，直接格式化加分区就好了，然后通过恢复到固态硬盘就好了。恢复时间也挺长的，不过恢复好了就是原来的环境设置了，不用重新安装需要的 APP 了</p>\n<p>从 06.04 看视频后，开始动心动念了，后续折腾了一周 到 06.12 才大体安装好，谢谢 买来电池的那家客服小哥，提供了后续的技术咨询服务！</p>\n<p>最终的更换配件列表</p>\n<ol>\n<li> 电池： <a href=\"https://item.jd.com/55306988976.html\">京歌宝 苹果笔记本电池 MacBook Pro A1502 电脑电池 A1493A1582 电池 13.3 英寸【图片 价格 品牌 报价】-京东 (jd.com)</a> 价格：328</li>\n<li> SSD 固态硬盘：<a href=\"https://item.jd.com/100010130139.html\">【雷克沙 NM620】雷克沙（Lexar）NM620 512G SSD 固态硬盘 M.2 接口（NVMe 协议）四通道高速 PCle 迅捷读写 办公游戏性能再升级【行情 报价 价格 评测】-京东 (jd.com)</a> 319</li>\n<li> 转接口：<a href=\"https://detail.tmall.com/item.htm?id=631924720504&spm=a1z09.2.0.0.3b352e8dF3TKJt&_u=229svo2ce25\">Acasis m.2 NVME 硬盘 SSD 转苹果笔记本 2013 2014 2015 2016 2017MacbookPro AIR 苹果硬盘转接卡固态转接头-tmall.com 天猫</a> 11</li>\n<li> 机械硬盘：<a href=\"https://item.jd.com/10040776776977.html\">【希捷（SEAGATE）酷鱼 2.5 英寸 SATA】希捷（SEAGATE） 笔记本硬盘 酷鱼机械硬盘一体机 2.5 英寸 SATA3.0 128MB 【ST2000LM015】2TB【行情 报价 价格 评测】-京东 (jd.com)</a> 393</li>\n<li> 触摸板排线：<a href=\"https://item.taobao.com/item.htm?spm=a1z09.2.0.0.3b352e8dF3TKJt&id=627952423568&_u=229svo289e0\">苹果原装拆触摸板排线 A1466A1502A1398A1706A1707A1708A1989A1990-淘宝网 (taobao.com)</a> 15</li>\n<li> 硬盘盒子：<a href=\"https://item.jd.com/100024210022.html#crumb-wrap\">【绿联 10902】绿联 M.2 NVMe 移动硬盘盒 Type-C3.2 接口 SSD 固态硬盘盒子笔记本电脑 M2 全铝外置盒 10902【行情 报价 价格 评测】-京东 (jd.com)</a> 83</li>\n</ol>\n<p>总计花费：1149 ，硬盘盒子原来是想替换下来的 SSD 按装进去当随身硬盘用的，发现接口不能用，看来还得买个转接卡才行了，弄完了月底使用来看没什么大问题，才开始感觉有点卡顿，后面就挺流畅的了</p>"},{"title":"极速 ChatGPT API 的接入指南","date":"2023-03-14T08:54:07.000Z","_content":"\n## 账号及秘钥申请\n\n不用注册账号，不用验证手机号码，9.9一步到位了！1分钟搞定\n\n一个可以购买 OpenAI API Key 的服务：[https://openaikey.xyz](https://openaikey.xyz/)，还聚合了许多能够使用 API Key 的工具\n\n> [Dott 在 Twitter: \"发现一个可以购买 OpenAI API Key 的服务：https://t.co/dgR9N6W2J8，还聚合了许多能够使用 API Key 的工具。 现在直接买 Key 的成本比付费 API 还低，买了二十个用来刷 GPT Index 打造个人智脑…… 推荐一下给国内注册账号有困难但又想使用基于 API Key 的服务的同学，挺方便。\" / Twitter](https://twitter.com/DottChen/status/1633765795946987522)\n\n直接购买了一个9.9，购买流程很顺畅，付款后直接发邮件，通过邮件中的  license key 在网站中转换出新注册的 openai的账号和  API Key，可以通过邮件直接找回账号信息和密码\n\n![TinySnap-2023-03-14-11.36.39 (1)](http://upic.vivife.com/uPic/TinySnap-2023-03-14-11.36.39%2520(1).png)\n\n## 官网域名使用指南\n\nAPI 调用的官方域名是这样的：<https://api.openai.com/v1/chat/completions> ，国内调用会超时的，所以要用其他方法优化下\n\n1. [使用 Cloudflare Workers 解决 OpenAI 和 ChatGPT 的 API 无法访问的问题 · noobnooc/noobnooc · Discussion #9 (github.com)](https://github.com/noobnooc/noobnooc/discussions/9)\n\n   > 该方案的主要思路是使用 Cloudflare 的 Workers 来代理 OpenAI 的 API 地址，配合自己的域名即可在境内实现访问。因为 Cloudflare Workers 有每天免费 10 万次的请求额度，也有可以免费注册的域名，所以几乎可以说是零成本。而且该方法理论上支持所有被认证的网站，而不只是 OpenAI\n\n   正好自己 blog 部署到了 Cloudflare 上了，直接按教程配置了一个专门的域名openai.a.com 作为 api 的代理，在苹果手机上  配置 chatGPT-Siri 项目时候使用了这个域名，证明可用\n\n有了 API Key 和代理域名 openai.a.com 就可以极速入手使用下面的的开源项目了，总共分两步\n\n1. 修改 API Key 成自己的\n2. 修改 请求api的域名为自己的代理域名 openai.a.com\n3. 运行项目\n\n## 相关APP 服务\n\n### 在线服务\n\n1. [BAI Chat (theb.ai)](https://chat.theb.ai/#/chat/1002)\n\n### 开源\n\n1. [Chaty – 一站式chatGPT百宝箱 chaty/README.zh-CN.md at main · cosin2077/chaty · GitHub](https://github.com/cosin2077/chaty/blob/main/README.zh-CN.md)\n\n   > Chaty可以让您：\n   >\n   > - 拥有一个chatGPT命令行机器人;\n   > - 部署ChatGPT Web服务;\n   > - 部署基于ChatGPT的NodeJS API 服务;\n   > - 部署微信ChatGPT机器人;\n   > - 部署Telegram ChatGPT机器人;\n   > - 部署Discord ChatGPT机器人;\n   > - 更多服务正在不断开发中!\n   >\n   > 让Chaty助力您探索ChatGPT的世界。\n\n   对前端很友好，会npm就可以了\n\n   设置自动的代理域名无效，后续再看下\n\n2. [ChatGPT-Siri/README-zh_CN.md at main · Yue-Yang/ChatGPT-Siri · GitHub](https://github.com/Yue-Yang/ChatGPT-Siri/blob/main/README-zh_CN.md)\n\n   苹果手机上通过捷径 来使用 chatGPT，编辑这个捷径\n          1. 配置 API Key\n          2. 修改api.openai.com 改成自己申请的代理 openai.a.com\n\n   保存后点击捷径就会弹出 输入框了\n\n   ![15811678782879_.pic](http://upic.vivife.com/uPic/15811678782879_.pic.jpg)\n\n   后续：语音调起还没学会\n","source":"_posts/极速ChatGPT-API的接入指南.md","raw":"---\ntitle: 极速 ChatGPT API 的接入指南\ndate: 2023-03-14 16:54:07\ntags:\n---\n\n## 账号及秘钥申请\n\n不用注册账号，不用验证手机号码，9.9一步到位了！1分钟搞定\n\n一个可以购买 OpenAI API Key 的服务：[https://openaikey.xyz](https://openaikey.xyz/)，还聚合了许多能够使用 API Key 的工具\n\n> [Dott 在 Twitter: \"发现一个可以购买 OpenAI API Key 的服务：https://t.co/dgR9N6W2J8，还聚合了许多能够使用 API Key 的工具。 现在直接买 Key 的成本比付费 API 还低，买了二十个用来刷 GPT Index 打造个人智脑…… 推荐一下给国内注册账号有困难但又想使用基于 API Key 的服务的同学，挺方便。\" / Twitter](https://twitter.com/DottChen/status/1633765795946987522)\n\n直接购买了一个9.9，购买流程很顺畅，付款后直接发邮件，通过邮件中的  license key 在网站中转换出新注册的 openai的账号和  API Key，可以通过邮件直接找回账号信息和密码\n\n![TinySnap-2023-03-14-11.36.39 (1)](http://upic.vivife.com/uPic/TinySnap-2023-03-14-11.36.39%2520(1).png)\n\n## 官网域名使用指南\n\nAPI 调用的官方域名是这样的：<https://api.openai.com/v1/chat/completions> ，国内调用会超时的，所以要用其他方法优化下\n\n1. [使用 Cloudflare Workers 解决 OpenAI 和 ChatGPT 的 API 无法访问的问题 · noobnooc/noobnooc · Discussion #9 (github.com)](https://github.com/noobnooc/noobnooc/discussions/9)\n\n   > 该方案的主要思路是使用 Cloudflare 的 Workers 来代理 OpenAI 的 API 地址，配合自己的域名即可在境内实现访问。因为 Cloudflare Workers 有每天免费 10 万次的请求额度，也有可以免费注册的域名，所以几乎可以说是零成本。而且该方法理论上支持所有被认证的网站，而不只是 OpenAI\n\n   正好自己 blog 部署到了 Cloudflare 上了，直接按教程配置了一个专门的域名openai.a.com 作为 api 的代理，在苹果手机上  配置 chatGPT-Siri 项目时候使用了这个域名，证明可用\n\n有了 API Key 和代理域名 openai.a.com 就可以极速入手使用下面的的开源项目了，总共分两步\n\n1. 修改 API Key 成自己的\n2. 修改 请求api的域名为自己的代理域名 openai.a.com\n3. 运行项目\n\n## 相关APP 服务\n\n### 在线服务\n\n1. [BAI Chat (theb.ai)](https://chat.theb.ai/#/chat/1002)\n\n### 开源\n\n1. [Chaty – 一站式chatGPT百宝箱 chaty/README.zh-CN.md at main · cosin2077/chaty · GitHub](https://github.com/cosin2077/chaty/blob/main/README.zh-CN.md)\n\n   > Chaty可以让您：\n   >\n   > - 拥有一个chatGPT命令行机器人;\n   > - 部署ChatGPT Web服务;\n   > - 部署基于ChatGPT的NodeJS API 服务;\n   > - 部署微信ChatGPT机器人;\n   > - 部署Telegram ChatGPT机器人;\n   > - 部署Discord ChatGPT机器人;\n   > - 更多服务正在不断开发中!\n   >\n   > 让Chaty助力您探索ChatGPT的世界。\n\n   对前端很友好，会npm就可以了\n\n   设置自动的代理域名无效，后续再看下\n\n2. [ChatGPT-Siri/README-zh_CN.md at main · Yue-Yang/ChatGPT-Siri · GitHub](https://github.com/Yue-Yang/ChatGPT-Siri/blob/main/README-zh_CN.md)\n\n   苹果手机上通过捷径 来使用 chatGPT，编辑这个捷径\n          1. 配置 API Key\n          2. 修改api.openai.com 改成自己申请的代理 openai.a.com\n\n   保存后点击捷径就会弹出 输入框了\n\n   ![15811678782879_.pic](http://upic.vivife.com/uPic/15811678782879_.pic.jpg)\n\n   后续：语音调起还没学会\n","slug":"极速ChatGPT-API的接入指南","published":1,"updated":"2023-03-14T08:55:50.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf80qri200001f989vct2f2j","content":"<h2 id=\"账号及秘钥申请\"><a href=\"#账号及秘钥申请\" class=\"headerlink\" title=\"账号及秘钥申请\"></a>账号及秘钥申请</h2><p>不用注册账号，不用验证手机号码，9.9一步到位了！1分钟搞定</p>\n<p>一个可以购买 OpenAI API Key 的服务：<a href=\"https://openaikey.xyz/\">https://openaikey.xyz</a>，还聚合了许多能够使用 API Key 的工具</p>\n<blockquote>\n<p><a href=\"https://twitter.com/DottChen/status/1633765795946987522\">Dott 在 Twitter: “发现一个可以购买 OpenAI API Key 的服务：https://t.co/dgR9N6W2J8，还聚合了许多能够使用 API Key 的工具。 现在直接买 Key 的成本比付费 API 还低，买了二十个用来刷 GPT Index 打造个人智脑…… 推荐一下给国内注册账号有困难但又想使用基于 API Key 的服务的同学，挺方便。” / Twitter</a></p>\n</blockquote>\n<p>直接购买了一个9.9，购买流程很顺畅，付款后直接发邮件，通过邮件中的  license key 在网站中转换出新注册的 openai的账号和  API Key，可以通过邮件直接找回账号信息和密码</p>\n<p><img src=\"http://upic.vivife.com/uPic/TinySnap-2023-03-14-11.36.39%2520(1).png\" alt=\"TinySnap-2023-03-14-11.36.39 (1)\"></p>\n<h2 id=\"官网域名使用指南\"><a href=\"#官网域名使用指南\" class=\"headerlink\" title=\"官网域名使用指南\"></a>官网域名使用指南</h2><p>API 调用的官方域名是这样的：<a href=\"https://api.openai.com/v1/chat/completions\">https://api.openai.com/v1/chat/completions</a> ，国内调用会超时的，所以要用其他方法优化下</p>\n<ol>\n<li><p><a href=\"https://github.com/noobnooc/noobnooc/discussions/9\">使用 Cloudflare Workers 解决 OpenAI 和 ChatGPT 的 API 无法访问的问题 · noobnooc/noobnooc · Discussion #9 (github.com)</a></p>\n<blockquote>\n<p>该方案的主要思路是使用 Cloudflare 的 Workers 来代理 OpenAI 的 API 地址，配合自己的域名即可在境内实现访问。因为 Cloudflare Workers 有每天免费 10 万次的请求额度，也有可以免费注册的域名，所以几乎可以说是零成本。而且该方法理论上支持所有被认证的网站，而不只是 OpenAI</p>\n</blockquote>\n<p>正好自己 blog 部署到了 Cloudflare 上了，直接按教程配置了一个专门的域名openai.a.com 作为 api 的代理，在苹果手机上  配置 chatGPT-Siri 项目时候使用了这个域名，证明可用</p>\n</li>\n</ol>\n<p>有了 API Key 和代理域名 openai.a.com 就可以极速入手使用下面的的开源项目了，总共分两步</p>\n<ol>\n<li>修改 API Key 成自己的</li>\n<li>修改 请求api的域名为自己的代理域名 openai.a.com</li>\n<li>运行项目</li>\n</ol>\n<h2 id=\"相关APP-服务\"><a href=\"#相关APP-服务\" class=\"headerlink\" title=\"相关APP 服务\"></a>相关APP 服务</h2><h3 id=\"在线服务\"><a href=\"#在线服务\" class=\"headerlink\" title=\"在线服务\"></a>在线服务</h3><ol>\n<li><a href=\"https://chat.theb.ai/#/chat/1002\">BAI Chat (theb.ai)</a></li>\n</ol>\n<h3 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h3><ol>\n<li><p><a href=\"https://github.com/cosin2077/chaty/blob/main/README.zh-CN.md\">Chaty – 一站式chatGPT百宝箱 chaty/README.zh-CN.md at main · cosin2077/chaty · GitHub</a></p>\n<blockquote>\n<p>Chaty可以让您：</p>\n<ul>\n<li>拥有一个chatGPT命令行机器人;</li>\n<li>部署ChatGPT Web服务;</li>\n<li>部署基于ChatGPT的NodeJS API 服务;</li>\n<li>部署微信ChatGPT机器人;</li>\n<li>部署Telegram ChatGPT机器人;</li>\n<li>部署Discord ChatGPT机器人;</li>\n<li>更多服务正在不断开发中!</li>\n</ul>\n<p>让Chaty助力您探索ChatGPT的世界。</p>\n</blockquote>\n<p>对前端很友好，会npm就可以了</p>\n<p>设置自动的代理域名无效，后续再看下</p>\n</li>\n<li><p><a href=\"https://github.com/Yue-Yang/ChatGPT-Siri/blob/main/README-zh_CN.md\">ChatGPT-Siri/README-zh_CN.md at main · Yue-Yang/ChatGPT-Siri · GitHub</a></p>\n<p>苹果手机上通过捷径 来使用 chatGPT，编辑这个捷径</p>\n<pre><code>   1. 配置 API Key\n   2. 修改api.openai.com 改成自己申请的代理 openai.a.com\n</code></pre>\n<p>保存后点击捷径就会弹出 输入框了</p>\n<p><img src=\"http://upic.vivife.com/uPic/15811678782879_.pic.jpg\" alt=\"15811678782879_.pic\"></p>\n<p>后续：语音调起还没学会</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"账号及秘钥申请\"><a href=\"#账号及秘钥申请\" class=\"headerlink\" title=\"账号及秘钥申请\"></a>账号及秘钥申请</h2><p>不用注册账号，不用验证手机号码，9.9一步到位了！1分钟搞定</p>\n<p>一个可以购买 OpenAI API Key 的服务：<a href=\"https://openaikey.xyz/\">https://openaikey.xyz</a>，还聚合了许多能够使用 API Key 的工具</p>\n<blockquote>\n<p><a href=\"https://twitter.com/DottChen/status/1633765795946987522\">Dott 在 Twitter: “发现一个可以购买 OpenAI API Key 的服务：https://t.co/dgR9N6W2J8，还聚合了许多能够使用 API Key 的工具。 现在直接买 Key 的成本比付费 API 还低，买了二十个用来刷 GPT Index 打造个人智脑…… 推荐一下给国内注册账号有困难但又想使用基于 API Key 的服务的同学，挺方便。” / Twitter</a></p>\n</blockquote>\n<p>直接购买了一个9.9，购买流程很顺畅，付款后直接发邮件，通过邮件中的  license key 在网站中转换出新注册的 openai的账号和  API Key，可以通过邮件直接找回账号信息和密码</p>\n<p><img src=\"http://upic.vivife.com/uPic/TinySnap-2023-03-14-11.36.39%2520(1).png\" alt=\"TinySnap-2023-03-14-11.36.39 (1)\"></p>\n<h2 id=\"官网域名使用指南\"><a href=\"#官网域名使用指南\" class=\"headerlink\" title=\"官网域名使用指南\"></a>官网域名使用指南</h2><p>API 调用的官方域名是这样的：<a href=\"https://api.openai.com/v1/chat/completions\">https://api.openai.com/v1/chat/completions</a> ，国内调用会超时的，所以要用其他方法优化下</p>\n<ol>\n<li><p><a href=\"https://github.com/noobnooc/noobnooc/discussions/9\">使用 Cloudflare Workers 解决 OpenAI 和 ChatGPT 的 API 无法访问的问题 · noobnooc/noobnooc · Discussion #9 (github.com)</a></p>\n<blockquote>\n<p>该方案的主要思路是使用 Cloudflare 的 Workers 来代理 OpenAI 的 API 地址，配合自己的域名即可在境内实现访问。因为 Cloudflare Workers 有每天免费 10 万次的请求额度，也有可以免费注册的域名，所以几乎可以说是零成本。而且该方法理论上支持所有被认证的网站，而不只是 OpenAI</p>\n</blockquote>\n<p>正好自己 blog 部署到了 Cloudflare 上了，直接按教程配置了一个专门的域名openai.a.com 作为 api 的代理，在苹果手机上  配置 chatGPT-Siri 项目时候使用了这个域名，证明可用</p>\n</li>\n</ol>\n<p>有了 API Key 和代理域名 openai.a.com 就可以极速入手使用下面的的开源项目了，总共分两步</p>\n<ol>\n<li>修改 API Key 成自己的</li>\n<li>修改 请求api的域名为自己的代理域名 openai.a.com</li>\n<li>运行项目</li>\n</ol>\n<h2 id=\"相关APP-服务\"><a href=\"#相关APP-服务\" class=\"headerlink\" title=\"相关APP 服务\"></a>相关APP 服务</h2><h3 id=\"在线服务\"><a href=\"#在线服务\" class=\"headerlink\" title=\"在线服务\"></a>在线服务</h3><ol>\n<li><a href=\"https://chat.theb.ai/#/chat/1002\">BAI Chat (theb.ai)</a></li>\n</ol>\n<h3 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h3><ol>\n<li><p><a href=\"https://github.com/cosin2077/chaty/blob/main/README.zh-CN.md\">Chaty – 一站式chatGPT百宝箱 chaty/README.zh-CN.md at main · cosin2077/chaty · GitHub</a></p>\n<blockquote>\n<p>Chaty可以让您：</p>\n<ul>\n<li>拥有一个chatGPT命令行机器人;</li>\n<li>部署ChatGPT Web服务;</li>\n<li>部署基于ChatGPT的NodeJS API 服务;</li>\n<li>部署微信ChatGPT机器人;</li>\n<li>部署Telegram ChatGPT机器人;</li>\n<li>部署Discord ChatGPT机器人;</li>\n<li>更多服务正在不断开发中!</li>\n</ul>\n<p>让Chaty助力您探索ChatGPT的世界。</p>\n</blockquote>\n<p>对前端很友好，会npm就可以了</p>\n<p>设置自动的代理域名无效，后续再看下</p>\n</li>\n<li><p><a href=\"https://github.com/Yue-Yang/ChatGPT-Siri/blob/main/README-zh_CN.md\">ChatGPT-Siri/README-zh_CN.md at main · Yue-Yang/ChatGPT-Siri · GitHub</a></p>\n<p>苹果手机上通过捷径 来使用 chatGPT，编辑这个捷径</p>\n<pre><code>   1. 配置 API Key\n   2. 修改api.openai.com 改成自己申请的代理 openai.a.com\n</code></pre>\n<p>保存后点击捷径就会弹出 输入框了</p>\n<p><img src=\"http://upic.vivife.com/uPic/15811678782879_.pic.jpg\" alt=\"15811678782879_.pic\"></p>\n<p>后续：语音调起还没学会</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckymlwo0l00077uo0c32q9qyk","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo11000o7uo00uha041r"},{"post_id":"ckymlwo0n00097uo0bd2h0mof","category_id":"ckymlwo0y000j7uo0bfflhozt","_id":"ckymlwo15000v7uo0ai1ah1rj"},{"post_id":"ckymlwo0b00017uo040q9ayie","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1800107uo0cy822832"},{"post_id":"ckymlwo0b00017uo040q9ayie","category_id":"ckymlwo12000p7uo05eda3zbr","_id":"ckymlwo1a00147uo0e5pw3gi4"},{"post_id":"ckymlwo16000y7uo0b8ubec38","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1b00177uo09ira5jlc"},{"post_id":"ckymlwo0s000d7uo0aqc8bovs","category_id":"ckymlwo15000w7uo028gd9fzr","_id":"ckymlwo1d001c7uo08l17eny8"},{"post_id":"ckymlwo17000z7uo08x6r5naw","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1e001e7uo0ecigbu4v"},{"post_id":"ckymlwo1900127uo0ax9ybu8n","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1f001g7uo0hu0e30jl"},{"post_id":"ckymlwo1a00167uo0d7stc4lv","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1i001i7uo07qd846m3"},{"post_id":"ckymlwo0g00037uo074ksce2v","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1j001k7uo06439ek0h"},{"post_id":"ckymlwo0g00037uo074ksce2v","category_id":"ckymlwo1800117uo0539c8nqu","_id":"ckymlwo1j001m7uo0avpu09m1"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","category_id":"ckymlwo15000w7uo028gd9fzr","_id":"ckymlwo1k001p7uo020nuerww"},{"post_id":"ckymlwo0t000e7uo06c256u7z","category_id":"ckymlwo15000w7uo028gd9fzr","_id":"ckymlwo1l001s7uo0allv3fkz"},{"post_id":"ckymlwo0v000h7uo05tip62x0","category_id":"ckymlwo1e001f7uo0bbhnh9ba","_id":"ckymlwo1l001v7uo07zws2dyv"},{"post_id":"ckymlwo0w000i7uo069phdts0","category_id":"ckymlwo1i001j7uo0amldge5h","_id":"ckymlwo1m001y7uo07txh3jlh"},{"post_id":"ckymlwo0z000l7uo0425hgdy6","category_id":"ckymlwo1i001j7uo0amldge5h","_id":"ckymlwo1n00207uo0hnhnhiez"},{"post_id":"ckymlwo11000n7uo0c0ra8zaq","category_id":"ckymlwo1i001j7uo0amldge5h","_id":"ckymlwo1o00237uo0h03r02ll"},{"post_id":"ckymlwo13000s7uo00ymycd72","category_id":"ckymlwo1i001j7uo0amldge5h","_id":"ckymlwo1p00257uo00cr368r2"},{"post_id":"ckymlwo14000u7uo0cfwnd1ea","category_id":"ckymlwo0i00047uo00hcp4vix","_id":"ckymlwo1q002a7uo0c0pcgwde"},{"post_id":"ckymlwo14000u7uo0cfwnd1ea","category_id":"ckymlwo1o00227uo030tl5eza","_id":"ckymlwo1q002b7uo03q5x6xnq"}],"PostTag":[{"post_id":"ckymlwo0b00017uo040q9ayie","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo10000m7uo01qy0cfag"},{"post_id":"ckymlwo0b00017uo040q9ayie","tag_id":"ckymlwo0p000c7uo04ybr0z8i","_id":"ckymlwo12000q7uo0hxh81zn8"},{"post_id":"ckymlwo0b00017uo040q9ayie","tag_id":"ckymlwo0u000g7uo08syv1uvw","_id":"ckymlwo14000t7uo07pac1zhg"},{"post_id":"ckymlwo0g00037uo074ksce2v","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo1a00157uo0cpzha500"},{"post_id":"ckymlwo0g00037uo074ksce2v","tag_id":"ckymlwo12000r7uo051czcgqi","_id":"ckymlwo1c00187uo0c5ljenis"},{"post_id":"ckymlwo0g00037uo074ksce2v","tag_id":"ckymlwo16000x7uo08c6zg3mh","_id":"ckymlwo1d001d7uo0hupd6zxm"},{"post_id":"ckymlwo0l00077uo0c32q9qyk","tag_id":"ckymlwo1900137uo0g2webcgb","_id":"ckymlwo1k001n7uo01wbyhi09"},{"post_id":"ckymlwo0l00077uo0c32q9qyk","tag_id":"ckymlwo1d001b7uo08qek7j8q","_id":"ckymlwo1k001q7uo01nvs916g"},{"post_id":"ckymlwo0l00077uo0c32q9qyk","tag_id":"ckymlwo1f001h7uo05qrwh0qk","_id":"ckymlwo1l001t7uo00hqzbe29"},{"post_id":"ckymlwo0n00097uo0bd2h0mof","tag_id":"ckymlwo1j001l7uo015rx13th","_id":"ckymlwo1m001w7uo0g1oz9x71"},{"post_id":"ckymlwo0s000d7uo0aqc8bovs","tag_id":"ckymlwo1k001r7uo09mn83o4x","_id":"ckymlwo1p00267uo00zbn0jlo"},{"post_id":"ckymlwo0s000d7uo0aqc8bovs","tag_id":"ckymlwo1m001x7uo09hzv5ne1","_id":"ckymlwo1p00277uo078lm6dja"},{"post_id":"ckymlwo0s000d7uo0aqc8bovs","tag_id":"ckymlwo1n00217uo0ax57ae2d","_id":"ckymlwo1q00297uo0em247wgu"},{"post_id":"ckymlwo0t000e7uo06c256u7z","tag_id":"ckymlwo1k001r7uo09mn83o4x","_id":"ckymlwo1r002e7uo0finxhji8"},{"post_id":"ckymlwo0t000e7uo06c256u7z","tag_id":"ckymlwo1m001x7uo09hzv5ne1","_id":"ckymlwo1s002f7uo097sj62qn"},{"post_id":"ckymlwo0t000e7uo06c256u7z","tag_id":"ckymlwo1n00217uo0ax57ae2d","_id":"ckymlwo1s002h7uo02mu76yf0"},{"post_id":"ckymlwo0v000h7uo05tip62x0","tag_id":"ckymlwo1r002d7uo0etds94ru","_id":"ckymlwo1t002j7uo02sjd206c"},{"post_id":"ckymlwo0v000h7uo05tip62x0","tag_id":"ckymlwo1s002g7uo07o9o02o2","_id":"ckymlwo1t002k7uo06mbb8wnj"},{"post_id":"ckymlwo0w000i7uo069phdts0","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo1u002n7uo09pwr1af6"},{"post_id":"ckymlwo0w000i7uo069phdts0","tag_id":"ckymlwo1s002i7uo00uareq7a","_id":"ckymlwo1u002o7uo0dryfevgc"},{"post_id":"ckymlwo0w000i7uo069phdts0","tag_id":"ckymlwo1t002l7uo02wg7dlfq","_id":"ckymlwo1u002q7uo0gu985grx"},{"post_id":"ckymlwo0z000l7uo0425hgdy6","tag_id":"ckymlwo1t002m7uo0ados8tly","_id":"ckymlwo1v002r7uo09h9pdf4t"},{"post_id":"ckymlwo0z000l7uo0425hgdy6","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo1v002t7uo01me58kaf"},{"post_id":"ckymlwo11000n7uo0c0ra8zaq","tag_id":"ckymlwo1u002p7uo01sadbra9","_id":"ckymlwo1v002u7uo0202oam2u"},{"post_id":"ckymlwo13000s7uo00ymycd72","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo1w002x7uo0ch408xdk"},{"post_id":"ckymlwo13000s7uo00ymycd72","tag_id":"ckymlwo1s002i7uo00uareq7a","_id":"ckymlwo1w002y7uo09axpdvt5"},{"post_id":"ckymlwo13000s7uo00ymycd72","tag_id":"ckymlwo1t002l7uo02wg7dlfq","_id":"ckymlwo1x00307uo05jgog9ff"},{"post_id":"ckymlwo14000u7uo0cfwnd1ea","tag_id":"ckymlwo1w002w7uo0c1iectu5","_id":"ckymlwo1y00337uo0d7sz3ul5"},{"post_id":"ckymlwo14000u7uo0cfwnd1ea","tag_id":"ckymlwo1x002z7uo09kgm16ks","_id":"ckymlwo1y00347uo069gi1ch4"},{"post_id":"ckymlwo14000u7uo0cfwnd1ea","tag_id":"ckymlwo1x00317uo07o100m0v","_id":"ckymlwo1y00367uo0013w857c"},{"post_id":"ckymlwo16000y7uo0b8ubec38","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo1z00397uo02z29byig"},{"post_id":"ckymlwo16000y7uo0b8ubec38","tag_id":"ckymlwo1x00327uo0ahvhaehv","_id":"ckymlwo20003a7uo0glj3hjqb"},{"post_id":"ckymlwo16000y7uo0b8ubec38","tag_id":"ckymlwo1y00357uo02zddcn90","_id":"ckymlwo20003c7uo0bncgcpr1"},{"post_id":"ckymlwo16000y7uo0b8ubec38","tag_id":"ckymlwo1z00377uo0gb8rft0g","_id":"ckymlwo20003d7uo05bsm6zam"},{"post_id":"ckymlwo17000z7uo08x6r5naw","tag_id":"ckymlwo1z00387uo0022r80fr","_id":"ckymlwo21003f7uo02cknd5dc"},{"post_id":"ckymlwo17000z7uo08x6r5naw","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo21003g7uo09bochvr0"},{"post_id":"ckymlwo17000z7uo08x6r5naw","tag_id":"ckymlwo20003b7uo0di53dknj","_id":"ckymlwo22003i7uo0glq3gbuf"},{"post_id":"ckymlwo1900127uo0ax9ybu8n","tag_id":"ckymlwo20003e7uo0b42eg5de","_id":"ckymlwo22003k7uo0dc2q51ik"},{"post_id":"ckymlwo1900127uo0ax9ybu8n","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo22003l7uo01spn9q85"},{"post_id":"ckymlwo1900127uo0ax9ybu8n","tag_id":"ckymlwo21003h7uo0b4isaiet","_id":"ckymlwo23003n7uo0eo6s76lx"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo20003e7uo0b42eg5de","_id":"ckymlwo25003r7uo0cwkvh58o"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo0j00057uo0ds2qdki0","_id":"ckymlwo25003s7uo02nsmct8h"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo1n00217uo0ax57ae2d","_id":"ckymlwo25003t7uo0aep42pa4"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo23003o7uo04op83snq","_id":"ckymlwo26003u7uo0h8atc1bt"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo24003p7uo0fz945v5a","_id":"ckymlwo26003v7uo03lcrert1"},{"post_id":"ckymlwo1c00197uo0cvgzcfgd","tag_id":"ckymlwo24003q7uo0dqxw8xd9","_id":"ckymlwo26003w7uo08rn7cr69"},{"post_id":"cl5gh6gjk0000qfs6bycwhnfz","tag_id":"ckymlwo0p000c7uo04ybr0z8i","_id":"cl5gh7fih0000qps64bbi22au"}],"Tag":[{"name":"F2E","_id":"ckymlwo0j00057uo0ds2qdki0"},{"name":"Mac","_id":"ckymlwo0p000c7uo04ybr0z8i"},{"name":"iTerm","_id":"ckymlwo0u000g7uo08syv1uvw"},{"name":"React","_id":"ckymlwo12000r7uo051czcgqi"},{"name":"Redux","_id":"ckymlwo16000x7uo08c6zg3mh"},{"name":"Typescript","_id":"ckymlwo1900137uo0g2webcgb"},{"name":"CheatSheet","_id":"ckymlwo1d001b7uo08qek7j8q"},{"name":"beginer","_id":"ckymlwo1f001h7uo05qrwh0qk"},{"name":"docker","_id":"ckymlwo1j001l7uo015rx13th"},{"name":"heox","_id":"ckymlwo1k001r7uo09mn83o4x"},{"name":"blog","_id":"ckymlwo1m001x7uo09hzv5ne1"},{"name":"node","_id":"ckymlwo1n00217uo0ax57ae2d"},{"name":"Nodejs","_id":"ckymlwo1r002d7uo0etds94ru"},{"name":"koa","_id":"ckymlwo1s002g7uo07o9o02o2"},{"name":"前端","_id":"ckymlwo1s002i7uo00uareq7a"},{"name":"笔记","_id":"ckymlwo1t002l7uo02wg7dlfq"},{"name":"readlist","_id":"ckymlwo1t002m7uo0ados8tly"},{"name":"readList","_id":"ckymlwo1u002p7uo01sadbra9"},{"name":"canvas","_id":"ckymlwo1w002w7uo0c1iectu5"},{"name":"three.js","_id":"ckymlwo1x002z7uo09kgm16ks"},{"name":"webGL","_id":"ckymlwo1x00317uo07o100m0v"},{"name":"sessionStorage","_id":"ckymlwo1x00327uo0ahvhaehv"},{"name":"localStorage","_id":"ckymlwo1y00357uo02zddcn90"},{"name":"web storage api","_id":"ckymlwo1z00377uo0gb8rft0g"},{"name":"webuploader","_id":"ckymlwo1z00387uo0022r80fr"},{"name":"upload","_id":"ckymlwo20003b7uo0di53dknj"},{"name":"f2e","_id":"ckymlwo20003e7uo0b42eg5de"},{"name":"小程序","_id":"ckymlwo21003h7uo0b4isaiet"},{"name":"yeoman","_id":"ckymlwo23003o7uo04op83snq"},{"name":"kmapp","_id":"ckymlwo24003p7uo0fz945v5a"},{"name":"generator","_id":"ckymlwo24003q7uo0dqxw8xd9"}]}}